syntax = "proto3";

import "daemon/plugins/runc/runc.proto";
import "criu/criu.proto";

package daemon;

service Daemon {
  // C/R
  rpc Dump(DumpReq) returns (DumpResp) {}
  rpc Restore(RestoreReq) returns (RestoreResp) {}

  // Job management
  rpc Start(StartReq) returns (StartResp) {}
  rpc Manage(ManageReq) returns (ManageResp) {}
  rpc List(ListReq) returns (ListResp) {}
  rpc Kill(KillReq) returns (KillResp) {}
  rpc Delete(DeleteReq) returns (DeleteResp) {}
  rpc Attach(stream AttachReq) returns (stream AttachResp) {}

  // Plugins
  rpc ReloadPlugins(Empty) returns (Empty) {}
}

////////////////////////
//////// DUMP //////////
////////////////////////

message DumpReq {
  string Dir = 1;
  bool Stream = 2;
  string Type = 3;
  criu.criu_opts Criu = 4;

  Details Details = 5;
}

message DumpResp {
  string Message = 1;
  string Path = 2;
  ProcessState State = 3;
}

////////////////////////
/////// RESTORE ////////
////////////////////////

message RestoreReq {
  string Path = 1;
  bool Stream = 2;
  string Type = 3;
  criu.criu_opts Criu = 4;
  string Log = 5;
  bool Attach = 6;

  Details Details = 7;
}

message RestoreResp {
  string Message = 1;
  uint32 PID = 2;
  ProcessState State = 3;
}

/////////////////
////// JOB //////
/////////////////

message StartReq {
  string JID = 1;
  bool GPUEnabled = 2;
  string Type = 3;
  string Log = 4;
  bool Attach = 5;
  Details Details = 6;
}

message StartResp {
  string Message = 1;
  uint32 PID = 2;
  string JID = 3;
}

message ManageReq {
  string JID = 1;
  bool Attach = 2;
  Details Details = 3;
}

message ManageResp {
  string Message = 1;
  uint32 PID = 2;
}

message AttachReq {
  uint32 PID = 1;
  oneof Input {
    bytes Stdin = 2;
    int32 Signal = 3;
  }
}

message AttachResp {
  oneof Output {
    bytes Stdout = 1;
    bytes Stderr = 2;
    int32 ExitCode = 3;
  }
}

message ListReq {
  repeated string JIDs = 1;
}

message ListResp {
  repeated Job Jobs = 1;
}

message KillReq {
  repeated string JIDs = 1;
  int32 Signal = 2;
}

message KillResp {
  string Message = 1;
}

message DeleteReq {
  repeated string JIDs = 1;
}

message DeleteResp {
  string Message = 1;
}

message Job {
  string JID = 1;
  string Type = 2;
  ProcessState Process = 3;
  string CheckpointPath = 4;
  bool GPUEnabled = 5;
  string Log = 6;
  Details Details = 7;
}

message Details {
  optional string JID = 1;
  optional uint32 PID = 2;
  optional ProcessStartDetails ProcessStart = 3;

  // Plugin-specific job details:
  optional plugins.runc.Details Runc = 4;
  optional plugins.runc.StartDetails RuncStart = 5;
}

/////////////////////
////// PROCESS //////
/////////////////////

message ProcessStartDetails {
  string Path = 1;
  string WorkingDir = 2;
  repeated string Args = 3;
  repeated string Env = 4;
  int32 UID = 5;
  int32 GID = 6;
  repeated int32 Groups = 7;
}

message ProcessState {
  uint32 PID = 1;
  string Task = 2;
  string StartedAt = 3;
  ProcessInfo Info = 4;
  HostInfo HostInfo = 5;
  CPUInfo CPUInfo = 6;
  MemoryInfo MemoryInfo = 7;
  repeated uint32 UIDs = 8;
  repeated uint32 GIDs = 9;
  repeated uint32 Groups = 10;
}

message ProcessInfo {
  uint32 PID = 1;
  bool AttachedToHardwareAccel = 2;
  repeated OpenFilesStat OpenFiles = 3;
  string WorkingDir = 4;
  repeated ConnectionStat OpenConnections = 5;
  float MemoryPercent = 6;
  bool IsRunning = 7;
  string Status = 8;
}

message HostInfo {
  string HostID = 1;
  string Hostname = 2;
  string OS = 3;
  string Platform = 4;
  string KernelVersion = 5;
  string KernelArch = 6;
  string VirtualizationSystem = 7;
  string VirtualizationRole = 8;
}

message CPUInfo {
  int32 Count = 1;
  int32 CPU = 2;
  string VendorID = 3;
  string Family = 4;
  string PhysicalID = 5;
}

message MemoryInfo {
  uint64 Total = 1;
  uint64 Available = 2;
  uint64 Used = 3;
}

message OpenFilesStat {
  string Path = 1;
  uint64 Fd = 2;
  string Mode = 3;
}

message ConnectionStat {
  uint32 Fd = 1;
  uint32 Family = 2;
  uint32 Type = 3;
  Addr Laddr = 4;
  Addr Raddr = 5;
  string Status = 6;
  repeated int32 UIDs = 7;
  uint32 PID = 8;
}

message Addr {
  string IP = 1;
  uint32 Port = 2;
}

/////////////////////
////// Others //////

message Empty {}
