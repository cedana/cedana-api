syntax = "proto3";

import "plugins/runc/runc.proto";
import "criu/criu.proto";

package daemon;

service Daemon {
  // C/R
  rpc Dump(DumpReq) returns (DumpResp) {}
  rpc Restore(RestoreReq) returns (RestoreResp) {}

  // Job management
  rpc Start(StartReq) returns (StartResp) {}
  rpc Manage(ManageReq) returns (ManageResp) {}
  rpc List(ListReq) returns (ListResp) {}
  rpc Kill(KillReq) returns (KillResp) {}
  rpc Delete(DeleteReq) returns (DeleteResp) {}
  rpc Attach(stream AttachReq) returns (stream AttachResp) {}

  // Plugins
  rpc ReloadPlugins(Empty) returns (Empty) {}
}

////////////////////////
//////// DUMP //////////
////////////////////////

message DumpReq {
  string dir = 1;
  bool stream = 2;
  string type = 3;
  criu.criu_opts criu = 4;

  Details details = 5;
}

message DumpResp {
  string message = 1;
  string path = 2;
  ProcessState state = 3;
}

////////////////////////
/////// RESTORE ////////
////////////////////////

message RestoreReq {
  string path = 1;
  bool stream = 2;
  string type = 3;
  criu.criu_opts criu = 4;
  string log = 5;
  bool attach = 6;

  Details details = 7;
}

message RestoreResp {
  string message = 1;
  uint32 pid = 2;
  ProcessState state = 3;
}

/////////////////
////// JOB //////
/////////////////

message StartReq {
  string jid = 1;
  bool gpu_enabled = 2;
  string type = 3;
  string log = 4;
  bool attach = 5;
  Details details = 6;
}

message StartResp {
  string message = 1;
  uint32 pid = 2;
}

message ManageReq {
  string jid = 1;
  bool attach = 2;
  Details details = 3;
}

message ManageResp {
  string message = 1;
  uint32 pid = 2;
}

message AttachReq {
  uint32 pid = 1;
  oneof input {
    bytes stdin = 2;
    int32 signal = 3;
  }
}

message AttachResp {
  oneof output {
    bytes stdout = 1;
    bytes stderr = 2;
    int32 exitcode = 3;
  }
}

message ListReq {
  repeated string jids = 1;
}

message ListResp {
  repeated Job jobs = 1;
}

message KillReq {
  repeated string jids = 1;
  int32 signal = 2;
}

message KillResp {
  string message = 1;
}

message DeleteReq {
  repeated string jids = 1;
}

message DeleteResp {
  string message = 1;
}

message Job {
  string jid = 1;
  string type = 2;
  ProcessState process = 3;
  string checkpoint_path = 4;
  bool gpu_enabled = 5;
  string log = 6;
  Details details = 7;
}

message Details {
  optional string jid = 1;
  optional uint32 pid = 2;
  optional ProcessStartDetails process_start = 3;

  // Plugin-specific job details:
  optional plugins.runc.Details runc = 4;
  optional plugins.runc.StartDetails runc_start = 5;
}

/////////////////////
////// PROCESS //////
/////////////////////

message ProcessStartDetails {
  string path = 1;
  string working_dir = 2;
  repeated string args = 3;
  repeated string env = 4;
  int32 uid = 5;
  int32 gid = 6;
  repeated int32 groups = 7;
}

message ProcessState {
  uint32 pid = 1;
  string task = 2;
  string started_at = 3;
  ProcessInfo info = 4;
  HostInfo host_info = 5;
  CPUInfo cpu_info = 6;
  MemoryInfo memory_info = 7;
  repeated uint32 uids = 8;
  repeated uint32 gids = 9;
  repeated uint32 groups = 10;
}

message ProcessInfo {
  uint32 pid = 1;
  bool attached_to_hardware_accel = 2;
  repeated OpenFilesStat open_files = 3;
  string working_dir = 4;
  repeated ConnectionStat open_connections = 5;
  float memory_percent = 6;
  bool is_running = 7;
  string status = 8;
}

message HostInfo {
  string host_id = 1;
  string hostname = 2;
  string os = 3;
  string platform = 4;
  string kernel_version = 5;
  string kernel_arch = 6;
  string virtualization_system = 7;
  string virtualization_role = 8;
}

message CPUInfo {
  int32 count = 1;
  int32 cpu = 2;
  string vendor_id = 3;
  string family = 4;
  string physical_id = 5;
}

message MemoryInfo {
  uint64 total = 1;
  uint64 available = 2;
  uint64 used = 3;
}

message OpenFilesStat {
  string path = 1;
  uint64 fd = 2;
  string mode = 3;
}

message ConnectionStat {
  uint32 fd = 1;
  uint32 family = 2;
  uint32 type = 3;
  Addr laddr = 4;
  Addr raddr = 5;
  string status = 6;
  repeated int32 uids = 7;
  uint32 pid = 8;
}

message Addr {
  string ip = 1;
  uint32 port = 2;
}

/////////////////////
////// Others //////

message Empty {}
