syntax = "proto3";

package daemon;

import "criu/criu.proto";
import "daemon/checkpoint.proto";
import "daemon/health.proto";
import "daemon/misc.proto";
import "daemon/process.proto";
import "daemon/query.proto";
import "daemon/socket.proto";
import "plugins/containerd/containerd.proto";
import "plugins/k8s/k8s.proto";
import "plugins/kata/kata.proto";
import "plugins/runc/runc.proto";
import "plugins/slurm/slurm.proto";

service Daemon {
  ///// C/R /////

  // Dump a process/container/job
  rpc Dump(DumpReq) returns (DumpResp) {}
  // Restore a process/container/job
  rpc Restore(RestoreReq) returns (RestoreResp) {}
  // Attach to a process/container
  rpc Attach(stream AttachReq) returns (stream AttachResp) {}
  // Dump a VM
  rpc DumpVM(DumpVMReq) returns (DumpVMResp) {}
  // Restore a VM
  rpc RestoreVM(RestoreVMReq) returns (RestoreVMResp) {}

  ///// JOBS /////

  // Run a managed process/container (job)
  rpc Run(RunReq) returns (RunResp) {}
  // Manage a running process/container (job)
  rpc Manage(RunReq) returns (RunResp) {}
  // Get details of a managed process/container (job)
  rpc Get(GetReq) returns (GetResp) {}
  // List all managed processes/containers (jobs)
  rpc List(ListReq) returns (ListResp) {}
  // Kill a managed process/container (job)
  rpc Kill(KillReq) returns (KillResp) {}
  // Delete a managed process/container (job)
  rpc Delete(DeleteReq) returns (DeleteResp) {}

  ///// CHECKPOINTS /////

  // Get a specific checkpoint, or the latest checkpoint for a job (if JID is provided)
  rpc GetCheckpoint(GetCheckpointReq) returns (GetCheckpointResp) {}
  // List all checkpoints for a job
  rpc ListCheckpoints(ListCheckpointsReq) returns (ListCheckpointsResp) {}
  // Delete a checkpoint
  rpc DeleteCheckpoint(DeleteCheckpointReq) returns (DeleteCheckpointResp) {}

  ///// MISC /////

  // Generic query call
  rpc Query(QueryReq) returns (QueryResp) {}
  // Health check the daemon, and installed plugins
  rpc HealthCheck(HealthCheckReq) returns (HealthCheckResp) {}
  // Reload plugins in the daemon. Call after installing/removing any plugins.
  rpc ReloadPlugins(Empty) returns (Empty) {}
  // Create a unix socket
  rpc CreateUnixSocket(Empty) returns (SocketResp);
}

////////////////////////
//////// DUMP //////////
////////////////////////

message DumpReq {
  Details Details = 1; // details about the job, process, or container to dump

  string Dir = 2; // directory to dump to
  string Name = 3; // name of the dump
  string Compression = 4; // tar, gzip, lz4, none
  int32 Streams = 5; // number of parallel streams for dumping, 0 for no streaming
  string Type = 6; // type of the dump, e.g., runc, containerd, kata
  criu.criu_opts Criu = 7; // CRIU overrides for the dump
  string GPUFreezeType = 8; // type of GPU freeze to use, e.g., IPC, NCCL
}

message DumpResp {
  repeated string Messages = 1; // messages from the dump
  string Path = 2; // path to the dump file
  ProcessState State = 3; // state of the process during the dump
}

////////////////////////
/////// RESTORE ////////
////////////////////////

message RestoreReq {
  Details Details = 1; // details about the job, process, or container to restore

  string Path = 2; // compression is auto-detected
  string PidFile = 3; // file to write the PID to
  string Type = 4; // type of the restore, e.g., runc, containerd, kata
  criu.criu_opts Criu = 5;
  string Log = 6; // standard IO log file
  bool Attachable = 7; // whether to restore with attachable standard IO

  uint32 UID = 8; // user ID of calling process
  uint32 GID = 9; // group ID of calling process
  repeated uint32 Groups = 10; // groups of the calling process
  repeated string Env = 11; // environment variables of the calling process
}

message RestoreResp {
  repeated string Messages = 1; // messages from the restore
  uint32 PID = 2; // PID of the restored process
  ProcessState State = 3; // state of the process after restore
}

/////////////////////////
/////// DUMP VM /////////
/////////////////////////

message DumpVMReq {
  Details Details = 1; // details about the VM to dump

  string Dir = 2; // directory to dump the VM to
  string Type = 3; // type of the VM, e.g., qemu, kvm
}

message DumpVMResp {
  string TarDumpDir = 1; // directory where the VM dump is stored
}

/////////////////////////
////// RESTORE VM ///////
/////////////////////////

message RestoreVMReq {
  bool VMSnapshot = 1; // whether to restore a VM snapshot
  string VMSocketPath = 2; // path to the VM socket
  string VMSnapshotPath = 3; // path to the VM snapshot
  repeated RestoredNetConfig RestoredNetConfig = 4;
  string Type = 5; // type of the VM, e.g., clh
  repeated string RequestIDs = 6;
}

message RestoredNetConfig {
  string ID = 1; // ID of the network configuration
  int64 NumFDs = 2;
  repeated int64 Fds = 3;
}

message RestoreVMResp {
  string State = 1;
}

/////////////////
////// JOB //////
/////////////////

enum RunAction {
  START_NEW = 0; // start a new job
  MANAGE_EXISTING = 1; // manage an existing job
  MANAGE_UPCOMING = 2; // manage an upcoming job
}

message RunReq {
  Details Details = 1;

  string JID = 2; // job ID, if empty a new one will be generated
  string PidFile = 3; // file to write the PID to
  bool GPUEnabled = 4; // whether the job requires GPU support
  string Type = 5; // type of the job, e.g., runc, containerd, kata
  string Log = 6; // standard IO log file
  bool Attachable = 7; // whether to run the job with attachable standard IO
  RunAction Action = 8; // action to use for the job

  uint32 UID = 9; // user ID of the calling process
  uint32 GID = 10; // group ID of the calling process
  repeated uint32 Groups = 11; // groups of the calling process
  repeated string Env = 12; // environment variables of the calling process
}

message RunResp {
  repeated string Messages = 1; // messages from the run operation
  uint32 PID = 2; // PID of the started or managed process
}

message AttachReq {
  uint32 PID = 1; // PID of the process to attach to
  oneof Input {
    bytes Stdin = 2; // standard input bytes
    int32 Signal = 3; // signal to send to the process
  }
}

message AttachResp {
  oneof Output {
    bytes Stdout = 1; // standard output bytes
    bytes Stderr = 2; // standard error bytes
    int32 ExitCode = 3; // exit code of the process
  }
}

message GetReq {
  string JID = 1;
}

message GetResp {
  Job Job = 1;
}

message ListReq {
  bool Remote = 1; // include jobs from remote hosts
  repeated string JIDs = 2; // list specific jobs by JID
}

message ListResp {
  repeated Job Jobs = 1;
}

message KillReq {
  repeated string JIDs = 1; // JIDs of the jobs to kill
  int32 Signal = 2; // signal to send to the jobs
}

message KillResp {
  repeated string Messages = 1; // messages from the kill operation
}

message DeleteReq {
  repeated string JIDs = 1; // JIDs of the jobs to delete
}

message DeleteResp {
  repeated string Messages = 1; // messages from the delete operation
}

message Job {
  Details Details = 1; // plugin-specific or type-specific details
  string JID = 2; // unique job ID
  string Type = 3; // type of the job, e.g., runc, containerd, kata
  ProcessState State = 4; // process state of the job
  string Log = 5; // standard IO log file for the job
}

// Details are plugin-specific or 'type' specific details.
message Details {
  optional string JID = 1; // job ID, if applicable
  optional Process Process = 2; // process details, if applicable

  // Plugin-specific job details:
  optional plugins.runc.Runc Runc = 3; // runc plugin details
  optional plugins.containerd.Containerd Containerd = 4; // containerd plugin details
  optional plugins.k8s.Pod Pod = 5; // kubernetes pod details
  optional plugins.kata.Kata Kata = 6; // kata containers plugin details
  optional plugins.slurm.Slurm Slurm = 7; // slurm job details
}
