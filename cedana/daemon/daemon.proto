syntax = "proto3";

package daemon;

import "criu/criu.proto";
import "daemon/health.proto";
import "daemon/misc.proto";
import "daemon/process.proto";
import "plugins/containerd/containerd.proto";
import "plugins/runc/runc.proto";

service Daemon {
  // Dump a process/container/job
  rpc Dump(DumpReq) returns (DumpResp) {}
  // Restore a process/container/job
  rpc Restore(RestoreReq) returns (RestoreResp) {}

  // Run a managed process/container (job)
  rpc Run(RunReq) returns (RunResp) {}
  // Manage a running process/container (job)
  rpc Manage(RunReq) returns (RunResp) {}
  // List all managed processes/containers (jobs)
  rpc List(ListReq) returns (ListResp) {}
  // Kill a managed process/container (job)
  rpc Kill(KillReq) returns (KillResp) {}
  // Delete a managed process/container (job)
  rpc Delete(DeleteReq) returns (DeleteResp) {}
  // Attach to a managed process/container (job)
  rpc Attach(stream AttachReq) returns (stream AttachResp) {}

  // Health check the daemon, and installed plugins
  rpc HealthCheck(HealthCheckReq) returns (HealthCheckResp) {}
  // Reload plugins in the daemon. Call after installing/removing any plugins.
  rpc ReloadPlugins(Empty) returns (Empty) {}
}

////////////////////////
//////// DUMP //////////
////////////////////////

message DumpReq {
  string Dir = 1;
  bool Stream = 2;
  string Type = 3;
  criu.criu_opts Criu = 4;

  Details Details = 5;
}

message DumpResp {
  string Message = 1;
  string Path = 2;
  ProcessState State = 3;
}

////////////////////////
/////// RESTORE ////////
////////////////////////

message RestoreReq {
  string Path = 1;
  bool Stream = 2;
  string Type = 3;
  criu.criu_opts Criu = 4;
  string Log = 5; // standard IO log file
  bool Attachable = 6;

  Details Details = 7;
}

message RestoreResp {
  string Message = 1;
  uint32 PID = 2;
  ProcessState State = 3;
}

/////////////////
////// JOB //////
/////////////////

message RunReq {
  string JID = 1;
  bool GPUEnabled = 2;
  string Type = 3;
  string Log = 4;
  bool Attachable = 5;

  Details Details = 6;
}

message RunResp {
  string Message = 1;
  uint32 PID = 2;
}

message AttachReq {
  uint32 PID = 1;
  oneof Input {
    bytes Stdin = 2;
    int32 Signal = 3;
  }
}

message AttachResp {
  oneof Output {
    bytes Stdout = 1;
    bytes Stderr = 2;
    int32 ExitCode = 3;
  }
}

message ListReq {
  repeated string JIDs = 1;
}

message ListResp {
  repeated Job Jobs = 1;
}

message KillReq {
  repeated string JIDs = 1;
  int32 Signal = 2;
}

message KillResp {
  string Message = 1;
}

message DeleteReq {
  repeated string JIDs = 1;
}

message DeleteResp {
  string Message = 1;
}

message Job {
  string JID = 1;
  string Type = 2;
  ProcessState State = 3;
  repeated Checkpoint Checkpoints = 4;
  bool GPUEnabled = 5;
  string Log = 6;
  Details Details = 7;
}

// Details are plugin-specific or 'type' specific details.
message Details {
  optional string JID = 1;
  optional Process Process = 2;

  // Plugin-specific job details:
  optional plugins.runc.Runc Runc = 3;
  optional plugins.containerd.Containerd Containerd = 4;
}

message Checkpoint {
  string Path = 1;
  int64 Time = 2; // in Unix milliseconds
  int64 Size = 3;
}
