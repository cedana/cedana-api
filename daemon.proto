syntax = "proto3";

import "plugins/runc.proto";

package cedana.daemon;

service Daemon {
  // C/R
  rpc Dump(DumpReq) returns (DumpResp) {}
  rpc Restore(RestoreReq) returns (RestoreResp) {}

  // Job management
  rpc Exec(ExecReq) returns (ExecResp) {}
  rpc Manage(ManageReq) returns (ManageResp) {}
  rpc List(ListReq) returns (ListResp) {}
}

////////////////////////
//////// DUMP //////////
////////////////////////

message DumpReq {
  string Dir = 1;
  bool Stream = 2;
  string Type = 3;
  CriuOpts Criu = 4;

  oneof Details {
    uint32 PID = 5;
    string JID = 6;

    // Plugin-specific dump options:
    plugins.runc.DumpOpts Runc = 7;
  }
}

message DumpResp {
  string Message = 1;
  string Path = 2;
  ProcessState State = 3;
}

////////////////////////
/////// RESTORE ////////
////////////////////////

message RestoreReq {
  string Path = 1;
  bool Stream = 2;
  string Type = 3;
  CriuOpts Criu = 4;

  oneof Details {
    string JID = 5;

    // Plugin-specific restore options:
    plugins.runc.RestoreOpts Runc = 6;
  }
}

message RestoreResp {
  string Message = 1;
  uint32 PID = 2;
  ProcessState State = 3;
}

/////////////////
////// JOB //////
/////////////////

message ExecReq {
  string JID = 1;
  string Cmd = 2;
  string WorkingDir = 3;
  repeated string Args = 4;
  repeated string Env = 5;
  int32 UID = 6;
  int32 GID = 7;
  repeated int32 Groups = 8;
  bool GPU = 9;
}

message ExecResp {
  string Message = 1;
  uint32 PID = 2;
}

message ManageReq {
  string JID = 1;
  JobDetails Details = 2;
}

message ManageResp {
  string Message = 1;
  ProcessState State = 2;
}

message ListReq {
}

message ListResp {
  repeated Job Jobs = 1;
}

message Job {
  string JID = 1;
  string Type = 2;
  ProcessState Process = 3;
  string CheckpointPath = 4;
  bool GPU = 5;
  JobDetails Details = 6;
}

message JobDetails {
  oneof Details {
    uint32 PID = 1;

    // Plugin-specific job details:
    plugins.runc.Job Runc = 2;
  }
}

////////////////////
/////// CRIU ///////
////////////////////

// XXX YA: Find a way to re-use CRIU's rpc.proto
message CriuOpts {
  string ImagesDir = 1;
  int32 ImagesDirFd = 2;
  int32 WorkDirFd = 3;
  string ParentImg = 4;
  bool LeaveRunning = 5;
  repeated string External = 6;
  bool ExtUnixSk = 7;
  bool ShellJob = 8;
  bool FileLocks = 9;
  bool PreDump = 10;
  bool Stream = 11;
  uint32 EmptyNs = 12;
  bool AutoDedup = 13;
  bool LazyPages = 14;
  int32 StatusFd = 15;
  string LsmProfile = 16;
  string LsmMountContext = 17;
  bool TcpEstablished = 18;
  bool TcpClose = 19;
  repeated InheritFd InheritFd = 20;
}

message InheritFd {
  string Key = 1;
  int32 Fd = 2;
}

/////////////////////
////// PROCESS //////
/////////////////////

message ProcessState {
  uint32 PID = 1;
  string Task = 2;
  string StartedAt = 3;
  ProcessInfo Info = 4;
  HostInfo HostInfo = 5;
  CPUInfo CPUInfo = 6;
  MemoryInfo MemoryInfo = 7;
  repeated uint32 UIDs = 8;
  repeated uint32 GIDs = 9;
  repeated uint32 Groups = 10;
  int32 ExitCode = 11;
}

message ProcessInfo {
  uint32 PID = 1;
  bool AttachedToHardwareAccel = 2;
  repeated OpenFilesStat OpenFiles = 3;
  string WorkingDir = 4;
  repeated ConnectionStat OpenConnections = 5;
  float MemoryPercent = 6;
  bool IsRunning = 7;
  string Status = 8;
}

message HostInfo {
  string HostID = 1;
  string Hostname = 2;
  string OS = 3;
  string Platform = 4;
  string KernelVersion = 5;
  string KernelArch = 6;
  string VirtualizationSystem = 7;
  string VirtualizationRole = 8;
}

message CPUInfo {
  int32 Count = 1;
  int32 CPU = 2;
  string VendorID = 3;
  string Family = 4;
  string PhysicalID = 5;
}

message MemoryInfo {
  uint64 Total = 1;
  uint64 Available = 2;
  uint64 Used = 3;
}

message OpenFilesStat {
  string Path = 1;
  uint64 Fd = 2;
  string Mode = 3;
}

message ConnectionStat {
  uint32 Fd = 1;
  uint32 Family = 2;
  uint32 Type = 3;
  Addr Laddr = 4;
  Addr Raddr = 5;
  string Status = 6;
  repeated int32 UIDs = 7;
  uint32 PID = 8;
}

message Addr {
  string IP = 1;
  uint32 Port = 2;
}
