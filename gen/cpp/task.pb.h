// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_task_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_task_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
#include "gpu.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_task_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_task_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[63]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_task_2eproto;
namespace cedana {
namespace services {
namespace task {
class Addr;
class AddrDefaultTypeInternal;
extern AddrDefaultTypeInternal _Addr_default_instance_;
class CPUInfo;
class CPUInfoDefaultTypeInternal;
extern CPUInfoDefaultTypeInternal _CPUInfo_default_instance_;
class CRIOImagePushArgs;
class CRIOImagePushArgsDefaultTypeInternal;
extern CRIOImagePushArgsDefaultTypeInternal _CRIOImagePushArgs_default_instance_;
class CRIOImagePushResp;
class CRIOImagePushRespDefaultTypeInternal;
extern CRIOImagePushRespDefaultTypeInternal _CRIOImagePushResp_default_instance_;
class CRIORootfsDumpArgs;
class CRIORootfsDumpArgsDefaultTypeInternal;
extern CRIORootfsDumpArgsDefaultTypeInternal _CRIORootfsDumpArgs_default_instance_;
class CRIORootfsDumpResp;
class CRIORootfsDumpRespDefaultTypeInternal;
extern CRIORootfsDumpRespDefaultTypeInternal _CRIORootfsDumpResp_default_instance_;
class CheckpointFileStats;
class CheckpointFileStatsDefaultTypeInternal;
extern CheckpointFileStatsDefaultTypeInternal _CheckpointFileStats_default_instance_;
class CheckpointReason;
class CheckpointReasonDefaultTypeInternal;
extern CheckpointReasonDefaultTypeInternal _CheckpointReason_default_instance_;
class ConnectionStat;
class ConnectionStatDefaultTypeInternal;
extern ConnectionStatDefaultTypeInternal _ConnectionStat_default_instance_;
class ContainerdContainer;
class ContainerdContainerDefaultTypeInternal;
extern ContainerdContainerDefaultTypeInternal _ContainerdContainer_default_instance_;
class ContainerdDumpArgs;
class ContainerdDumpArgsDefaultTypeInternal;
extern ContainerdDumpArgsDefaultTypeInternal _ContainerdDumpArgs_default_instance_;
class ContainerdDumpResp;
class ContainerdDumpRespDefaultTypeInternal;
extern ContainerdDumpRespDefaultTypeInternal _ContainerdDumpResp_default_instance_;
class ContainerdQueryArgs;
class ContainerdQueryArgsDefaultTypeInternal;
extern ContainerdQueryArgsDefaultTypeInternal _ContainerdQueryArgs_default_instance_;
class ContainerdQueryResp;
class ContainerdQueryRespDefaultTypeInternal;
extern ContainerdQueryRespDefaultTypeInternal _ContainerdQueryResp_default_instance_;
class ContainerdRestoreArgs;
class ContainerdRestoreArgsDefaultTypeInternal;
extern ContainerdRestoreArgsDefaultTypeInternal _ContainerdRestoreArgs_default_instance_;
class ContainerdRestoreResp;
class ContainerdRestoreRespDefaultTypeInternal;
extern ContainerdRestoreRespDefaultTypeInternal _ContainerdRestoreResp_default_instance_;
class ContainerdRootfsDumpArgs;
class ContainerdRootfsDumpArgsDefaultTypeInternal;
extern ContainerdRootfsDumpArgsDefaultTypeInternal _ContainerdRootfsDumpArgs_default_instance_;
class ContainerdRootfsDumpResp;
class ContainerdRootfsDumpRespDefaultTypeInternal;
extern ContainerdRootfsDumpRespDefaultTypeInternal _ContainerdRootfsDumpResp_default_instance_;
class ContainerdRootfsRestoreArgs;
class ContainerdRootfsRestoreArgsDefaultTypeInternal;
extern ContainerdRootfsRestoreArgsDefaultTypeInternal _ContainerdRootfsRestoreArgs_default_instance_;
class ContainerdRootfsRestoreResp;
class ContainerdRootfsRestoreRespDefaultTypeInternal;
extern ContainerdRootfsRestoreRespDefaultTypeInternal _ContainerdRootfsRestoreResp_default_instance_;
class CriuOpts;
class CriuOptsDefaultTypeInternal;
extern CriuOptsDefaultTypeInternal _CriuOpts_default_instance_;
class DetailedHealthCheckRequest;
class DetailedHealthCheckRequestDefaultTypeInternal;
extern DetailedHealthCheckRequestDefaultTypeInternal _DetailedHealthCheckRequest_default_instance_;
class DetailedHealthCheckResponse;
class DetailedHealthCheckResponseDefaultTypeInternal;
extern DetailedHealthCheckResponseDefaultTypeInternal _DetailedHealthCheckResponse_default_instance_;
class DumpArgs;
class DumpArgsDefaultTypeInternal;
extern DumpArgsDefaultTypeInternal _DumpArgs_default_instance_;
class DumpResp;
class DumpRespDefaultTypeInternal;
extern DumpRespDefaultTypeInternal _DumpResp_default_instance_;
class DumpStats;
class DumpStatsDefaultTypeInternal;
extern DumpStatsDefaultTypeInternal _DumpStats_default_instance_;
class GetConfigRequest;
class GetConfigRequestDefaultTypeInternal;
extern GetConfigRequestDefaultTypeInternal _GetConfigRequest_default_instance_;
class GetConfigResponse;
class GetConfigResponseDefaultTypeInternal;
extern GetConfigResponseDefaultTypeInternal _GetConfigResponse_default_instance_;
class HealthCheckStats;
class HealthCheckStatsDefaultTypeInternal;
extern HealthCheckStatsDefaultTypeInternal _HealthCheckStats_default_instance_;
class HostInfo;
class HostInfoDefaultTypeInternal;
extern HostInfoDefaultTypeInternal _HostInfo_default_instance_;
class LogStreamingArgs;
class LogStreamingArgsDefaultTypeInternal;
extern LogStreamingArgsDefaultTypeInternal _LogStreamingArgs_default_instance_;
class LogStreamingResp;
class LogStreamingRespDefaultTypeInternal;
extern LogStreamingRespDefaultTypeInternal _LogStreamingResp_default_instance_;
class MemoryInfo;
class MemoryInfoDefaultTypeInternal;
extern MemoryInfoDefaultTypeInternal _MemoryInfo_default_instance_;
class OpenFilesStat;
class OpenFilesStatDefaultTypeInternal;
extern OpenFilesStatDefaultTypeInternal _OpenFilesStat_default_instance_;
class ProcessInfo;
class ProcessInfoDefaultTypeInternal;
extern ProcessInfoDefaultTypeInternal _ProcessInfo_default_instance_;
class ProcessState;
class ProcessStateDefaultTypeInternal;
extern ProcessStateDefaultTypeInternal _ProcessState_default_instance_;
class ProcessStateStreamingArgs;
class ProcessStateStreamingArgsDefaultTypeInternal;
extern ProcessStateStreamingArgsDefaultTypeInternal _ProcessStateStreamingArgs_default_instance_;
class QueryArgs;
class QueryArgsDefaultTypeInternal;
extern QueryArgsDefaultTypeInternal _QueryArgs_default_instance_;
class QueryResp;
class QueryRespDefaultTypeInternal;
extern QueryRespDefaultTypeInternal _QueryResp_default_instance_;
class QueueJobCheckpointRequest;
class QueueJobCheckpointRequestDefaultTypeInternal;
extern QueueJobCheckpointRequestDefaultTypeInternal _QueueJobCheckpointRequest_default_instance_;
class QueueJobID;
class QueueJobIDDefaultTypeInternal;
extern QueueJobIDDefaultTypeInternal _QueueJobID_default_instance_;
class QueueJobRestoreRequest;
class QueueJobRestoreRequestDefaultTypeInternal;
extern QueueJobRestoreRequestDefaultTypeInternal _QueueJobRestoreRequest_default_instance_;
class QueueJobStatus;
class QueueJobStatusDefaultTypeInternal;
extern QueueJobStatusDefaultTypeInternal _QueueJobStatus_default_instance_;
class RemoteState;
class RemoteStateDefaultTypeInternal;
extern RemoteStateDefaultTypeInternal _RemoteState_default_instance_;
class RestoreArgs;
class RestoreArgsDefaultTypeInternal;
extern RestoreArgsDefaultTypeInternal _RestoreArgs_default_instance_;
class RestoreAttachArgs;
class RestoreAttachArgsDefaultTypeInternal;
extern RestoreAttachArgsDefaultTypeInternal _RestoreAttachArgs_default_instance_;
class RestoreAttachResp;
class RestoreAttachRespDefaultTypeInternal;
extern RestoreAttachRespDefaultTypeInternal _RestoreAttachResp_default_instance_;
class RestoreResp;
class RestoreRespDefaultTypeInternal;
extern RestoreRespDefaultTypeInternal _RestoreResp_default_instance_;
class RestoreStats;
class RestoreStatsDefaultTypeInternal;
extern RestoreStatsDefaultTypeInternal _RestoreStats_default_instance_;
class RuncContainer;
class RuncContainerDefaultTypeInternal;
extern RuncContainerDefaultTypeInternal _RuncContainer_default_instance_;
class RuncDumpArgs;
class RuncDumpArgsDefaultTypeInternal;
extern RuncDumpArgsDefaultTypeInternal _RuncDumpArgs_default_instance_;
class RuncDumpResp;
class RuncDumpRespDefaultTypeInternal;
extern RuncDumpRespDefaultTypeInternal _RuncDumpResp_default_instance_;
class RuncGetPausePidArgs;
class RuncGetPausePidArgsDefaultTypeInternal;
extern RuncGetPausePidArgsDefaultTypeInternal _RuncGetPausePidArgs_default_instance_;
class RuncGetPausePidResp;
class RuncGetPausePidRespDefaultTypeInternal;
extern RuncGetPausePidRespDefaultTypeInternal _RuncGetPausePidResp_default_instance_;
class RuncOpts;
class RuncOptsDefaultTypeInternal;
extern RuncOptsDefaultTypeInternal _RuncOpts_default_instance_;
class RuncQueryArgs;
class RuncQueryArgsDefaultTypeInternal;
extern RuncQueryArgsDefaultTypeInternal _RuncQueryArgs_default_instance_;
class RuncQueryResp;
class RuncQueryRespDefaultTypeInternal;
extern RuncQueryRespDefaultTypeInternal _RuncQueryResp_default_instance_;
class RuncRestoreArgs;
class RuncRestoreArgsDefaultTypeInternal;
extern RuncRestoreArgsDefaultTypeInternal _RuncRestoreArgs_default_instance_;
class RuncRestoreResp;
class RuncRestoreRespDefaultTypeInternal;
extern RuncRestoreRespDefaultTypeInternal _RuncRestoreResp_default_instance_;
class StartArgs;
class StartArgsDefaultTypeInternal;
extern StartArgsDefaultTypeInternal _StartArgs_default_instance_;
class StartAttachArgs;
class StartAttachArgsDefaultTypeInternal;
extern StartAttachArgsDefaultTypeInternal _StartAttachArgs_default_instance_;
class StartAttachResp;
class StartAttachRespDefaultTypeInternal;
extern StartAttachRespDefaultTypeInternal _StartAttachResp_default_instance_;
class StartResp;
class StartRespDefaultTypeInternal;
extern StartRespDefaultTypeInternal _StartResp_default_instance_;
}  // namespace task
}  // namespace services
}  // namespace cedana
PROTOBUF_NAMESPACE_OPEN
template<> ::cedana::services::task::Addr* Arena::CreateMaybeMessage<::cedana::services::task::Addr>(Arena*);
template<> ::cedana::services::task::CPUInfo* Arena::CreateMaybeMessage<::cedana::services::task::CPUInfo>(Arena*);
template<> ::cedana::services::task::CRIOImagePushArgs* Arena::CreateMaybeMessage<::cedana::services::task::CRIOImagePushArgs>(Arena*);
template<> ::cedana::services::task::CRIOImagePushResp* Arena::CreateMaybeMessage<::cedana::services::task::CRIOImagePushResp>(Arena*);
template<> ::cedana::services::task::CRIORootfsDumpArgs* Arena::CreateMaybeMessage<::cedana::services::task::CRIORootfsDumpArgs>(Arena*);
template<> ::cedana::services::task::CRIORootfsDumpResp* Arena::CreateMaybeMessage<::cedana::services::task::CRIORootfsDumpResp>(Arena*);
template<> ::cedana::services::task::CheckpointFileStats* Arena::CreateMaybeMessage<::cedana::services::task::CheckpointFileStats>(Arena*);
template<> ::cedana::services::task::CheckpointReason* Arena::CreateMaybeMessage<::cedana::services::task::CheckpointReason>(Arena*);
template<> ::cedana::services::task::ConnectionStat* Arena::CreateMaybeMessage<::cedana::services::task::ConnectionStat>(Arena*);
template<> ::cedana::services::task::ContainerdContainer* Arena::CreateMaybeMessage<::cedana::services::task::ContainerdContainer>(Arena*);
template<> ::cedana::services::task::ContainerdDumpArgs* Arena::CreateMaybeMessage<::cedana::services::task::ContainerdDumpArgs>(Arena*);
template<> ::cedana::services::task::ContainerdDumpResp* Arena::CreateMaybeMessage<::cedana::services::task::ContainerdDumpResp>(Arena*);
template<> ::cedana::services::task::ContainerdQueryArgs* Arena::CreateMaybeMessage<::cedana::services::task::ContainerdQueryArgs>(Arena*);
template<> ::cedana::services::task::ContainerdQueryResp* Arena::CreateMaybeMessage<::cedana::services::task::ContainerdQueryResp>(Arena*);
template<> ::cedana::services::task::ContainerdRestoreArgs* Arena::CreateMaybeMessage<::cedana::services::task::ContainerdRestoreArgs>(Arena*);
template<> ::cedana::services::task::ContainerdRestoreResp* Arena::CreateMaybeMessage<::cedana::services::task::ContainerdRestoreResp>(Arena*);
template<> ::cedana::services::task::ContainerdRootfsDumpArgs* Arena::CreateMaybeMessage<::cedana::services::task::ContainerdRootfsDumpArgs>(Arena*);
template<> ::cedana::services::task::ContainerdRootfsDumpResp* Arena::CreateMaybeMessage<::cedana::services::task::ContainerdRootfsDumpResp>(Arena*);
template<> ::cedana::services::task::ContainerdRootfsRestoreArgs* Arena::CreateMaybeMessage<::cedana::services::task::ContainerdRootfsRestoreArgs>(Arena*);
template<> ::cedana::services::task::ContainerdRootfsRestoreResp* Arena::CreateMaybeMessage<::cedana::services::task::ContainerdRootfsRestoreResp>(Arena*);
template<> ::cedana::services::task::CriuOpts* Arena::CreateMaybeMessage<::cedana::services::task::CriuOpts>(Arena*);
template<> ::cedana::services::task::DetailedHealthCheckRequest* Arena::CreateMaybeMessage<::cedana::services::task::DetailedHealthCheckRequest>(Arena*);
template<> ::cedana::services::task::DetailedHealthCheckResponse* Arena::CreateMaybeMessage<::cedana::services::task::DetailedHealthCheckResponse>(Arena*);
template<> ::cedana::services::task::DumpArgs* Arena::CreateMaybeMessage<::cedana::services::task::DumpArgs>(Arena*);
template<> ::cedana::services::task::DumpResp* Arena::CreateMaybeMessage<::cedana::services::task::DumpResp>(Arena*);
template<> ::cedana::services::task::DumpStats* Arena::CreateMaybeMessage<::cedana::services::task::DumpStats>(Arena*);
template<> ::cedana::services::task::GetConfigRequest* Arena::CreateMaybeMessage<::cedana::services::task::GetConfigRequest>(Arena*);
template<> ::cedana::services::task::GetConfigResponse* Arena::CreateMaybeMessage<::cedana::services::task::GetConfigResponse>(Arena*);
template<> ::cedana::services::task::HealthCheckStats* Arena::CreateMaybeMessage<::cedana::services::task::HealthCheckStats>(Arena*);
template<> ::cedana::services::task::HostInfo* Arena::CreateMaybeMessage<::cedana::services::task::HostInfo>(Arena*);
template<> ::cedana::services::task::LogStreamingArgs* Arena::CreateMaybeMessage<::cedana::services::task::LogStreamingArgs>(Arena*);
template<> ::cedana::services::task::LogStreamingResp* Arena::CreateMaybeMessage<::cedana::services::task::LogStreamingResp>(Arena*);
template<> ::cedana::services::task::MemoryInfo* Arena::CreateMaybeMessage<::cedana::services::task::MemoryInfo>(Arena*);
template<> ::cedana::services::task::OpenFilesStat* Arena::CreateMaybeMessage<::cedana::services::task::OpenFilesStat>(Arena*);
template<> ::cedana::services::task::ProcessInfo* Arena::CreateMaybeMessage<::cedana::services::task::ProcessInfo>(Arena*);
template<> ::cedana::services::task::ProcessState* Arena::CreateMaybeMessage<::cedana::services::task::ProcessState>(Arena*);
template<> ::cedana::services::task::ProcessStateStreamingArgs* Arena::CreateMaybeMessage<::cedana::services::task::ProcessStateStreamingArgs>(Arena*);
template<> ::cedana::services::task::QueryArgs* Arena::CreateMaybeMessage<::cedana::services::task::QueryArgs>(Arena*);
template<> ::cedana::services::task::QueryResp* Arena::CreateMaybeMessage<::cedana::services::task::QueryResp>(Arena*);
template<> ::cedana::services::task::QueueJobCheckpointRequest* Arena::CreateMaybeMessage<::cedana::services::task::QueueJobCheckpointRequest>(Arena*);
template<> ::cedana::services::task::QueueJobID* Arena::CreateMaybeMessage<::cedana::services::task::QueueJobID>(Arena*);
template<> ::cedana::services::task::QueueJobRestoreRequest* Arena::CreateMaybeMessage<::cedana::services::task::QueueJobRestoreRequest>(Arena*);
template<> ::cedana::services::task::QueueJobStatus* Arena::CreateMaybeMessage<::cedana::services::task::QueueJobStatus>(Arena*);
template<> ::cedana::services::task::RemoteState* Arena::CreateMaybeMessage<::cedana::services::task::RemoteState>(Arena*);
template<> ::cedana::services::task::RestoreArgs* Arena::CreateMaybeMessage<::cedana::services::task::RestoreArgs>(Arena*);
template<> ::cedana::services::task::RestoreAttachArgs* Arena::CreateMaybeMessage<::cedana::services::task::RestoreAttachArgs>(Arena*);
template<> ::cedana::services::task::RestoreAttachResp* Arena::CreateMaybeMessage<::cedana::services::task::RestoreAttachResp>(Arena*);
template<> ::cedana::services::task::RestoreResp* Arena::CreateMaybeMessage<::cedana::services::task::RestoreResp>(Arena*);
template<> ::cedana::services::task::RestoreStats* Arena::CreateMaybeMessage<::cedana::services::task::RestoreStats>(Arena*);
template<> ::cedana::services::task::RuncContainer* Arena::CreateMaybeMessage<::cedana::services::task::RuncContainer>(Arena*);
template<> ::cedana::services::task::RuncDumpArgs* Arena::CreateMaybeMessage<::cedana::services::task::RuncDumpArgs>(Arena*);
template<> ::cedana::services::task::RuncDumpResp* Arena::CreateMaybeMessage<::cedana::services::task::RuncDumpResp>(Arena*);
template<> ::cedana::services::task::RuncGetPausePidArgs* Arena::CreateMaybeMessage<::cedana::services::task::RuncGetPausePidArgs>(Arena*);
template<> ::cedana::services::task::RuncGetPausePidResp* Arena::CreateMaybeMessage<::cedana::services::task::RuncGetPausePidResp>(Arena*);
template<> ::cedana::services::task::RuncOpts* Arena::CreateMaybeMessage<::cedana::services::task::RuncOpts>(Arena*);
template<> ::cedana::services::task::RuncQueryArgs* Arena::CreateMaybeMessage<::cedana::services::task::RuncQueryArgs>(Arena*);
template<> ::cedana::services::task::RuncQueryResp* Arena::CreateMaybeMessage<::cedana::services::task::RuncQueryResp>(Arena*);
template<> ::cedana::services::task::RuncRestoreArgs* Arena::CreateMaybeMessage<::cedana::services::task::RuncRestoreArgs>(Arena*);
template<> ::cedana::services::task::RuncRestoreResp* Arena::CreateMaybeMessage<::cedana::services::task::RuncRestoreResp>(Arena*);
template<> ::cedana::services::task::StartArgs* Arena::CreateMaybeMessage<::cedana::services::task::StartArgs>(Arena*);
template<> ::cedana::services::task::StartAttachArgs* Arena::CreateMaybeMessage<::cedana::services::task::StartAttachArgs>(Arena*);
template<> ::cedana::services::task::StartAttachResp* Arena::CreateMaybeMessage<::cedana::services::task::StartAttachResp>(Arena*);
template<> ::cedana::services::task::StartResp* Arena::CreateMaybeMessage<::cedana::services::task::StartResp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cedana {
namespace services {
namespace task {

enum OpenFilesStat_StreamType : int {
  OpenFilesStat_StreamType_STDIN = 0,
  OpenFilesStat_StreamType_STDOUT = 1,
  OpenFilesStat_StreamType_STDERR = 2,
  OpenFilesStat_StreamType_NONE = 3,
  OpenFilesStat_StreamType_OpenFilesStat_StreamType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OpenFilesStat_StreamType_OpenFilesStat_StreamType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OpenFilesStat_StreamType_IsValid(int value);
constexpr OpenFilesStat_StreamType OpenFilesStat_StreamType_StreamType_MIN = OpenFilesStat_StreamType_STDIN;
constexpr OpenFilesStat_StreamType OpenFilesStat_StreamType_StreamType_MAX = OpenFilesStat_StreamType_NONE;
constexpr int OpenFilesStat_StreamType_StreamType_ARRAYSIZE = OpenFilesStat_StreamType_StreamType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpenFilesStat_StreamType_descriptor();
template<typename T>
inline const std::string& OpenFilesStat_StreamType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OpenFilesStat_StreamType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OpenFilesStat_StreamType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OpenFilesStat_StreamType_descriptor(), enum_t_value);
}
inline bool OpenFilesStat_StreamType_Parse(
    const std::string& name, OpenFilesStat_StreamType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OpenFilesStat_StreamType>(
    OpenFilesStat_StreamType_descriptor(), name, value);
}
enum CheckpointReason_CheckpointReasonEnum : int {
  CheckpointReason_CheckpointReasonEnum_INSTANCE_TERMINATION = 0,
  CheckpointReason_CheckpointReasonEnum_JOB_TERMINATION = 1,
  CheckpointReason_CheckpointReasonEnum_HEARTBEAT = 2,
  CheckpointReason_CheckpointReasonEnum_CheckpointReason_CheckpointReasonEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CheckpointReason_CheckpointReasonEnum_CheckpointReason_CheckpointReasonEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CheckpointReason_CheckpointReasonEnum_IsValid(int value);
constexpr CheckpointReason_CheckpointReasonEnum CheckpointReason_CheckpointReasonEnum_CheckpointReasonEnum_MIN = CheckpointReason_CheckpointReasonEnum_INSTANCE_TERMINATION;
constexpr CheckpointReason_CheckpointReasonEnum CheckpointReason_CheckpointReasonEnum_CheckpointReasonEnum_MAX = CheckpointReason_CheckpointReasonEnum_HEARTBEAT;
constexpr int CheckpointReason_CheckpointReasonEnum_CheckpointReasonEnum_ARRAYSIZE = CheckpointReason_CheckpointReasonEnum_CheckpointReasonEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CheckpointReason_CheckpointReasonEnum_descriptor();
template<typename T>
inline const std::string& CheckpointReason_CheckpointReasonEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CheckpointReason_CheckpointReasonEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CheckpointReason_CheckpointReasonEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CheckpointReason_CheckpointReasonEnum_descriptor(), enum_t_value);
}
inline bool CheckpointReason_CheckpointReasonEnum_Parse(
    const std::string& name, CheckpointReason_CheckpointReasonEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CheckpointReason_CheckpointReasonEnum>(
    CheckpointReason_CheckpointReasonEnum_descriptor(), name, value);
}
enum DumpType : int {
  PROCESS = 0,
  RUNC = 1,
  KATA = 2,
  ROOTFS = 3,
  DumpType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DumpType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DumpType_IsValid(int value);
constexpr DumpType DumpType_MIN = PROCESS;
constexpr DumpType DumpType_MAX = ROOTFS;
constexpr int DumpType_ARRAYSIZE = DumpType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DumpType_descriptor();
template<typename T>
inline const std::string& DumpType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DumpType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DumpType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DumpType_descriptor(), enum_t_value);
}
inline bool DumpType_Parse(
    const std::string& name, DumpType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DumpType>(
    DumpType_descriptor(), name, value);
}
enum ContainerRuntime : int {
  CRIO = 0,
  CONTAINERD = 1,
  ContainerRuntime_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ContainerRuntime_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ContainerRuntime_IsValid(int value);
constexpr ContainerRuntime ContainerRuntime_MIN = CRIO;
constexpr ContainerRuntime ContainerRuntime_MAX = CONTAINERD;
constexpr int ContainerRuntime_ARRAYSIZE = ContainerRuntime_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContainerRuntime_descriptor();
template<typename T>
inline const std::string& ContainerRuntime_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ContainerRuntime>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ContainerRuntime_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ContainerRuntime_descriptor(), enum_t_value);
}
inline bool ContainerRuntime_Parse(
    const std::string& name, ContainerRuntime* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ContainerRuntime>(
    ContainerRuntime_descriptor(), name, value);
}
enum CRType : int {
  LOCAL = 0,
  REMOTE = 1,
  CRType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CRType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CRType_IsValid(int value);
constexpr CRType CRType_MIN = LOCAL;
constexpr CRType CRType_MAX = REMOTE;
constexpr int CRType_ARRAYSIZE = CRType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CRType_descriptor();
template<typename T>
inline const std::string& CRType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CRType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CRType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CRType_descriptor(), enum_t_value);
}
inline bool CRType_Parse(
    const std::string& name, CRType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CRType>(
    CRType_descriptor(), name, value);
}
enum JobState : int {
  JOB_STARTUP_FAILED = 0,
  JOB_KILLED = 1,
  JOB_IDLE = 2,
  JOB_RUNNING = 3,
  JOB_PENDING = 4,
  JOB_DONE = 5,
  JobState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  JobState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool JobState_IsValid(int value);
constexpr JobState JobState_MIN = JOB_STARTUP_FAILED;
constexpr JobState JobState_MAX = JOB_DONE;
constexpr int JobState_ARRAYSIZE = JobState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JobState_descriptor();
template<typename T>
inline const std::string& JobState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, JobState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function JobState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    JobState_descriptor(), enum_t_value);
}
inline bool JobState_Parse(
    const std::string& name, JobState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<JobState>(
    JobState_descriptor(), name, value);
}
enum CheckpointState : int {
  CHECKPOINTED = 0,
  CHECKPOINT_FAILED = 1,
  RESTORED = 2,
  RESTORE_FAILED = 3,
  CheckpointState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CheckpointState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CheckpointState_IsValid(int value);
constexpr CheckpointState CheckpointState_MIN = CHECKPOINTED;
constexpr CheckpointState CheckpointState_MAX = RESTORE_FAILED;
constexpr int CheckpointState_ARRAYSIZE = CheckpointState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CheckpointState_descriptor();
template<typename T>
inline const std::string& CheckpointState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CheckpointState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CheckpointState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CheckpointState_descriptor(), enum_t_value);
}
inline bool CheckpointState_Parse(
    const std::string& name, CheckpointState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CheckpointState>(
    CheckpointState_descriptor(), name, value);
}
enum QueueJobStatusEnum : int {
  StatusUnvalidated = 0,
  StatusWaiting = 1,
  StatusActive = 2,
  StatusFail = 3,
  StatusSuccess = 4,
  StatusInvalid = 5,
  StatusEnded = 6,
  StatusUnknown = 7,
  QueueJobStatusEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  QueueJobStatusEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool QueueJobStatusEnum_IsValid(int value);
constexpr QueueJobStatusEnum QueueJobStatusEnum_MIN = StatusUnvalidated;
constexpr QueueJobStatusEnum QueueJobStatusEnum_MAX = StatusUnknown;
constexpr int QueueJobStatusEnum_ARRAYSIZE = QueueJobStatusEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QueueJobStatusEnum_descriptor();
template<typename T>
inline const std::string& QueueJobStatusEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, QueueJobStatusEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function QueueJobStatusEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    QueueJobStatusEnum_descriptor(), enum_t_value);
}
inline bool QueueJobStatusEnum_Parse(
    const std::string& name, QueueJobStatusEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<QueueJobStatusEnum>(
    QueueJobStatusEnum_descriptor(), name, value);
}
// ===================================================================

class DumpStats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.DumpStats) */ {
 public:
  inline DumpStats() : DumpStats(nullptr) {};
  virtual ~DumpStats();

  DumpStats(const DumpStats& from);
  DumpStats(DumpStats&& from) noexcept
    : DumpStats() {
    *this = ::std::move(from);
  }

  inline DumpStats& operator=(const DumpStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline DumpStats& operator=(DumpStats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DumpStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DumpStats* internal_default_instance() {
    return reinterpret_cast<const DumpStats*>(
               &_DumpStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DumpStats& a, DumpStats& b) {
    a.Swap(&b);
  }
  inline void Swap(DumpStats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DumpStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DumpStats* New() const final {
    return CreateMaybeMessage<DumpStats>(nullptr);
  }

  DumpStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DumpStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DumpStats& from);
  void MergeFrom(const DumpStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DumpStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.DumpStats";
  }
  protected:
  explicit DumpStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheckpointFileStatsFieldNumber = 8,
    kPrepareDurationFieldNumber = 2,
    kCRIUDurationFieldNumber = 3,
    kDumpTypeFieldNumber = 1,
    kContainerRuntimeFieldNumber = 6,
    kGPUDurationFieldNumber = 4,
    kUploadDurationFieldNumber = 5,
    kKubernetesFieldNumber = 7,
  };
  // .cedana.services.task.CheckpointFileStats CheckpointFileStats = 8[json_name = "CheckpointFileStats"];
  bool has_checkpointfilestats() const;
  private:
  bool _internal_has_checkpointfilestats() const;
  public:
  void clear_checkpointfilestats();
  const ::cedana::services::task::CheckpointFileStats& checkpointfilestats() const;
  ::cedana::services::task::CheckpointFileStats* release_checkpointfilestats();
  ::cedana::services::task::CheckpointFileStats* mutable_checkpointfilestats();
  void set_allocated_checkpointfilestats(::cedana::services::task::CheckpointFileStats* checkpointfilestats);
  private:
  const ::cedana::services::task::CheckpointFileStats& _internal_checkpointfilestats() const;
  ::cedana::services::task::CheckpointFileStats* _internal_mutable_checkpointfilestats();
  public:
  void unsafe_arena_set_allocated_checkpointfilestats(
      ::cedana::services::task::CheckpointFileStats* checkpointfilestats);
  ::cedana::services::task::CheckpointFileStats* unsafe_arena_release_checkpointfilestats();

  // int64 PrepareDuration = 2[json_name = "PrepareDuration"];
  void clear_prepareduration();
  ::PROTOBUF_NAMESPACE_ID::int64 prepareduration() const;
  void set_prepareduration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_prepareduration() const;
  void _internal_set_prepareduration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 CRIUDuration = 3[json_name = "CRIUDuration"];
  void clear_criuduration();
  ::PROTOBUF_NAMESPACE_ID::int64 criuduration() const;
  void set_criuduration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_criuduration() const;
  void _internal_set_criuduration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .cedana.services.task.DumpType DumpType = 1[json_name = "DumpType"];
  void clear_dumptype();
  ::cedana::services::task::DumpType dumptype() const;
  void set_dumptype(::cedana::services::task::DumpType value);
  private:
  ::cedana::services::task::DumpType _internal_dumptype() const;
  void _internal_set_dumptype(::cedana::services::task::DumpType value);
  public:

  // .cedana.services.task.ContainerRuntime ContainerRuntime = 6[json_name = "ContainerRuntime"];
  void clear_containerruntime();
  ::cedana::services::task::ContainerRuntime containerruntime() const;
  void set_containerruntime(::cedana::services::task::ContainerRuntime value);
  private:
  ::cedana::services::task::ContainerRuntime _internal_containerruntime() const;
  void _internal_set_containerruntime(::cedana::services::task::ContainerRuntime value);
  public:

  // int64 GPUDuration = 4[json_name = "GPUDuration"];
  void clear_gpuduration();
  ::PROTOBUF_NAMESPACE_ID::int64 gpuduration() const;
  void set_gpuduration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gpuduration() const;
  void _internal_set_gpuduration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 UploadDuration = 5[json_name = "UploadDuration"];
  void clear_uploadduration();
  ::PROTOBUF_NAMESPACE_ID::int64 uploadduration() const;
  void set_uploadduration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uploadduration() const;
  void _internal_set_uploadduration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool Kubernetes = 7[json_name = "Kubernetes"];
  void clear_kubernetes();
  bool kubernetes() const;
  void set_kubernetes(bool value);
  private:
  bool _internal_kubernetes() const;
  void _internal_set_kubernetes(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.DumpStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::cedana::services::task::CheckpointFileStats* checkpointfilestats_;
  ::PROTOBUF_NAMESPACE_ID::int64 prepareduration_;
  ::PROTOBUF_NAMESPACE_ID::int64 criuduration_;
  int dumptype_;
  int containerruntime_;
  ::PROTOBUF_NAMESPACE_ID::int64 gpuduration_;
  ::PROTOBUF_NAMESPACE_ID::int64 uploadduration_;
  bool kubernetes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class CheckpointFileStats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.CheckpointFileStats) */ {
 public:
  inline CheckpointFileStats() : CheckpointFileStats(nullptr) {};
  virtual ~CheckpointFileStats();

  CheckpointFileStats(const CheckpointFileStats& from);
  CheckpointFileStats(CheckpointFileStats&& from) noexcept
    : CheckpointFileStats() {
    *this = ::std::move(from);
  }

  inline CheckpointFileStats& operator=(const CheckpointFileStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckpointFileStats& operator=(CheckpointFileStats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckpointFileStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckpointFileStats* internal_default_instance() {
    return reinterpret_cast<const CheckpointFileStats*>(
               &_CheckpointFileStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CheckpointFileStats& a, CheckpointFileStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckpointFileStats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckpointFileStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckpointFileStats* New() const final {
    return CreateMaybeMessage<CheckpointFileStats>(nullptr);
  }

  CheckpointFileStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckpointFileStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckpointFileStats& from);
  void MergeFrom(const CheckpointFileStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckpointFileStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.CheckpointFileStats";
  }
  protected:
  explicit CheckpointFileStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
    kDurationFieldNumber = 2,
  };
  // int64 Size = 1[json_name = "Size"];
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 Duration = 2[json_name = "Duration"];
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::int64 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.CheckpointFileStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  ::PROTOBUF_NAMESPACE_ID::int64 duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class RestoreStats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.RestoreStats) */ {
 public:
  inline RestoreStats() : RestoreStats(nullptr) {};
  virtual ~RestoreStats();

  RestoreStats(const RestoreStats& from);
  RestoreStats(RestoreStats&& from) noexcept
    : RestoreStats() {
    *this = ::std::move(from);
  }

  inline RestoreStats& operator=(const RestoreStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestoreStats& operator=(RestoreStats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestoreStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RestoreStats* internal_default_instance() {
    return reinterpret_cast<const RestoreStats*>(
               &_RestoreStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RestoreStats& a, RestoreStats& b) {
    a.Swap(&b);
  }
  inline void Swap(RestoreStats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestoreStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestoreStats* New() const final {
    return CreateMaybeMessage<RestoreStats>(nullptr);
  }

  RestoreStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestoreStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestoreStats& from);
  void MergeFrom(const RestoreStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestoreStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.RestoreStats";
  }
  protected:
  explicit RestoreStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheckpointFileStatsFieldNumber = 7,
    kGPURestoreStatsFieldNumber = 8,
    kDumpTypeFieldNumber = 1,
    kContainerRuntimeFieldNumber = 2,
    kPrepareDurationFieldNumber = 3,
    kCRIUDurationFieldNumber = 4,
    kGPUDurationFieldNumber = 5,
    kDownloadDurationFieldNumber = 6,
  };
  // .cedana.services.task.CheckpointFileStats CheckpointFileStats = 7[json_name = "CheckpointFileStats"];
  bool has_checkpointfilestats() const;
  private:
  bool _internal_has_checkpointfilestats() const;
  public:
  void clear_checkpointfilestats();
  const ::cedana::services::task::CheckpointFileStats& checkpointfilestats() const;
  ::cedana::services::task::CheckpointFileStats* release_checkpointfilestats();
  ::cedana::services::task::CheckpointFileStats* mutable_checkpointfilestats();
  void set_allocated_checkpointfilestats(::cedana::services::task::CheckpointFileStats* checkpointfilestats);
  private:
  const ::cedana::services::task::CheckpointFileStats& _internal_checkpointfilestats() const;
  ::cedana::services::task::CheckpointFileStats* _internal_mutable_checkpointfilestats();
  public:
  void unsafe_arena_set_allocated_checkpointfilestats(
      ::cedana::services::task::CheckpointFileStats* checkpointfilestats);
  ::cedana::services::task::CheckpointFileStats* unsafe_arena_release_checkpointfilestats();

  // .cedanagpu.GPURestoreStats GPURestoreStats = 8[json_name = "GPURestoreStats"];
  bool has_gpurestorestats() const;
  private:
  bool _internal_has_gpurestorestats() const;
  public:
  void clear_gpurestorestats();
  const ::cedanagpu::GPURestoreStats& gpurestorestats() const;
  ::cedanagpu::GPURestoreStats* release_gpurestorestats();
  ::cedanagpu::GPURestoreStats* mutable_gpurestorestats();
  void set_allocated_gpurestorestats(::cedanagpu::GPURestoreStats* gpurestorestats);
  private:
  const ::cedanagpu::GPURestoreStats& _internal_gpurestorestats() const;
  ::cedanagpu::GPURestoreStats* _internal_mutable_gpurestorestats();
  public:
  void unsafe_arena_set_allocated_gpurestorestats(
      ::cedanagpu::GPURestoreStats* gpurestorestats);
  ::cedanagpu::GPURestoreStats* unsafe_arena_release_gpurestorestats();

  // .cedana.services.task.DumpType DumpType = 1[json_name = "DumpType"];
  void clear_dumptype();
  ::cedana::services::task::DumpType dumptype() const;
  void set_dumptype(::cedana::services::task::DumpType value);
  private:
  ::cedana::services::task::DumpType _internal_dumptype() const;
  void _internal_set_dumptype(::cedana::services::task::DumpType value);
  public:

  // .cedana.services.task.ContainerRuntime ContainerRuntime = 2[json_name = "ContainerRuntime"];
  void clear_containerruntime();
  ::cedana::services::task::ContainerRuntime containerruntime() const;
  void set_containerruntime(::cedana::services::task::ContainerRuntime value);
  private:
  ::cedana::services::task::ContainerRuntime _internal_containerruntime() const;
  void _internal_set_containerruntime(::cedana::services::task::ContainerRuntime value);
  public:

  // int64 PrepareDuration = 3[json_name = "PrepareDuration"];
  void clear_prepareduration();
  ::PROTOBUF_NAMESPACE_ID::int64 prepareduration() const;
  void set_prepareduration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_prepareduration() const;
  void _internal_set_prepareduration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 CRIUDuration = 4[json_name = "CRIUDuration"];
  void clear_criuduration();
  ::PROTOBUF_NAMESPACE_ID::int64 criuduration() const;
  void set_criuduration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_criuduration() const;
  void _internal_set_criuduration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 GPUDuration = 5[json_name = "GPUDuration"];
  void clear_gpuduration();
  ::PROTOBUF_NAMESPACE_ID::int64 gpuduration() const;
  void set_gpuduration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gpuduration() const;
  void _internal_set_gpuduration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 DownloadDuration = 6[json_name = "DownloadDuration"];
  void clear_downloadduration();
  ::PROTOBUF_NAMESPACE_ID::int64 downloadduration() const;
  void set_downloadduration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_downloadduration() const;
  void _internal_set_downloadduration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.RestoreStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::cedana::services::task::CheckpointFileStats* checkpointfilestats_;
  ::cedanagpu::GPURestoreStats* gpurestorestats_;
  int dumptype_;
  int containerruntime_;
  ::PROTOBUF_NAMESPACE_ID::int64 prepareduration_;
  ::PROTOBUF_NAMESPACE_ID::int64 criuduration_;
  ::PROTOBUF_NAMESPACE_ID::int64 gpuduration_;
  ::PROTOBUF_NAMESPACE_ID::int64 downloadduration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class CRIOImagePushArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.CRIOImagePushArgs) */ {
 public:
  inline CRIOImagePushArgs() : CRIOImagePushArgs(nullptr) {};
  virtual ~CRIOImagePushArgs();

  CRIOImagePushArgs(const CRIOImagePushArgs& from);
  CRIOImagePushArgs(CRIOImagePushArgs&& from) noexcept
    : CRIOImagePushArgs() {
    *this = ::std::move(from);
  }

  inline CRIOImagePushArgs& operator=(const CRIOImagePushArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRIOImagePushArgs& operator=(CRIOImagePushArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CRIOImagePushArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CRIOImagePushArgs* internal_default_instance() {
    return reinterpret_cast<const CRIOImagePushArgs*>(
               &_CRIOImagePushArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CRIOImagePushArgs& a, CRIOImagePushArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(CRIOImagePushArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRIOImagePushArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CRIOImagePushArgs* New() const final {
    return CreateMaybeMessage<CRIOImagePushArgs>(nullptr);
  }

  CRIOImagePushArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CRIOImagePushArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CRIOImagePushArgs& from);
  void MergeFrom(const CRIOImagePushArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRIOImagePushArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.CRIOImagePushArgs";
  }
  protected:
  explicit CRIOImagePushArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginalImageRefFieldNumber = 1,
    kNewImageRefFieldNumber = 2,
    kRootfsDiffPathFieldNumber = 3,
    kContainerStorageFieldNumber = 4,
    kRegistryAuthTokenPushFieldNumber = 5,
    kRegistryAuthTokenPullFieldNumber = 6,
  };
  // string OriginalImageRef = 1[json_name = "OriginalImageRef"];
  void clear_originalimageref();
  const std::string& originalimageref() const;
  void set_originalimageref(const std::string& value);
  void set_originalimageref(std::string&& value);
  void set_originalimageref(const char* value);
  void set_originalimageref(const char* value, size_t size);
  std::string* mutable_originalimageref();
  std::string* release_originalimageref();
  void set_allocated_originalimageref(std::string* originalimageref);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_originalimageref();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_originalimageref(
      std::string* originalimageref);
  private:
  const std::string& _internal_originalimageref() const;
  void _internal_set_originalimageref(const std::string& value);
  std::string* _internal_mutable_originalimageref();
  public:

  // string NewImageRef = 2[json_name = "NewImageRef"];
  void clear_newimageref();
  const std::string& newimageref() const;
  void set_newimageref(const std::string& value);
  void set_newimageref(std::string&& value);
  void set_newimageref(const char* value);
  void set_newimageref(const char* value, size_t size);
  std::string* mutable_newimageref();
  std::string* release_newimageref();
  void set_allocated_newimageref(std::string* newimageref);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_newimageref();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_newimageref(
      std::string* newimageref);
  private:
  const std::string& _internal_newimageref() const;
  void _internal_set_newimageref(const std::string& value);
  std::string* _internal_mutable_newimageref();
  public:

  // string RootfsDiffPath = 3[json_name = "RootfsDiffPath"];
  void clear_rootfsdiffpath();
  const std::string& rootfsdiffpath() const;
  void set_rootfsdiffpath(const std::string& value);
  void set_rootfsdiffpath(std::string&& value);
  void set_rootfsdiffpath(const char* value);
  void set_rootfsdiffpath(const char* value, size_t size);
  std::string* mutable_rootfsdiffpath();
  std::string* release_rootfsdiffpath();
  void set_allocated_rootfsdiffpath(std::string* rootfsdiffpath);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rootfsdiffpath();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rootfsdiffpath(
      std::string* rootfsdiffpath);
  private:
  const std::string& _internal_rootfsdiffpath() const;
  void _internal_set_rootfsdiffpath(const std::string& value);
  std::string* _internal_mutable_rootfsdiffpath();
  public:

  // string ContainerStorage = 4[json_name = "ContainerStorage"];
  void clear_containerstorage();
  const std::string& containerstorage() const;
  void set_containerstorage(const std::string& value);
  void set_containerstorage(std::string&& value);
  void set_containerstorage(const char* value);
  void set_containerstorage(const char* value, size_t size);
  std::string* mutable_containerstorage();
  std::string* release_containerstorage();
  void set_allocated_containerstorage(std::string* containerstorage);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_containerstorage();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_containerstorage(
      std::string* containerstorage);
  private:
  const std::string& _internal_containerstorage() const;
  void _internal_set_containerstorage(const std::string& value);
  std::string* _internal_mutable_containerstorage();
  public:

  // string RegistryAuthTokenPush = 5[json_name = "RegistryAuthTokenPush"];
  void clear_registryauthtokenpush();
  const std::string& registryauthtokenpush() const;
  void set_registryauthtokenpush(const std::string& value);
  void set_registryauthtokenpush(std::string&& value);
  void set_registryauthtokenpush(const char* value);
  void set_registryauthtokenpush(const char* value, size_t size);
  std::string* mutable_registryauthtokenpush();
  std::string* release_registryauthtokenpush();
  void set_allocated_registryauthtokenpush(std::string* registryauthtokenpush);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_registryauthtokenpush();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_registryauthtokenpush(
      std::string* registryauthtokenpush);
  private:
  const std::string& _internal_registryauthtokenpush() const;
  void _internal_set_registryauthtokenpush(const std::string& value);
  std::string* _internal_mutable_registryauthtokenpush();
  public:

  // string RegistryAuthTokenPull = 6[json_name = "RegistryAuthTokenPull"];
  void clear_registryauthtokenpull();
  const std::string& registryauthtokenpull() const;
  void set_registryauthtokenpull(const std::string& value);
  void set_registryauthtokenpull(std::string&& value);
  void set_registryauthtokenpull(const char* value);
  void set_registryauthtokenpull(const char* value, size_t size);
  std::string* mutable_registryauthtokenpull();
  std::string* release_registryauthtokenpull();
  void set_allocated_registryauthtokenpull(std::string* registryauthtokenpull);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_registryauthtokenpull();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_registryauthtokenpull(
      std::string* registryauthtokenpull);
  private:
  const std::string& _internal_registryauthtokenpull() const;
  void _internal_set_registryauthtokenpull(const std::string& value);
  std::string* _internal_mutable_registryauthtokenpull();
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.CRIOImagePushArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr originalimageref_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newimageref_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rootfsdiffpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr containerstorage_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr registryauthtokenpush_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr registryauthtokenpull_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class CRIOImagePushResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.CRIOImagePushResp) */ {
 public:
  inline CRIOImagePushResp() : CRIOImagePushResp(nullptr) {};
  virtual ~CRIOImagePushResp();

  CRIOImagePushResp(const CRIOImagePushResp& from);
  CRIOImagePushResp(CRIOImagePushResp&& from) noexcept
    : CRIOImagePushResp() {
    *this = ::std::move(from);
  }

  inline CRIOImagePushResp& operator=(const CRIOImagePushResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRIOImagePushResp& operator=(CRIOImagePushResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CRIOImagePushResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CRIOImagePushResp* internal_default_instance() {
    return reinterpret_cast<const CRIOImagePushResp*>(
               &_CRIOImagePushResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CRIOImagePushResp& a, CRIOImagePushResp& b) {
    a.Swap(&b);
  }
  inline void Swap(CRIOImagePushResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRIOImagePushResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CRIOImagePushResp* New() const final {
    return CreateMaybeMessage<CRIOImagePushResp>(nullptr);
  }

  CRIOImagePushResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CRIOImagePushResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CRIOImagePushResp& from);
  void MergeFrom(const CRIOImagePushResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRIOImagePushResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.CRIOImagePushResp";
  }
  protected:
  explicit CRIOImagePushResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string Message = 1[json_name = "Message"];
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.CRIOImagePushResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class CRIORootfsDumpArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.CRIORootfsDumpArgs) */ {
 public:
  inline CRIORootfsDumpArgs() : CRIORootfsDumpArgs(nullptr) {};
  virtual ~CRIORootfsDumpArgs();

  CRIORootfsDumpArgs(const CRIORootfsDumpArgs& from);
  CRIORootfsDumpArgs(CRIORootfsDumpArgs&& from) noexcept
    : CRIORootfsDumpArgs() {
    *this = ::std::move(from);
  }

  inline CRIORootfsDumpArgs& operator=(const CRIORootfsDumpArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRIORootfsDumpArgs& operator=(CRIORootfsDumpArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CRIORootfsDumpArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CRIORootfsDumpArgs* internal_default_instance() {
    return reinterpret_cast<const CRIORootfsDumpArgs*>(
               &_CRIORootfsDumpArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CRIORootfsDumpArgs& a, CRIORootfsDumpArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(CRIORootfsDumpArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRIORootfsDumpArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CRIORootfsDumpArgs* New() const final {
    return CreateMaybeMessage<CRIORootfsDumpArgs>(nullptr);
  }

  CRIORootfsDumpArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CRIORootfsDumpArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CRIORootfsDumpArgs& from);
  void MergeFrom(const CRIORootfsDumpArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRIORootfsDumpArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.CRIORootfsDumpArgs";
  }
  protected:
  explicit CRIORootfsDumpArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIDFieldNumber = 1,
    kDestFieldNumber = 2,
    kContainerStorageFieldNumber = 3,
  };
  // string ContainerID = 1[json_name = "ContainerID"];
  void clear_containerid();
  const std::string& containerid() const;
  void set_containerid(const std::string& value);
  void set_containerid(std::string&& value);
  void set_containerid(const char* value);
  void set_containerid(const char* value, size_t size);
  std::string* mutable_containerid();
  std::string* release_containerid();
  void set_allocated_containerid(std::string* containerid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_containerid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_containerid(
      std::string* containerid);
  private:
  const std::string& _internal_containerid() const;
  void _internal_set_containerid(const std::string& value);
  std::string* _internal_mutable_containerid();
  public:

  // string Dest = 2[json_name = "Dest"];
  void clear_dest();
  const std::string& dest() const;
  void set_dest(const std::string& value);
  void set_dest(std::string&& value);
  void set_dest(const char* value);
  void set_dest(const char* value, size_t size);
  std::string* mutable_dest();
  std::string* release_dest();
  void set_allocated_dest(std::string* dest);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dest();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dest(
      std::string* dest);
  private:
  const std::string& _internal_dest() const;
  void _internal_set_dest(const std::string& value);
  std::string* _internal_mutable_dest();
  public:

  // string ContainerStorage = 3[json_name = "ContainerStorage"];
  void clear_containerstorage();
  const std::string& containerstorage() const;
  void set_containerstorage(const std::string& value);
  void set_containerstorage(std::string&& value);
  void set_containerstorage(const char* value);
  void set_containerstorage(const char* value, size_t size);
  std::string* mutable_containerstorage();
  std::string* release_containerstorage();
  void set_allocated_containerstorage(std::string* containerstorage);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_containerstorage();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_containerstorage(
      std::string* containerstorage);
  private:
  const std::string& _internal_containerstorage() const;
  void _internal_set_containerstorage(const std::string& value);
  std::string* _internal_mutable_containerstorage();
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.CRIORootfsDumpArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr containerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dest_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr containerstorage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class CRIORootfsDumpResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.CRIORootfsDumpResp) */ {
 public:
  inline CRIORootfsDumpResp() : CRIORootfsDumpResp(nullptr) {};
  virtual ~CRIORootfsDumpResp();

  CRIORootfsDumpResp(const CRIORootfsDumpResp& from);
  CRIORootfsDumpResp(CRIORootfsDumpResp&& from) noexcept
    : CRIORootfsDumpResp() {
    *this = ::std::move(from);
  }

  inline CRIORootfsDumpResp& operator=(const CRIORootfsDumpResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRIORootfsDumpResp& operator=(CRIORootfsDumpResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CRIORootfsDumpResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CRIORootfsDumpResp* internal_default_instance() {
    return reinterpret_cast<const CRIORootfsDumpResp*>(
               &_CRIORootfsDumpResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CRIORootfsDumpResp& a, CRIORootfsDumpResp& b) {
    a.Swap(&b);
  }
  inline void Swap(CRIORootfsDumpResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRIORootfsDumpResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CRIORootfsDumpResp* New() const final {
    return CreateMaybeMessage<CRIORootfsDumpResp>(nullptr);
  }

  CRIORootfsDumpResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CRIORootfsDumpResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CRIORootfsDumpResp& from);
  void MergeFrom(const CRIORootfsDumpResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRIORootfsDumpResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.CRIORootfsDumpResp";
  }
  protected:
  explicit CRIORootfsDumpResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestFieldNumber = 1,
  };
  // string Dest = 1[json_name = "Dest"];
  void clear_dest();
  const std::string& dest() const;
  void set_dest(const std::string& value);
  void set_dest(std::string&& value);
  void set_dest(const char* value);
  void set_dest(const char* value, size_t size);
  std::string* mutable_dest();
  std::string* release_dest();
  void set_allocated_dest(std::string* dest);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dest();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dest(
      std::string* dest);
  private:
  const std::string& _internal_dest() const;
  void _internal_set_dest(const std::string& value);
  std::string* _internal_mutable_dest();
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.CRIORootfsDumpResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dest_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class StartArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.StartArgs) */ {
 public:
  inline StartArgs() : StartArgs(nullptr) {};
  virtual ~StartArgs();

  StartArgs(const StartArgs& from);
  StartArgs(StartArgs&& from) noexcept
    : StartArgs() {
    *this = ::std::move(from);
  }

  inline StartArgs& operator=(const StartArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartArgs& operator=(StartArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartArgs* internal_default_instance() {
    return reinterpret_cast<const StartArgs*>(
               &_StartArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StartArgs& a, StartArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(StartArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartArgs* New() const final {
    return CreateMaybeMessage<StartArgs>(nullptr);
  }

  StartArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartArgs& from);
  void MergeFrom(const StartArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.StartArgs";
  }
  protected:
  explicit StartArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnvFieldNumber = 4,
    kGroupsFieldNumber = 9,
    kTaskFieldNumber = 1,
    kJIDFieldNumber = 2,
    kWorkingDirFieldNumber = 3,
    kLogOutputFileFieldNumber = 5,
    kUIDFieldNumber = 6,
    kGIDFieldNumber = 7,
    kGPUFieldNumber = 8,
  };
  // repeated string Env = 4[json_name = "Env"];
  int env_size() const;
  private:
  int _internal_env_size() const;
  public:
  void clear_env();
  const std::string& env(int index) const;
  std::string* mutable_env(int index);
  void set_env(int index, const std::string& value);
  void set_env(int index, std::string&& value);
  void set_env(int index, const char* value);
  void set_env(int index, const char* value, size_t size);
  std::string* add_env();
  void add_env(const std::string& value);
  void add_env(std::string&& value);
  void add_env(const char* value);
  void add_env(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& env() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_env();
  private:
  const std::string& _internal_env(int index) const;
  std::string* _internal_add_env();
  public:

  // repeated int32 Groups = 9[json_name = "Groups"];
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_groups(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_groups() const;
  void _internal_add_groups(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_groups();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 groups(int index) const;
  void set_groups(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_groups(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      groups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_groups();

  // string Task = 1[json_name = "Task"];
  void clear_task();
  const std::string& task() const;
  void set_task(const std::string& value);
  void set_task(std::string&& value);
  void set_task(const char* value);
  void set_task(const char* value, size_t size);
  std::string* mutable_task();
  std::string* release_task();
  void set_allocated_task(std::string* task);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_task();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_task(
      std::string* task);
  private:
  const std::string& _internal_task() const;
  void _internal_set_task(const std::string& value);
  std::string* _internal_mutable_task();
  public:

  // string JID = 2[json_name = "JID"];
  void clear_jid();
  const std::string& jid() const;
  void set_jid(const std::string& value);
  void set_jid(std::string&& value);
  void set_jid(const char* value);
  void set_jid(const char* value, size_t size);
  std::string* mutable_jid();
  std::string* release_jid();
  void set_allocated_jid(std::string* jid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_jid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_jid(
      std::string* jid);
  private:
  const std::string& _internal_jid() const;
  void _internal_set_jid(const std::string& value);
  std::string* _internal_mutable_jid();
  public:

  // string WorkingDir = 3[json_name = "WorkingDir"];
  void clear_workingdir();
  const std::string& workingdir() const;
  void set_workingdir(const std::string& value);
  void set_workingdir(std::string&& value);
  void set_workingdir(const char* value);
  void set_workingdir(const char* value, size_t size);
  std::string* mutable_workingdir();
  std::string* release_workingdir();
  void set_allocated_workingdir(std::string* workingdir);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_workingdir();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_workingdir(
      std::string* workingdir);
  private:
  const std::string& _internal_workingdir() const;
  void _internal_set_workingdir(const std::string& value);
  std::string* _internal_mutable_workingdir();
  public:

  // string LogOutputFile = 5[json_name = "LogOutputFile"];
  void clear_logoutputfile();
  const std::string& logoutputfile() const;
  void set_logoutputfile(const std::string& value);
  void set_logoutputfile(std::string&& value);
  void set_logoutputfile(const char* value);
  void set_logoutputfile(const char* value, size_t size);
  std::string* mutable_logoutputfile();
  std::string* release_logoutputfile();
  void set_allocated_logoutputfile(std::string* logoutputfile);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_logoutputfile();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_logoutputfile(
      std::string* logoutputfile);
  private:
  const std::string& _internal_logoutputfile() const;
  void _internal_set_logoutputfile(const std::string& value);
  std::string* _internal_mutable_logoutputfile();
  public:

  // int32 UID = 6[json_name = "UID"];
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 GID = 7[json_name = "GID"];
  void clear_gid();
  ::PROTOBUF_NAMESPACE_ID::int32 gid() const;
  void set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gid() const;
  void _internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool GPU = 8[json_name = "GPU"];
  void clear_gpu();
  bool gpu() const;
  void set_gpu(bool value);
  private:
  bool _internal_gpu() const;
  void _internal_set_gpu(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.StartArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> env_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > groups_;
  mutable std::atomic<int> _groups_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workingdir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logoutputfile_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 gid_;
  bool gpu_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class StartResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.StartResp) */ {
 public:
  inline StartResp() : StartResp(nullptr) {};
  virtual ~StartResp();

  StartResp(const StartResp& from);
  StartResp(StartResp&& from) noexcept
    : StartResp() {
    *this = ::std::move(from);
  }

  inline StartResp& operator=(const StartResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartResp& operator=(StartResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartResp* internal_default_instance() {
    return reinterpret_cast<const StartResp*>(
               &_StartResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StartResp& a, StartResp& b) {
    a.Swap(&b);
  }
  inline void Swap(StartResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartResp* New() const final {
    return CreateMaybeMessage<StartResp>(nullptr);
  }

  StartResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartResp& from);
  void MergeFrom(const StartResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.StartResp";
  }
  protected:
  explicit StartResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kJIDFieldNumber = 3,
    kPIDFieldNumber = 2,
  };
  // string Message = 1[json_name = "Message"];
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string JID = 3[json_name = "JID"];
  void clear_jid();
  const std::string& jid() const;
  void set_jid(const std::string& value);
  void set_jid(std::string&& value);
  void set_jid(const char* value);
  void set_jid(const char* value, size_t size);
  std::string* mutable_jid();
  std::string* release_jid();
  void set_allocated_jid(std::string* jid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_jid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_jid(
      std::string* jid);
  private:
  const std::string& _internal_jid() const;
  void _internal_set_jid(const std::string& value);
  std::string* _internal_mutable_jid();
  public:

  // int32 PID = 2[json_name = "PID"];
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.StartResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jid_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class DumpArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.DumpArgs) */ {
 public:
  inline DumpArgs() : DumpArgs(nullptr) {};
  virtual ~DumpArgs();

  DumpArgs(const DumpArgs& from);
  DumpArgs(DumpArgs&& from) noexcept
    : DumpArgs() {
    *this = ::std::move(from);
  }

  inline DumpArgs& operator=(const DumpArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline DumpArgs& operator=(DumpArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DumpArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DumpArgs* internal_default_instance() {
    return reinterpret_cast<const DumpArgs*>(
               &_DumpArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DumpArgs& a, DumpArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(DumpArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DumpArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DumpArgs* New() const final {
    return CreateMaybeMessage<DumpArgs>(nullptr);
  }

  DumpArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DumpArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DumpArgs& from);
  void MergeFrom(const DumpArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DumpArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.DumpArgs";
  }
  protected:
  explicit DumpArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirFieldNumber = 2,
    kJIDFieldNumber = 4,
    kCriuOptsFieldNumber = 7,
    kPIDFieldNumber = 1,
    kTypeFieldNumber = 3,
    kGPUFieldNumber = 5,
    kStreamFieldNumber = 6,
  };
  // string Dir = 2[json_name = "Dir"];
  void clear_dir();
  const std::string& dir() const;
  void set_dir(const std::string& value);
  void set_dir(std::string&& value);
  void set_dir(const char* value);
  void set_dir(const char* value, size_t size);
  std::string* mutable_dir();
  std::string* release_dir();
  void set_allocated_dir(std::string* dir);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dir();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dir(
      std::string* dir);
  private:
  const std::string& _internal_dir() const;
  void _internal_set_dir(const std::string& value);
  std::string* _internal_mutable_dir();
  public:

  // string JID = 4[json_name = "JID"];
  void clear_jid();
  const std::string& jid() const;
  void set_jid(const std::string& value);
  void set_jid(std::string&& value);
  void set_jid(const char* value);
  void set_jid(const char* value, size_t size);
  std::string* mutable_jid();
  std::string* release_jid();
  void set_allocated_jid(std::string* jid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_jid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_jid(
      std::string* jid);
  private:
  const std::string& _internal_jid() const;
  void _internal_set_jid(const std::string& value);
  std::string* _internal_mutable_jid();
  public:

  // .cedana.services.task.CriuOpts CriuOpts = 7[json_name = "CriuOpts"];
  bool has_criuopts() const;
  private:
  bool _internal_has_criuopts() const;
  public:
  void clear_criuopts();
  const ::cedana::services::task::CriuOpts& criuopts() const;
  ::cedana::services::task::CriuOpts* release_criuopts();
  ::cedana::services::task::CriuOpts* mutable_criuopts();
  void set_allocated_criuopts(::cedana::services::task::CriuOpts* criuopts);
  private:
  const ::cedana::services::task::CriuOpts& _internal_criuopts() const;
  ::cedana::services::task::CriuOpts* _internal_mutable_criuopts();
  public:
  void unsafe_arena_set_allocated_criuopts(
      ::cedana::services::task::CriuOpts* criuopts);
  ::cedana::services::task::CriuOpts* unsafe_arena_release_criuopts();

  // int32 PID = 1[json_name = "PID"];
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .cedana.services.task.CRType Type = 3[json_name = "Type"];
  void clear_type();
  ::cedana::services::task::CRType type() const;
  void set_type(::cedana::services::task::CRType value);
  private:
  ::cedana::services::task::CRType _internal_type() const;
  void _internal_set_type(::cedana::services::task::CRType value);
  public:

  // bool GPU = 5[json_name = "GPU"];
  void clear_gpu();
  bool gpu() const;
  void set_gpu(bool value);
  private:
  bool _internal_gpu() const;
  void _internal_set_gpu(bool value);
  public:

  // bool Stream = 6[json_name = "Stream"];
  void clear_stream();
  bool stream() const;
  void set_stream(bool value);
  private:
  bool _internal_stream() const;
  void _internal_set_stream(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.DumpArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jid_;
  ::cedana::services::task::CriuOpts* criuopts_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  int type_;
  bool gpu_;
  bool stream_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class DumpResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.DumpResp) */ {
 public:
  inline DumpResp() : DumpResp(nullptr) {};
  virtual ~DumpResp();

  DumpResp(const DumpResp& from);
  DumpResp(DumpResp&& from) noexcept
    : DumpResp() {
    *this = ::std::move(from);
  }

  inline DumpResp& operator=(const DumpResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DumpResp& operator=(DumpResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DumpResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DumpResp* internal_default_instance() {
    return reinterpret_cast<const DumpResp*>(
               &_DumpResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DumpResp& a, DumpResp& b) {
    a.Swap(&b);
  }
  inline void Swap(DumpResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DumpResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DumpResp* New() const final {
    return CreateMaybeMessage<DumpResp>(nullptr);
  }

  DumpResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DumpResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DumpResp& from);
  void MergeFrom(const DumpResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DumpResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.DumpResp";
  }
  protected:
  explicit DumpResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kCheckpointIDFieldNumber = 2,
    kUploadIDFieldNumber = 3,
    kStateFieldNumber = 4,
    kDumpStatsFieldNumber = 5,
  };
  // string Message = 1[json_name = "Message"];
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string CheckpointID = 2[json_name = "CheckpointID"];
  void clear_checkpointid();
  const std::string& checkpointid() const;
  void set_checkpointid(const std::string& value);
  void set_checkpointid(std::string&& value);
  void set_checkpointid(const char* value);
  void set_checkpointid(const char* value, size_t size);
  std::string* mutable_checkpointid();
  std::string* release_checkpointid();
  void set_allocated_checkpointid(std::string* checkpointid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_checkpointid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_checkpointid(
      std::string* checkpointid);
  private:
  const std::string& _internal_checkpointid() const;
  void _internal_set_checkpointid(const std::string& value);
  std::string* _internal_mutable_checkpointid();
  public:

  // string UploadID = 3[json_name = "UploadID"];
  void clear_uploadid();
  const std::string& uploadid() const;
  void set_uploadid(const std::string& value);
  void set_uploadid(std::string&& value);
  void set_uploadid(const char* value);
  void set_uploadid(const char* value, size_t size);
  std::string* mutable_uploadid();
  std::string* release_uploadid();
  void set_allocated_uploadid(std::string* uploadid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uploadid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uploadid(
      std::string* uploadid);
  private:
  const std::string& _internal_uploadid() const;
  void _internal_set_uploadid(const std::string& value);
  std::string* _internal_mutable_uploadid();
  public:

  // .cedana.services.task.ProcessState State = 4[json_name = "State"];
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::cedana::services::task::ProcessState& state() const;
  ::cedana::services::task::ProcessState* release_state();
  ::cedana::services::task::ProcessState* mutable_state();
  void set_allocated_state(::cedana::services::task::ProcessState* state);
  private:
  const ::cedana::services::task::ProcessState& _internal_state() const;
  ::cedana::services::task::ProcessState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::cedana::services::task::ProcessState* state);
  ::cedana::services::task::ProcessState* unsafe_arena_release_state();

  // .cedana.services.task.DumpStats DumpStats = 5[json_name = "DumpStats"];
  bool has_dumpstats() const;
  private:
  bool _internal_has_dumpstats() const;
  public:
  void clear_dumpstats();
  const ::cedana::services::task::DumpStats& dumpstats() const;
  ::cedana::services::task::DumpStats* release_dumpstats();
  ::cedana::services::task::DumpStats* mutable_dumpstats();
  void set_allocated_dumpstats(::cedana::services::task::DumpStats* dumpstats);
  private:
  const ::cedana::services::task::DumpStats& _internal_dumpstats() const;
  ::cedana::services::task::DumpStats* _internal_mutable_dumpstats();
  public:
  void unsafe_arena_set_allocated_dumpstats(
      ::cedana::services::task::DumpStats* dumpstats);
  ::cedana::services::task::DumpStats* unsafe_arena_release_dumpstats();

  // @@protoc_insertion_point(class_scope:cedana.services.task.DumpResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checkpointid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uploadid_;
  ::cedana::services::task::ProcessState* state_;
  ::cedana::services::task::DumpStats* dumpstats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class RestoreArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.RestoreArgs) */ {
 public:
  inline RestoreArgs() : RestoreArgs(nullptr) {};
  virtual ~RestoreArgs();

  RestoreArgs(const RestoreArgs& from);
  RestoreArgs(RestoreArgs&& from) noexcept
    : RestoreArgs() {
    *this = ::std::move(from);
  }

  inline RestoreArgs& operator=(const RestoreArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestoreArgs& operator=(RestoreArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestoreArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RestoreArgs* internal_default_instance() {
    return reinterpret_cast<const RestoreArgs*>(
               &_RestoreArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RestoreArgs& a, RestoreArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(RestoreArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestoreArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestoreArgs* New() const final {
    return CreateMaybeMessage<RestoreArgs>(nullptr);
  }

  RestoreArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestoreArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestoreArgs& from);
  void MergeFrom(const RestoreArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestoreArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.RestoreArgs";
  }
  protected:
  explicit RestoreArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 7,
    kCheckpointIDFieldNumber = 2,
    kCheckpointPathFieldNumber = 3,
    kJIDFieldNumber = 4,
    kCriuOptsFieldNumber = 9,
    kTypeFieldNumber = 1,
    kUIDFieldNumber = 5,
    kGIDFieldNumber = 6,
    kStreamFieldNumber = 8,
  };
  // repeated int32 Groups = 7[json_name = "Groups"];
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_groups(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_groups() const;
  void _internal_add_groups(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_groups();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 groups(int index) const;
  void set_groups(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_groups(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      groups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_groups();

  // string CheckpointID = 2[json_name = "CheckpointID"];
  void clear_checkpointid();
  const std::string& checkpointid() const;
  void set_checkpointid(const std::string& value);
  void set_checkpointid(std::string&& value);
  void set_checkpointid(const char* value);
  void set_checkpointid(const char* value, size_t size);
  std::string* mutable_checkpointid();
  std::string* release_checkpointid();
  void set_allocated_checkpointid(std::string* checkpointid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_checkpointid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_checkpointid(
      std::string* checkpointid);
  private:
  const std::string& _internal_checkpointid() const;
  void _internal_set_checkpointid(const std::string& value);
  std::string* _internal_mutable_checkpointid();
  public:

  // string CheckpointPath = 3[json_name = "CheckpointPath"];
  void clear_checkpointpath();
  const std::string& checkpointpath() const;
  void set_checkpointpath(const std::string& value);
  void set_checkpointpath(std::string&& value);
  void set_checkpointpath(const char* value);
  void set_checkpointpath(const char* value, size_t size);
  std::string* mutable_checkpointpath();
  std::string* release_checkpointpath();
  void set_allocated_checkpointpath(std::string* checkpointpath);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_checkpointpath();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_checkpointpath(
      std::string* checkpointpath);
  private:
  const std::string& _internal_checkpointpath() const;
  void _internal_set_checkpointpath(const std::string& value);
  std::string* _internal_mutable_checkpointpath();
  public:

  // string JID = 4[json_name = "JID"];
  void clear_jid();
  const std::string& jid() const;
  void set_jid(const std::string& value);
  void set_jid(std::string&& value);
  void set_jid(const char* value);
  void set_jid(const char* value, size_t size);
  std::string* mutable_jid();
  std::string* release_jid();
  void set_allocated_jid(std::string* jid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_jid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_jid(
      std::string* jid);
  private:
  const std::string& _internal_jid() const;
  void _internal_set_jid(const std::string& value);
  std::string* _internal_mutable_jid();
  public:

  // .cedana.services.task.CriuOpts CriuOpts = 9[json_name = "CriuOpts"];
  bool has_criuopts() const;
  private:
  bool _internal_has_criuopts() const;
  public:
  void clear_criuopts();
  const ::cedana::services::task::CriuOpts& criuopts() const;
  ::cedana::services::task::CriuOpts* release_criuopts();
  ::cedana::services::task::CriuOpts* mutable_criuopts();
  void set_allocated_criuopts(::cedana::services::task::CriuOpts* criuopts);
  private:
  const ::cedana::services::task::CriuOpts& _internal_criuopts() const;
  ::cedana::services::task::CriuOpts* _internal_mutable_criuopts();
  public:
  void unsafe_arena_set_allocated_criuopts(
      ::cedana::services::task::CriuOpts* criuopts);
  ::cedana::services::task::CriuOpts* unsafe_arena_release_criuopts();

  // .cedana.services.task.CRType Type = 1[json_name = "Type"];
  void clear_type();
  ::cedana::services::task::CRType type() const;
  void set_type(::cedana::services::task::CRType value);
  private:
  ::cedana::services::task::CRType _internal_type() const;
  void _internal_set_type(::cedana::services::task::CRType value);
  public:

  // int32 UID = 5[json_name = "UID"];
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 GID = 6[json_name = "GID"];
  void clear_gid();
  ::PROTOBUF_NAMESPACE_ID::int32 gid() const;
  void set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gid() const;
  void _internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool Stream = 8[json_name = "Stream"];
  void clear_stream();
  bool stream() const;
  void set_stream(bool value);
  private:
  bool _internal_stream() const;
  void _internal_set_stream(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.RestoreArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > groups_;
  mutable std::atomic<int> _groups_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checkpointid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checkpointpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jid_;
  ::cedana::services::task::CriuOpts* criuopts_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 gid_;
  bool stream_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class RestoreResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.RestoreResp) */ {
 public:
  inline RestoreResp() : RestoreResp(nullptr) {};
  virtual ~RestoreResp();

  RestoreResp(const RestoreResp& from);
  RestoreResp(RestoreResp&& from) noexcept
    : RestoreResp() {
    *this = ::std::move(from);
  }

  inline RestoreResp& operator=(const RestoreResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestoreResp& operator=(RestoreResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestoreResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RestoreResp* internal_default_instance() {
    return reinterpret_cast<const RestoreResp*>(
               &_RestoreResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RestoreResp& a, RestoreResp& b) {
    a.Swap(&b);
  }
  inline void Swap(RestoreResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestoreResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestoreResp* New() const final {
    return CreateMaybeMessage<RestoreResp>(nullptr);
  }

  RestoreResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestoreResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestoreResp& from);
  void MergeFrom(const RestoreResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestoreResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.RestoreResp";
  }
  protected:
  explicit RestoreResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kStateFieldNumber = 3,
    kRestoreStatsFieldNumber = 6,
    kNewPIDFieldNumber = 2,
  };
  // string Message = 1[json_name = "Message"];
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .cedana.services.task.ProcessState State = 3[json_name = "State"];
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::cedana::services::task::ProcessState& state() const;
  ::cedana::services::task::ProcessState* release_state();
  ::cedana::services::task::ProcessState* mutable_state();
  void set_allocated_state(::cedana::services::task::ProcessState* state);
  private:
  const ::cedana::services::task::ProcessState& _internal_state() const;
  ::cedana::services::task::ProcessState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::cedana::services::task::ProcessState* state);
  ::cedana::services::task::ProcessState* unsafe_arena_release_state();

  // .cedana.services.task.RestoreStats RestoreStats = 6[json_name = "RestoreStats"];
  bool has_restorestats() const;
  private:
  bool _internal_has_restorestats() const;
  public:
  void clear_restorestats();
  const ::cedana::services::task::RestoreStats& restorestats() const;
  ::cedana::services::task::RestoreStats* release_restorestats();
  ::cedana::services::task::RestoreStats* mutable_restorestats();
  void set_allocated_restorestats(::cedana::services::task::RestoreStats* restorestats);
  private:
  const ::cedana::services::task::RestoreStats& _internal_restorestats() const;
  ::cedana::services::task::RestoreStats* _internal_mutable_restorestats();
  public:
  void unsafe_arena_set_allocated_restorestats(
      ::cedana::services::task::RestoreStats* restorestats);
  ::cedana::services::task::RestoreStats* unsafe_arena_release_restorestats();

  // int32 NewPID = 2[json_name = "NewPID"];
  void clear_newpid();
  ::PROTOBUF_NAMESPACE_ID::int32 newpid() const;
  void set_newpid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_newpid() const;
  void _internal_set_newpid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.RestoreResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::cedana::services::task::ProcessState* state_;
  ::cedana::services::task::RestoreStats* restorestats_;
  ::PROTOBUF_NAMESPACE_ID::int32 newpid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class QueryArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.QueryArgs) */ {
 public:
  inline QueryArgs() : QueryArgs(nullptr) {};
  virtual ~QueryArgs();

  QueryArgs(const QueryArgs& from);
  QueryArgs(QueryArgs&& from) noexcept
    : QueryArgs() {
    *this = ::std::move(from);
  }

  inline QueryArgs& operator=(const QueryArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryArgs& operator=(QueryArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryArgs* internal_default_instance() {
    return reinterpret_cast<const QueryArgs*>(
               &_QueryArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(QueryArgs& a, QueryArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryArgs* New() const final {
    return CreateMaybeMessage<QueryArgs>(nullptr);
  }

  QueryArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryArgs& from);
  void MergeFrom(const QueryArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.QueryArgs";
  }
  protected:
  explicit QueryArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPIDsFieldNumber = 1,
    kJIDsFieldNumber = 2,
  };
  // repeated int32 PIDs = 1[json_name = "PIDs"];
  int pids_size() const;
  private:
  int _internal_pids_size() const;
  public:
  void clear_pids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_pids() const;
  void _internal_add_pids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_pids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 pids(int index) const;
  void set_pids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_pids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      pids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_pids();

  // repeated string JIDs = 2[json_name = "JIDs"];
  int jids_size() const;
  private:
  int _internal_jids_size() const;
  public:
  void clear_jids();
  const std::string& jids(int index) const;
  std::string* mutable_jids(int index);
  void set_jids(int index, const std::string& value);
  void set_jids(int index, std::string&& value);
  void set_jids(int index, const char* value);
  void set_jids(int index, const char* value, size_t size);
  std::string* add_jids();
  void add_jids(const std::string& value);
  void add_jids(std::string&& value);
  void add_jids(const char* value);
  void add_jids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& jids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_jids();
  private:
  const std::string& _internal_jids(int index) const;
  std::string* _internal_add_jids();
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.QueryArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > pids_;
  mutable std::atomic<int> _pids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> jids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class QueryResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.QueryResp) */ {
 public:
  inline QueryResp() : QueryResp(nullptr) {};
  virtual ~QueryResp();

  QueryResp(const QueryResp& from);
  QueryResp(QueryResp&& from) noexcept
    : QueryResp() {
    *this = ::std::move(from);
  }

  inline QueryResp& operator=(const QueryResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResp& operator=(QueryResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResp* internal_default_instance() {
    return reinterpret_cast<const QueryResp*>(
               &_QueryResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(QueryResp& a, QueryResp& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryResp* New() const final {
    return CreateMaybeMessage<QueryResp>(nullptr);
  }

  QueryResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryResp& from);
  void MergeFrom(const QueryResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.QueryResp";
  }
  protected:
  explicit QueryResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessesFieldNumber = 1,
  };
  // repeated .cedana.services.task.ProcessState Processes = 1[json_name = "Processes"];
  int processes_size() const;
  private:
  int _internal_processes_size() const;
  public:
  void clear_processes();
  ::cedana::services::task::ProcessState* mutable_processes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedana::services::task::ProcessState >*
      mutable_processes();
  private:
  const ::cedana::services::task::ProcessState& _internal_processes(int index) const;
  ::cedana::services::task::ProcessState* _internal_add_processes();
  public:
  const ::cedana::services::task::ProcessState& processes(int index) const;
  ::cedana::services::task::ProcessState* add_processes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedana::services::task::ProcessState >&
      processes() const;

  // @@protoc_insertion_point(class_scope:cedana.services.task.QueryResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedana::services::task::ProcessState > processes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class ContainerdDumpArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.ContainerdDumpArgs) */ {
 public:
  inline ContainerdDumpArgs() : ContainerdDumpArgs(nullptr) {};
  virtual ~ContainerdDumpArgs();

  ContainerdDumpArgs(const ContainerdDumpArgs& from);
  ContainerdDumpArgs(ContainerdDumpArgs&& from) noexcept
    : ContainerdDumpArgs() {
    *this = ::std::move(from);
  }

  inline ContainerdDumpArgs& operator=(const ContainerdDumpArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerdDumpArgs& operator=(ContainerdDumpArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContainerdDumpArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerdDumpArgs* internal_default_instance() {
    return reinterpret_cast<const ContainerdDumpArgs*>(
               &_ContainerdDumpArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ContainerdDumpArgs& a, ContainerdDumpArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerdDumpArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerdDumpArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerdDumpArgs* New() const final {
    return CreateMaybeMessage<ContainerdDumpArgs>(nullptr);
  }

  ContainerdDumpArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerdDumpArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerdDumpArgs& from);
  void MergeFrom(const ContainerdDumpArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerdDumpArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.ContainerdDumpArgs";
  }
  protected:
  explicit ContainerdDumpArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRuncDumpArgsFieldNumber = 1,
    kContainerdRootfsDumpArgsFieldNumber = 2,
  };
  // .cedana.services.task.RuncDumpArgs RuncDumpArgs = 1[json_name = "RuncDumpArgs"];
  bool has_runcdumpargs() const;
  private:
  bool _internal_has_runcdumpargs() const;
  public:
  void clear_runcdumpargs();
  const ::cedana::services::task::RuncDumpArgs& runcdumpargs() const;
  ::cedana::services::task::RuncDumpArgs* release_runcdumpargs();
  ::cedana::services::task::RuncDumpArgs* mutable_runcdumpargs();
  void set_allocated_runcdumpargs(::cedana::services::task::RuncDumpArgs* runcdumpargs);
  private:
  const ::cedana::services::task::RuncDumpArgs& _internal_runcdumpargs() const;
  ::cedana::services::task::RuncDumpArgs* _internal_mutable_runcdumpargs();
  public:
  void unsafe_arena_set_allocated_runcdumpargs(
      ::cedana::services::task::RuncDumpArgs* runcdumpargs);
  ::cedana::services::task::RuncDumpArgs* unsafe_arena_release_runcdumpargs();

  // .cedana.services.task.ContainerdRootfsDumpArgs ContainerdRootfsDumpArgs = 2[json_name = "ContainerdRootfsDumpArgs"];
  bool has_containerdrootfsdumpargs() const;
  private:
  bool _internal_has_containerdrootfsdumpargs() const;
  public:
  void clear_containerdrootfsdumpargs();
  const ::cedana::services::task::ContainerdRootfsDumpArgs& containerdrootfsdumpargs() const;
  ::cedana::services::task::ContainerdRootfsDumpArgs* release_containerdrootfsdumpargs();
  ::cedana::services::task::ContainerdRootfsDumpArgs* mutable_containerdrootfsdumpargs();
  void set_allocated_containerdrootfsdumpargs(::cedana::services::task::ContainerdRootfsDumpArgs* containerdrootfsdumpargs);
  private:
  const ::cedana::services::task::ContainerdRootfsDumpArgs& _internal_containerdrootfsdumpargs() const;
  ::cedana::services::task::ContainerdRootfsDumpArgs* _internal_mutable_containerdrootfsdumpargs();
  public:
  void unsafe_arena_set_allocated_containerdrootfsdumpargs(
      ::cedana::services::task::ContainerdRootfsDumpArgs* containerdrootfsdumpargs);
  ::cedana::services::task::ContainerdRootfsDumpArgs* unsafe_arena_release_containerdrootfsdumpargs();

  // @@protoc_insertion_point(class_scope:cedana.services.task.ContainerdDumpArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::cedana::services::task::RuncDumpArgs* runcdumpargs_;
  ::cedana::services::task::ContainerdRootfsDumpArgs* containerdrootfsdumpargs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class ContainerdDumpResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.ContainerdDumpResp) */ {
 public:
  inline ContainerdDumpResp() : ContainerdDumpResp(nullptr) {};
  virtual ~ContainerdDumpResp();

  ContainerdDumpResp(const ContainerdDumpResp& from);
  ContainerdDumpResp(ContainerdDumpResp&& from) noexcept
    : ContainerdDumpResp() {
    *this = ::std::move(from);
  }

  inline ContainerdDumpResp& operator=(const ContainerdDumpResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerdDumpResp& operator=(ContainerdDumpResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContainerdDumpResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerdDumpResp* internal_default_instance() {
    return reinterpret_cast<const ContainerdDumpResp*>(
               &_ContainerdDumpResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ContainerdDumpResp& a, ContainerdDumpResp& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerdDumpResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerdDumpResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerdDumpResp* New() const final {
    return CreateMaybeMessage<ContainerdDumpResp>(nullptr);
  }

  ContainerdDumpResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerdDumpResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerdDumpResp& from);
  void MergeFrom(const ContainerdDumpResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerdDumpResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.ContainerdDumpResp";
  }
  protected:
  explicit ContainerdDumpResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheckpointPathFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string CheckpointPath = 1[json_name = "CheckpointPath"];
  void clear_checkpointpath();
  const std::string& checkpointpath() const;
  void set_checkpointpath(const std::string& value);
  void set_checkpointpath(std::string&& value);
  void set_checkpointpath(const char* value);
  void set_checkpointpath(const char* value, size_t size);
  std::string* mutable_checkpointpath();
  std::string* release_checkpointpath();
  void set_allocated_checkpointpath(std::string* checkpointpath);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_checkpointpath();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_checkpointpath(
      std::string* checkpointpath);
  private:
  const std::string& _internal_checkpointpath() const;
  void _internal_set_checkpointpath(const std::string& value);
  std::string* _internal_mutable_checkpointpath();
  public:

  // string Message = 2[json_name = "Message"];
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.ContainerdDumpResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checkpointpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class ContainerdRestoreArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.ContainerdRestoreArgs) */ {
 public:
  inline ContainerdRestoreArgs() : ContainerdRestoreArgs(nullptr) {};
  virtual ~ContainerdRestoreArgs();

  ContainerdRestoreArgs(const ContainerdRestoreArgs& from);
  ContainerdRestoreArgs(ContainerdRestoreArgs&& from) noexcept
    : ContainerdRestoreArgs() {
    *this = ::std::move(from);
  }

  inline ContainerdRestoreArgs& operator=(const ContainerdRestoreArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerdRestoreArgs& operator=(ContainerdRestoreArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContainerdRestoreArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerdRestoreArgs* internal_default_instance() {
    return reinterpret_cast<const ContainerdRestoreArgs*>(
               &_ContainerdRestoreArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ContainerdRestoreArgs& a, ContainerdRestoreArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerdRestoreArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerdRestoreArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerdRestoreArgs* New() const final {
    return CreateMaybeMessage<ContainerdRestoreArgs>(nullptr);
  }

  ContainerdRestoreArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerdRestoreArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerdRestoreArgs& from);
  void MergeFrom(const ContainerdRestoreArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerdRestoreArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.ContainerdRestoreArgs";
  }
  protected:
  explicit ContainerdRestoreArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImgPathFieldNumber = 1,
    kContainerIDFieldNumber = 2,
  };
  // string ImgPath = 1[json_name = "ImgPath"];
  void clear_imgpath();
  const std::string& imgpath() const;
  void set_imgpath(const std::string& value);
  void set_imgpath(std::string&& value);
  void set_imgpath(const char* value);
  void set_imgpath(const char* value, size_t size);
  std::string* mutable_imgpath();
  std::string* release_imgpath();
  void set_allocated_imgpath(std::string* imgpath);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_imgpath();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_imgpath(
      std::string* imgpath);
  private:
  const std::string& _internal_imgpath() const;
  void _internal_set_imgpath(const std::string& value);
  std::string* _internal_mutable_imgpath();
  public:

  // string ContainerID = 2[json_name = "ContainerID"];
  void clear_containerid();
  const std::string& containerid() const;
  void set_containerid(const std::string& value);
  void set_containerid(std::string&& value);
  void set_containerid(const char* value);
  void set_containerid(const char* value, size_t size);
  std::string* mutable_containerid();
  std::string* release_containerid();
  void set_allocated_containerid(std::string* containerid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_containerid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_containerid(
      std::string* containerid);
  private:
  const std::string& _internal_containerid() const;
  void _internal_set_containerid(const std::string& value);
  std::string* _internal_mutable_containerid();
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.ContainerdRestoreArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imgpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr containerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class ContainerdRestoreResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.ContainerdRestoreResp) */ {
 public:
  inline ContainerdRestoreResp() : ContainerdRestoreResp(nullptr) {};
  virtual ~ContainerdRestoreResp();

  ContainerdRestoreResp(const ContainerdRestoreResp& from);
  ContainerdRestoreResp(ContainerdRestoreResp&& from) noexcept
    : ContainerdRestoreResp() {
    *this = ::std::move(from);
  }

  inline ContainerdRestoreResp& operator=(const ContainerdRestoreResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerdRestoreResp& operator=(ContainerdRestoreResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContainerdRestoreResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerdRestoreResp* internal_default_instance() {
    return reinterpret_cast<const ContainerdRestoreResp*>(
               &_ContainerdRestoreResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ContainerdRestoreResp& a, ContainerdRestoreResp& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerdRestoreResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerdRestoreResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerdRestoreResp* New() const final {
    return CreateMaybeMessage<ContainerdRestoreResp>(nullptr);
  }

  ContainerdRestoreResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerdRestoreResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerdRestoreResp& from);
  void MergeFrom(const ContainerdRestoreResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerdRestoreResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.ContainerdRestoreResp";
  }
  protected:
  explicit ContainerdRestoreResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string Message = 1[json_name = "Message"];
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.ContainerdRestoreResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class ContainerdQueryArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.ContainerdQueryArgs) */ {
 public:
  inline ContainerdQueryArgs() : ContainerdQueryArgs(nullptr) {};
  virtual ~ContainerdQueryArgs();

  ContainerdQueryArgs(const ContainerdQueryArgs& from);
  ContainerdQueryArgs(ContainerdQueryArgs&& from) noexcept
    : ContainerdQueryArgs() {
    *this = ::std::move(from);
  }

  inline ContainerdQueryArgs& operator=(const ContainerdQueryArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerdQueryArgs& operator=(ContainerdQueryArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContainerdQueryArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerdQueryArgs* internal_default_instance() {
    return reinterpret_cast<const ContainerdQueryArgs*>(
               &_ContainerdQueryArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ContainerdQueryArgs& a, ContainerdQueryArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerdQueryArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerdQueryArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerdQueryArgs* New() const final {
    return CreateMaybeMessage<ContainerdQueryArgs>(nullptr);
  }

  ContainerdQueryArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerdQueryArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerdQueryArgs& from);
  void MergeFrom(const ContainerdQueryArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerdQueryArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.ContainerdQueryArgs";
  }
  protected:
  explicit ContainerdQueryArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootFieldNumber = 1,
    kNamespaceFieldNumber = 2,
  };
  // string Root = 1[json_name = "Root"];
  void clear_root();
  const std::string& root() const;
  void set_root(const std::string& value);
  void set_root(std::string&& value);
  void set_root(const char* value);
  void set_root(const char* value, size_t size);
  std::string* mutable_root();
  std::string* release_root();
  void set_allocated_root(std::string* root);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_root();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_root(
      std::string* root);
  private:
  const std::string& _internal_root() const;
  void _internal_set_root(const std::string& value);
  std::string* _internal_mutable_root();
  public:

  // string Namespace = 2[json_name = "Namespace"];
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_namespace_();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_namespace_(
      std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.ContainerdQueryArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class ContainerdQueryResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.ContainerdQueryResp) */ {
 public:
  inline ContainerdQueryResp() : ContainerdQueryResp(nullptr) {};
  virtual ~ContainerdQueryResp();

  ContainerdQueryResp(const ContainerdQueryResp& from);
  ContainerdQueryResp(ContainerdQueryResp&& from) noexcept
    : ContainerdQueryResp() {
    *this = ::std::move(from);
  }

  inline ContainerdQueryResp& operator=(const ContainerdQueryResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerdQueryResp& operator=(ContainerdQueryResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContainerdQueryResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerdQueryResp* internal_default_instance() {
    return reinterpret_cast<const ContainerdQueryResp*>(
               &_ContainerdQueryResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ContainerdQueryResp& a, ContainerdQueryResp& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerdQueryResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerdQueryResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerdQueryResp* New() const final {
    return CreateMaybeMessage<ContainerdQueryResp>(nullptr);
  }

  ContainerdQueryResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerdQueryResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerdQueryResp& from);
  void MergeFrom(const ContainerdQueryResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerdQueryResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.ContainerdQueryResp";
  }
  protected:
  explicit ContainerdQueryResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainersFieldNumber = 1,
  };
  // repeated .cedana.services.task.ContainerdContainer Containers = 1[json_name = "Containers"];
  int containers_size() const;
  private:
  int _internal_containers_size() const;
  public:
  void clear_containers();
  ::cedana::services::task::ContainerdContainer* mutable_containers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedana::services::task::ContainerdContainer >*
      mutable_containers();
  private:
  const ::cedana::services::task::ContainerdContainer& _internal_containers(int index) const;
  ::cedana::services::task::ContainerdContainer* _internal_add_containers();
  public:
  const ::cedana::services::task::ContainerdContainer& containers(int index) const;
  ::cedana::services::task::ContainerdContainer* add_containers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedana::services::task::ContainerdContainer >&
      containers() const;

  // @@protoc_insertion_point(class_scope:cedana.services.task.ContainerdQueryResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedana::services::task::ContainerdContainer > containers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class ContainerdContainer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.ContainerdContainer) */ {
 public:
  inline ContainerdContainer() : ContainerdContainer(nullptr) {};
  virtual ~ContainerdContainer();

  ContainerdContainer(const ContainerdContainer& from);
  ContainerdContainer(ContainerdContainer&& from) noexcept
    : ContainerdContainer() {
    *this = ::std::move(from);
  }

  inline ContainerdContainer& operator=(const ContainerdContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerdContainer& operator=(ContainerdContainer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContainerdContainer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerdContainer* internal_default_instance() {
    return reinterpret_cast<const ContainerdContainer*>(
               &_ContainerdContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ContainerdContainer& a, ContainerdContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerdContainer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerdContainer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerdContainer* New() const final {
    return CreateMaybeMessage<ContainerdContainer>(nullptr);
  }

  ContainerdContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerdContainer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerdContainer& from);
  void MergeFrom(const ContainerdContainer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerdContainer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.ContainerdContainer";
  }
  protected:
  explicit ContainerdContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerNameFieldNumber = 1,
    kImageNameFieldNumber = 2,
    kSandboxIdFieldNumber = 3,
    kSandboxNameFieldNumber = 4,
    kSandboxNamespaceFieldNumber = 5,
    kSandboxUidFieldNumber = 6,
  };
  // string ContainerName = 1[json_name = "ContainerName"];
  void clear_containername();
  const std::string& containername() const;
  void set_containername(const std::string& value);
  void set_containername(std::string&& value);
  void set_containername(const char* value);
  void set_containername(const char* value, size_t size);
  std::string* mutable_containername();
  std::string* release_containername();
  void set_allocated_containername(std::string* containername);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_containername();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_containername(
      std::string* containername);
  private:
  const std::string& _internal_containername() const;
  void _internal_set_containername(const std::string& value);
  std::string* _internal_mutable_containername();
  public:

  // string ImageName = 2[json_name = "ImageName"];
  void clear_imagename();
  const std::string& imagename() const;
  void set_imagename(const std::string& value);
  void set_imagename(std::string&& value);
  void set_imagename(const char* value);
  void set_imagename(const char* value, size_t size);
  std::string* mutable_imagename();
  std::string* release_imagename();
  void set_allocated_imagename(std::string* imagename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_imagename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_imagename(
      std::string* imagename);
  private:
  const std::string& _internal_imagename() const;
  void _internal_set_imagename(const std::string& value);
  std::string* _internal_mutable_imagename();
  public:

  // string SandboxId = 3[json_name = "SandboxId"];
  void clear_sandboxid();
  const std::string& sandboxid() const;
  void set_sandboxid(const std::string& value);
  void set_sandboxid(std::string&& value);
  void set_sandboxid(const char* value);
  void set_sandboxid(const char* value, size_t size);
  std::string* mutable_sandboxid();
  std::string* release_sandboxid();
  void set_allocated_sandboxid(std::string* sandboxid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sandboxid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sandboxid(
      std::string* sandboxid);
  private:
  const std::string& _internal_sandboxid() const;
  void _internal_set_sandboxid(const std::string& value);
  std::string* _internal_mutable_sandboxid();
  public:

  // string SandboxName = 4[json_name = "SandboxName"];
  void clear_sandboxname();
  const std::string& sandboxname() const;
  void set_sandboxname(const std::string& value);
  void set_sandboxname(std::string&& value);
  void set_sandboxname(const char* value);
  void set_sandboxname(const char* value, size_t size);
  std::string* mutable_sandboxname();
  std::string* release_sandboxname();
  void set_allocated_sandboxname(std::string* sandboxname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sandboxname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sandboxname(
      std::string* sandboxname);
  private:
  const std::string& _internal_sandboxname() const;
  void _internal_set_sandboxname(const std::string& value);
  std::string* _internal_mutable_sandboxname();
  public:

  // string SandboxNamespace = 5[json_name = "SandboxNamespace"];
  void clear_sandboxnamespace();
  const std::string& sandboxnamespace() const;
  void set_sandboxnamespace(const std::string& value);
  void set_sandboxnamespace(std::string&& value);
  void set_sandboxnamespace(const char* value);
  void set_sandboxnamespace(const char* value, size_t size);
  std::string* mutable_sandboxnamespace();
  std::string* release_sandboxnamespace();
  void set_allocated_sandboxnamespace(std::string* sandboxnamespace);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sandboxnamespace();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sandboxnamespace(
      std::string* sandboxnamespace);
  private:
  const std::string& _internal_sandboxnamespace() const;
  void _internal_set_sandboxnamespace(const std::string& value);
  std::string* _internal_mutable_sandboxnamespace();
  public:

  // string SandboxUid = 6[json_name = "SandboxUid"];
  void clear_sandboxuid();
  const std::string& sandboxuid() const;
  void set_sandboxuid(const std::string& value);
  void set_sandboxuid(std::string&& value);
  void set_sandboxuid(const char* value);
  void set_sandboxuid(const char* value, size_t size);
  std::string* mutable_sandboxuid();
  std::string* release_sandboxuid();
  void set_allocated_sandboxuid(std::string* sandboxuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sandboxuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sandboxuid(
      std::string* sandboxuid);
  private:
  const std::string& _internal_sandboxuid() const;
  void _internal_set_sandboxuid(const std::string& value);
  std::string* _internal_mutable_sandboxuid();
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.ContainerdContainer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr containername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sandboxid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sandboxname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sandboxnamespace_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sandboxuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class ContainerdRootfsDumpArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.ContainerdRootfsDumpArgs) */ {
 public:
  inline ContainerdRootfsDumpArgs() : ContainerdRootfsDumpArgs(nullptr) {};
  virtual ~ContainerdRootfsDumpArgs();

  ContainerdRootfsDumpArgs(const ContainerdRootfsDumpArgs& from);
  ContainerdRootfsDumpArgs(ContainerdRootfsDumpArgs&& from) noexcept
    : ContainerdRootfsDumpArgs() {
    *this = ::std::move(from);
  }

  inline ContainerdRootfsDumpArgs& operator=(const ContainerdRootfsDumpArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerdRootfsDumpArgs& operator=(ContainerdRootfsDumpArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContainerdRootfsDumpArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerdRootfsDumpArgs* internal_default_instance() {
    return reinterpret_cast<const ContainerdRootfsDumpArgs*>(
               &_ContainerdRootfsDumpArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ContainerdRootfsDumpArgs& a, ContainerdRootfsDumpArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerdRootfsDumpArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerdRootfsDumpArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerdRootfsDumpArgs* New() const final {
    return CreateMaybeMessage<ContainerdRootfsDumpArgs>(nullptr);
  }

  ContainerdRootfsDumpArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerdRootfsDumpArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerdRootfsDumpArgs& from);
  void MergeFrom(const ContainerdRootfsDumpArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerdRootfsDumpArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.ContainerdRootfsDumpArgs";
  }
  protected:
  explicit ContainerdRootfsDumpArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIDFieldNumber = 1,
    kImageRefFieldNumber = 2,
    kAddressFieldNumber = 3,
    kNamespaceFieldNumber = 4,
  };
  // string ContainerID = 1[json_name = "ContainerID"];
  void clear_containerid();
  const std::string& containerid() const;
  void set_containerid(const std::string& value);
  void set_containerid(std::string&& value);
  void set_containerid(const char* value);
  void set_containerid(const char* value, size_t size);
  std::string* mutable_containerid();
  std::string* release_containerid();
  void set_allocated_containerid(std::string* containerid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_containerid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_containerid(
      std::string* containerid);
  private:
  const std::string& _internal_containerid() const;
  void _internal_set_containerid(const std::string& value);
  std::string* _internal_mutable_containerid();
  public:

  // string ImageRef = 2[json_name = "ImageRef"];
  void clear_imageref();
  const std::string& imageref() const;
  void set_imageref(const std::string& value);
  void set_imageref(std::string&& value);
  void set_imageref(const char* value);
  void set_imageref(const char* value, size_t size);
  std::string* mutable_imageref();
  std::string* release_imageref();
  void set_allocated_imageref(std::string* imageref);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_imageref();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_imageref(
      std::string* imageref);
  private:
  const std::string& _internal_imageref() const;
  void _internal_set_imageref(const std::string& value);
  std::string* _internal_mutable_imageref();
  public:

  // string Address = 3[json_name = "Address"];
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_address(
      std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string Namespace = 4[json_name = "Namespace"];
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_namespace_();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_namespace_(
      std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.ContainerdRootfsDumpArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr containerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imageref_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class ContainerdRootfsDumpResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.ContainerdRootfsDumpResp) */ {
 public:
  inline ContainerdRootfsDumpResp() : ContainerdRootfsDumpResp(nullptr) {};
  virtual ~ContainerdRootfsDumpResp();

  ContainerdRootfsDumpResp(const ContainerdRootfsDumpResp& from);
  ContainerdRootfsDumpResp(ContainerdRootfsDumpResp&& from) noexcept
    : ContainerdRootfsDumpResp() {
    *this = ::std::move(from);
  }

  inline ContainerdRootfsDumpResp& operator=(const ContainerdRootfsDumpResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerdRootfsDumpResp& operator=(ContainerdRootfsDumpResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContainerdRootfsDumpResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerdRootfsDumpResp* internal_default_instance() {
    return reinterpret_cast<const ContainerdRootfsDumpResp*>(
               &_ContainerdRootfsDumpResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ContainerdRootfsDumpResp& a, ContainerdRootfsDumpResp& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerdRootfsDumpResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerdRootfsDumpResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerdRootfsDumpResp* New() const final {
    return CreateMaybeMessage<ContainerdRootfsDumpResp>(nullptr);
  }

  ContainerdRootfsDumpResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerdRootfsDumpResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerdRootfsDumpResp& from);
  void MergeFrom(const ContainerdRootfsDumpResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerdRootfsDumpResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.ContainerdRootfsDumpResp";
  }
  protected:
  explicit ContainerdRootfsDumpResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageRefFieldNumber = 1,
  };
  // string ImageRef = 1[json_name = "ImageRef"];
  void clear_imageref();
  const std::string& imageref() const;
  void set_imageref(const std::string& value);
  void set_imageref(std::string&& value);
  void set_imageref(const char* value);
  void set_imageref(const char* value, size_t size);
  std::string* mutable_imageref();
  std::string* release_imageref();
  void set_allocated_imageref(std::string* imageref);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_imageref();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_imageref(
      std::string* imageref);
  private:
  const std::string& _internal_imageref() const;
  void _internal_set_imageref(const std::string& value);
  std::string* _internal_mutable_imageref();
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.ContainerdRootfsDumpResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imageref_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class ContainerdRootfsRestoreArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.ContainerdRootfsRestoreArgs) */ {
 public:
  inline ContainerdRootfsRestoreArgs() : ContainerdRootfsRestoreArgs(nullptr) {};
  virtual ~ContainerdRootfsRestoreArgs();

  ContainerdRootfsRestoreArgs(const ContainerdRootfsRestoreArgs& from);
  ContainerdRootfsRestoreArgs(ContainerdRootfsRestoreArgs&& from) noexcept
    : ContainerdRootfsRestoreArgs() {
    *this = ::std::move(from);
  }

  inline ContainerdRootfsRestoreArgs& operator=(const ContainerdRootfsRestoreArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerdRootfsRestoreArgs& operator=(ContainerdRootfsRestoreArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContainerdRootfsRestoreArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerdRootfsRestoreArgs* internal_default_instance() {
    return reinterpret_cast<const ContainerdRootfsRestoreArgs*>(
               &_ContainerdRootfsRestoreArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ContainerdRootfsRestoreArgs& a, ContainerdRootfsRestoreArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerdRootfsRestoreArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerdRootfsRestoreArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerdRootfsRestoreArgs* New() const final {
    return CreateMaybeMessage<ContainerdRootfsRestoreArgs>(nullptr);
  }

  ContainerdRootfsRestoreArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerdRootfsRestoreArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerdRootfsRestoreArgs& from);
  void MergeFrom(const ContainerdRootfsRestoreArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerdRootfsRestoreArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.ContainerdRootfsRestoreArgs";
  }
  protected:
  explicit ContainerdRootfsRestoreArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIDFieldNumber = 1,
    kImageRefFieldNumber = 2,
    kAddressFieldNumber = 3,
    kNamespaceFieldNumber = 4,
  };
  // string ContainerID = 1[json_name = "ContainerID"];
  void clear_containerid();
  const std::string& containerid() const;
  void set_containerid(const std::string& value);
  void set_containerid(std::string&& value);
  void set_containerid(const char* value);
  void set_containerid(const char* value, size_t size);
  std::string* mutable_containerid();
  std::string* release_containerid();
  void set_allocated_containerid(std::string* containerid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_containerid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_containerid(
      std::string* containerid);
  private:
  const std::string& _internal_containerid() const;
  void _internal_set_containerid(const std::string& value);
  std::string* _internal_mutable_containerid();
  public:

  // string ImageRef = 2[json_name = "ImageRef"];
  void clear_imageref();
  const std::string& imageref() const;
  void set_imageref(const std::string& value);
  void set_imageref(std::string&& value);
  void set_imageref(const char* value);
  void set_imageref(const char* value, size_t size);
  std::string* mutable_imageref();
  std::string* release_imageref();
  void set_allocated_imageref(std::string* imageref);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_imageref();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_imageref(
      std::string* imageref);
  private:
  const std::string& _internal_imageref() const;
  void _internal_set_imageref(const std::string& value);
  std::string* _internal_mutable_imageref();
  public:

  // string Address = 3[json_name = "Address"];
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_address(
      std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string Namespace = 4[json_name = "Namespace"];
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_namespace_();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_namespace_(
      std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.ContainerdRootfsRestoreArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr containerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imageref_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class ContainerdRootfsRestoreResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.ContainerdRootfsRestoreResp) */ {
 public:
  inline ContainerdRootfsRestoreResp() : ContainerdRootfsRestoreResp(nullptr) {};
  virtual ~ContainerdRootfsRestoreResp();

  ContainerdRootfsRestoreResp(const ContainerdRootfsRestoreResp& from);
  ContainerdRootfsRestoreResp(ContainerdRootfsRestoreResp&& from) noexcept
    : ContainerdRootfsRestoreResp() {
    *this = ::std::move(from);
  }

  inline ContainerdRootfsRestoreResp& operator=(const ContainerdRootfsRestoreResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerdRootfsRestoreResp& operator=(ContainerdRootfsRestoreResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContainerdRootfsRestoreResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerdRootfsRestoreResp* internal_default_instance() {
    return reinterpret_cast<const ContainerdRootfsRestoreResp*>(
               &_ContainerdRootfsRestoreResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ContainerdRootfsRestoreResp& a, ContainerdRootfsRestoreResp& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerdRootfsRestoreResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerdRootfsRestoreResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerdRootfsRestoreResp* New() const final {
    return CreateMaybeMessage<ContainerdRootfsRestoreResp>(nullptr);
  }

  ContainerdRootfsRestoreResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerdRootfsRestoreResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerdRootfsRestoreResp& from);
  void MergeFrom(const ContainerdRootfsRestoreResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerdRootfsRestoreResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.ContainerdRootfsRestoreResp";
  }
  protected:
  explicit ContainerdRootfsRestoreResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageRefFieldNumber = 1,
  };
  // string ImageRef = 1[json_name = "ImageRef"];
  void clear_imageref();
  const std::string& imageref() const;
  void set_imageref(const std::string& value);
  void set_imageref(std::string&& value);
  void set_imageref(const char* value);
  void set_imageref(const char* value, size_t size);
  std::string* mutable_imageref();
  std::string* release_imageref();
  void set_allocated_imageref(std::string* imageref);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_imageref();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_imageref(
      std::string* imageref);
  private:
  const std::string& _internal_imageref() const;
  void _internal_set_imageref(const std::string& value);
  std::string* _internal_mutable_imageref();
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.ContainerdRootfsRestoreResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imageref_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class RuncDumpArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.RuncDumpArgs) */ {
 public:
  inline RuncDumpArgs() : RuncDumpArgs(nullptr) {};
  virtual ~RuncDumpArgs();

  RuncDumpArgs(const RuncDumpArgs& from);
  RuncDumpArgs(RuncDumpArgs&& from) noexcept
    : RuncDumpArgs() {
    *this = ::std::move(from);
  }

  inline RuncDumpArgs& operator=(const RuncDumpArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuncDumpArgs& operator=(RuncDumpArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuncDumpArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuncDumpArgs* internal_default_instance() {
    return reinterpret_cast<const RuncDumpArgs*>(
               &_RuncDumpArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(RuncDumpArgs& a, RuncDumpArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(RuncDumpArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuncDumpArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuncDumpArgs* New() const final {
    return CreateMaybeMessage<RuncDumpArgs>(nullptr);
  }

  RuncDumpArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuncDumpArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuncDumpArgs& from);
  void MergeFrom(const RuncDumpArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuncDumpArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.RuncDumpArgs";
  }
  protected:
  explicit RuncDumpArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootFieldNumber = 1,
    kCheckpointPathFieldNumber = 2,
    kContainerIDFieldNumber = 3,
    kCriuOptsFieldNumber = 4,
    kStateFieldNumber = 6,
    kTypeFieldNumber = 5,
    kGPUFieldNumber = 7,
    kPidFieldNumber = 8,
  };
  // string Root = 1[json_name = "Root"];
  void clear_root();
  const std::string& root() const;
  void set_root(const std::string& value);
  void set_root(std::string&& value);
  void set_root(const char* value);
  void set_root(const char* value, size_t size);
  std::string* mutable_root();
  std::string* release_root();
  void set_allocated_root(std::string* root);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_root();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_root(
      std::string* root);
  private:
  const std::string& _internal_root() const;
  void _internal_set_root(const std::string& value);
  std::string* _internal_mutable_root();
  public:

  // string CheckpointPath = 2[json_name = "CheckpointPath"];
  void clear_checkpointpath();
  const std::string& checkpointpath() const;
  void set_checkpointpath(const std::string& value);
  void set_checkpointpath(std::string&& value);
  void set_checkpointpath(const char* value);
  void set_checkpointpath(const char* value, size_t size);
  std::string* mutable_checkpointpath();
  std::string* release_checkpointpath();
  void set_allocated_checkpointpath(std::string* checkpointpath);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_checkpointpath();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_checkpointpath(
      std::string* checkpointpath);
  private:
  const std::string& _internal_checkpointpath() const;
  void _internal_set_checkpointpath(const std::string& value);
  std::string* _internal_mutable_checkpointpath();
  public:

  // string ContainerID = 3[json_name = "ContainerID"];
  void clear_containerid();
  const std::string& containerid() const;
  void set_containerid(const std::string& value);
  void set_containerid(std::string&& value);
  void set_containerid(const char* value);
  void set_containerid(const char* value, size_t size);
  std::string* mutable_containerid();
  std::string* release_containerid();
  void set_allocated_containerid(std::string* containerid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_containerid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_containerid(
      std::string* containerid);
  private:
  const std::string& _internal_containerid() const;
  void _internal_set_containerid(const std::string& value);
  std::string* _internal_mutable_containerid();
  public:

  // .cedana.services.task.CriuOpts CriuOpts = 4[json_name = "CriuOpts"];
  bool has_criuopts() const;
  private:
  bool _internal_has_criuopts() const;
  public:
  void clear_criuopts();
  const ::cedana::services::task::CriuOpts& criuopts() const;
  ::cedana::services::task::CriuOpts* release_criuopts();
  ::cedana::services::task::CriuOpts* mutable_criuopts();
  void set_allocated_criuopts(::cedana::services::task::CriuOpts* criuopts);
  private:
  const ::cedana::services::task::CriuOpts& _internal_criuopts() const;
  ::cedana::services::task::CriuOpts* _internal_mutable_criuopts();
  public:
  void unsafe_arena_set_allocated_criuopts(
      ::cedana::services::task::CriuOpts* criuopts);
  ::cedana::services::task::CriuOpts* unsafe_arena_release_criuopts();

  // .cedana.services.task.ProcessState state = 6[json_name = "state"];
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::cedana::services::task::ProcessState& state() const;
  ::cedana::services::task::ProcessState* release_state();
  ::cedana::services::task::ProcessState* mutable_state();
  void set_allocated_state(::cedana::services::task::ProcessState* state);
  private:
  const ::cedana::services::task::ProcessState& _internal_state() const;
  ::cedana::services::task::ProcessState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::cedana::services::task::ProcessState* state);
  ::cedana::services::task::ProcessState* unsafe_arena_release_state();

  // .cedana.services.task.CRType Type = 5[json_name = "Type"];
  void clear_type();
  ::cedana::services::task::CRType type() const;
  void set_type(::cedana::services::task::CRType value);
  private:
  ::cedana::services::task::CRType _internal_type() const;
  void _internal_set_type(::cedana::services::task::CRType value);
  public:

  // bool GPU = 7[json_name = "GPU"];
  void clear_gpu();
  bool gpu() const;
  void set_gpu(bool value);
  private:
  bool _internal_gpu() const;
  void _internal_set_gpu(bool value);
  public:

  // int32 pid = 8[json_name = "pid"];
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.RuncDumpArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checkpointpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr containerid_;
  ::cedana::services::task::CriuOpts* criuopts_;
  ::cedana::services::task::ProcessState* state_;
  int type_;
  bool gpu_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class RuncDumpResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.RuncDumpResp) */ {
 public:
  inline RuncDumpResp() : RuncDumpResp(nullptr) {};
  virtual ~RuncDumpResp();

  RuncDumpResp(const RuncDumpResp& from);
  RuncDumpResp(RuncDumpResp&& from) noexcept
    : RuncDumpResp() {
    *this = ::std::move(from);
  }

  inline RuncDumpResp& operator=(const RuncDumpResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuncDumpResp& operator=(RuncDumpResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuncDumpResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuncDumpResp* internal_default_instance() {
    return reinterpret_cast<const RuncDumpResp*>(
               &_RuncDumpResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(RuncDumpResp& a, RuncDumpResp& b) {
    a.Swap(&b);
  }
  inline void Swap(RuncDumpResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuncDumpResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuncDumpResp* New() const final {
    return CreateMaybeMessage<RuncDumpResp>(nullptr);
  }

  RuncDumpResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuncDumpResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuncDumpResp& from);
  void MergeFrom(const RuncDumpResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuncDumpResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.RuncDumpResp";
  }
  protected:
  explicit RuncDumpResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kCheckpointIDFieldNumber = 2,
    kUploadIDFieldNumber = 3,
    kStateFieldNumber = 4,
    kDumpStatsFieldNumber = 5,
  };
  // string Message = 1[json_name = "Message"];
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string CheckpointID = 2[json_name = "CheckpointID"];
  void clear_checkpointid();
  const std::string& checkpointid() const;
  void set_checkpointid(const std::string& value);
  void set_checkpointid(std::string&& value);
  void set_checkpointid(const char* value);
  void set_checkpointid(const char* value, size_t size);
  std::string* mutable_checkpointid();
  std::string* release_checkpointid();
  void set_allocated_checkpointid(std::string* checkpointid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_checkpointid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_checkpointid(
      std::string* checkpointid);
  private:
  const std::string& _internal_checkpointid() const;
  void _internal_set_checkpointid(const std::string& value);
  std::string* _internal_mutable_checkpointid();
  public:

  // string UploadID = 3[json_name = "UploadID"];
  void clear_uploadid();
  const std::string& uploadid() const;
  void set_uploadid(const std::string& value);
  void set_uploadid(std::string&& value);
  void set_uploadid(const char* value);
  void set_uploadid(const char* value, size_t size);
  std::string* mutable_uploadid();
  std::string* release_uploadid();
  void set_allocated_uploadid(std::string* uploadid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uploadid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uploadid(
      std::string* uploadid);
  private:
  const std::string& _internal_uploadid() const;
  void _internal_set_uploadid(const std::string& value);
  std::string* _internal_mutable_uploadid();
  public:

  // .cedana.services.task.ProcessState State = 4[json_name = "State"];
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::cedana::services::task::ProcessState& state() const;
  ::cedana::services::task::ProcessState* release_state();
  ::cedana::services::task::ProcessState* mutable_state();
  void set_allocated_state(::cedana::services::task::ProcessState* state);
  private:
  const ::cedana::services::task::ProcessState& _internal_state() const;
  ::cedana::services::task::ProcessState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::cedana::services::task::ProcessState* state);
  ::cedana::services::task::ProcessState* unsafe_arena_release_state();

  // .cedana.services.task.DumpStats DumpStats = 5[json_name = "DumpStats"];
  bool has_dumpstats() const;
  private:
  bool _internal_has_dumpstats() const;
  public:
  void clear_dumpstats();
  const ::cedana::services::task::DumpStats& dumpstats() const;
  ::cedana::services::task::DumpStats* release_dumpstats();
  ::cedana::services::task::DumpStats* mutable_dumpstats();
  void set_allocated_dumpstats(::cedana::services::task::DumpStats* dumpstats);
  private:
  const ::cedana::services::task::DumpStats& _internal_dumpstats() const;
  ::cedana::services::task::DumpStats* _internal_mutable_dumpstats();
  public:
  void unsafe_arena_set_allocated_dumpstats(
      ::cedana::services::task::DumpStats* dumpstats);
  ::cedana::services::task::DumpStats* unsafe_arena_release_dumpstats();

  // @@protoc_insertion_point(class_scope:cedana.services.task.RuncDumpResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checkpointid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uploadid_;
  ::cedana::services::task::ProcessState* state_;
  ::cedana::services::task::DumpStats* dumpstats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class CriuOpts PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.CriuOpts) */ {
 public:
  inline CriuOpts() : CriuOpts(nullptr) {};
  virtual ~CriuOpts();

  CriuOpts(const CriuOpts& from);
  CriuOpts(CriuOpts&& from) noexcept
    : CriuOpts() {
    *this = ::std::move(from);
  }

  inline CriuOpts& operator=(const CriuOpts& from) {
    CopyFrom(from);
    return *this;
  }
  inline CriuOpts& operator=(CriuOpts&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CriuOpts& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CriuOpts* internal_default_instance() {
    return reinterpret_cast<const CriuOpts*>(
               &_CriuOpts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CriuOpts& a, CriuOpts& b) {
    a.Swap(&b);
  }
  inline void Swap(CriuOpts* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CriuOpts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CriuOpts* New() const final {
    return CreateMaybeMessage<CriuOpts>(nullptr);
  }

  CriuOpts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CriuOpts>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CriuOpts& from);
  void MergeFrom(const CriuOpts& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CriuOpts* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.CriuOpts";
  }
  protected:
  explicit CriuOpts(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExternalFieldNumber = 18,
    kImagesDirectoryFieldNumber = 1,
    kWorkDirectoryFieldNumber = 2,
    kParentImageFieldNumber = 3,
    kLsmProfileFieldNumber = 16,
    kLsmMountContextFieldNumber = 17,
    kLeaveRunningFieldNumber = 4,
    kTcpEstablishedFieldNumber = 5,
    kExternalUnixConnectionsFieldNumber = 6,
    kShellJobFieldNumber = 7,
    kFileLocksFieldNumber = 8,
    kPreDumpFieldNumber = 9,
    kStreamFieldNumber = 10,
    kAutoDedupFieldNumber = 13,
    kEmptyNsFieldNumber = 12,
    kLazyPagesFieldNumber = 14,
    kStatusFdFieldNumber = 15,
  };
  // repeated string External = 18[json_name = "External"];
  int external_size() const;
  private:
  int _internal_external_size() const;
  public:
  void clear_external();
  const std::string& external(int index) const;
  std::string* mutable_external(int index);
  void set_external(int index, const std::string& value);
  void set_external(int index, std::string&& value);
  void set_external(int index, const char* value);
  void set_external(int index, const char* value, size_t size);
  std::string* add_external();
  void add_external(const std::string& value);
  void add_external(std::string&& value);
  void add_external(const char* value);
  void add_external(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& external() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_external();
  private:
  const std::string& _internal_external(int index) const;
  std::string* _internal_add_external();
  public:

  // string ImagesDirectory = 1[json_name = "ImagesDirectory"];
  void clear_imagesdirectory();
  const std::string& imagesdirectory() const;
  void set_imagesdirectory(const std::string& value);
  void set_imagesdirectory(std::string&& value);
  void set_imagesdirectory(const char* value);
  void set_imagesdirectory(const char* value, size_t size);
  std::string* mutable_imagesdirectory();
  std::string* release_imagesdirectory();
  void set_allocated_imagesdirectory(std::string* imagesdirectory);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_imagesdirectory();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_imagesdirectory(
      std::string* imagesdirectory);
  private:
  const std::string& _internal_imagesdirectory() const;
  void _internal_set_imagesdirectory(const std::string& value);
  std::string* _internal_mutable_imagesdirectory();
  public:

  // string WorkDirectory = 2[json_name = "WorkDirectory"];
  void clear_workdirectory();
  const std::string& workdirectory() const;
  void set_workdirectory(const std::string& value);
  void set_workdirectory(std::string&& value);
  void set_workdirectory(const char* value);
  void set_workdirectory(const char* value, size_t size);
  std::string* mutable_workdirectory();
  std::string* release_workdirectory();
  void set_allocated_workdirectory(std::string* workdirectory);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_workdirectory();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_workdirectory(
      std::string* workdirectory);
  private:
  const std::string& _internal_workdirectory() const;
  void _internal_set_workdirectory(const std::string& value);
  std::string* _internal_mutable_workdirectory();
  public:

  // string ParentImage = 3[json_name = "ParentImage"];
  void clear_parentimage();
  const std::string& parentimage() const;
  void set_parentimage(const std::string& value);
  void set_parentimage(std::string&& value);
  void set_parentimage(const char* value);
  void set_parentimage(const char* value, size_t size);
  std::string* mutable_parentimage();
  std::string* release_parentimage();
  void set_allocated_parentimage(std::string* parentimage);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_parentimage();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_parentimage(
      std::string* parentimage);
  private:
  const std::string& _internal_parentimage() const;
  void _internal_set_parentimage(const std::string& value);
  std::string* _internal_mutable_parentimage();
  public:

  // string LsmProfile = 16[json_name = "LsmProfile"];
  void clear_lsmprofile();
  const std::string& lsmprofile() const;
  void set_lsmprofile(const std::string& value);
  void set_lsmprofile(std::string&& value);
  void set_lsmprofile(const char* value);
  void set_lsmprofile(const char* value, size_t size);
  std::string* mutable_lsmprofile();
  std::string* release_lsmprofile();
  void set_allocated_lsmprofile(std::string* lsmprofile);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_lsmprofile();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_lsmprofile(
      std::string* lsmprofile);
  private:
  const std::string& _internal_lsmprofile() const;
  void _internal_set_lsmprofile(const std::string& value);
  std::string* _internal_mutable_lsmprofile();
  public:

  // string LsmMountContext = 17[json_name = "LsmMountContext"];
  void clear_lsmmountcontext();
  const std::string& lsmmountcontext() const;
  void set_lsmmountcontext(const std::string& value);
  void set_lsmmountcontext(std::string&& value);
  void set_lsmmountcontext(const char* value);
  void set_lsmmountcontext(const char* value, size_t size);
  std::string* mutable_lsmmountcontext();
  std::string* release_lsmmountcontext();
  void set_allocated_lsmmountcontext(std::string* lsmmountcontext);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_lsmmountcontext();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_lsmmountcontext(
      std::string* lsmmountcontext);
  private:
  const std::string& _internal_lsmmountcontext() const;
  void _internal_set_lsmmountcontext(const std::string& value);
  std::string* _internal_mutable_lsmmountcontext();
  public:

  // bool LeaveRunning = 4[json_name = "LeaveRunning"];
  void clear_leaverunning();
  bool leaverunning() const;
  void set_leaverunning(bool value);
  private:
  bool _internal_leaverunning() const;
  void _internal_set_leaverunning(bool value);
  public:

  // bool TcpEstablished = 5[json_name = "TcpEstablished"];
  void clear_tcpestablished();
  bool tcpestablished() const;
  void set_tcpestablished(bool value);
  private:
  bool _internal_tcpestablished() const;
  void _internal_set_tcpestablished(bool value);
  public:

  // bool ExternalUnixConnections = 6[json_name = "ExternalUnixConnections"];
  void clear_externalunixconnections();
  bool externalunixconnections() const;
  void set_externalunixconnections(bool value);
  private:
  bool _internal_externalunixconnections() const;
  void _internal_set_externalunixconnections(bool value);
  public:

  // bool ShellJob = 7[json_name = "ShellJob"];
  void clear_shelljob();
  bool shelljob() const;
  void set_shelljob(bool value);
  private:
  bool _internal_shelljob() const;
  void _internal_set_shelljob(bool value);
  public:

  // bool FileLocks = 8[json_name = "FileLocks"];
  void clear_filelocks();
  bool filelocks() const;
  void set_filelocks(bool value);
  private:
  bool _internal_filelocks() const;
  void _internal_set_filelocks(bool value);
  public:

  // bool PreDump = 9[json_name = "PreDump"];
  void clear_predump();
  bool predump() const;
  void set_predump(bool value);
  private:
  bool _internal_predump() const;
  void _internal_set_predump(bool value);
  public:

  // bool Stream = 10[json_name = "Stream"];
  void clear_stream();
  bool stream() const;
  void set_stream(bool value);
  private:
  bool _internal_stream() const;
  void _internal_set_stream(bool value);
  public:

  // bool AutoDedup = 13[json_name = "AutoDedup"];
  void clear_autodedup();
  bool autodedup() const;
  void set_autodedup(bool value);
  private:
  bool _internal_autodedup() const;
  void _internal_set_autodedup(bool value);
  public:

  // int32 EmptyNs = 12[json_name = "EmptyNs"];
  void clear_emptyns();
  ::PROTOBUF_NAMESPACE_ID::int32 emptyns() const;
  void set_emptyns(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_emptyns() const;
  void _internal_set_emptyns(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool LazyPages = 14[json_name = "LazyPages"];
  void clear_lazypages();
  bool lazypages() const;
  void set_lazypages(bool value);
  private:
  bool _internal_lazypages() const;
  void _internal_set_lazypages(bool value);
  public:

  // int32 StatusFd = 15[json_name = "StatusFd"];
  void clear_statusfd();
  ::PROTOBUF_NAMESPACE_ID::int32 statusfd() const;
  void set_statusfd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_statusfd() const;
  void _internal_set_statusfd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.CriuOpts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> external_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagesdirectory_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workdirectory_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parentimage_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lsmprofile_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lsmmountcontext_;
  bool leaverunning_;
  bool tcpestablished_;
  bool externalunixconnections_;
  bool shelljob_;
  bool filelocks_;
  bool predump_;
  bool stream_;
  bool autodedup_;
  ::PROTOBUF_NAMESPACE_ID::int32 emptyns_;
  bool lazypages_;
  ::PROTOBUF_NAMESPACE_ID::int32 statusfd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class RuncRestoreArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.RuncRestoreArgs) */ {
 public:
  inline RuncRestoreArgs() : RuncRestoreArgs(nullptr) {};
  virtual ~RuncRestoreArgs();

  RuncRestoreArgs(const RuncRestoreArgs& from);
  RuncRestoreArgs(RuncRestoreArgs&& from) noexcept
    : RuncRestoreArgs() {
    *this = ::std::move(from);
  }

  inline RuncRestoreArgs& operator=(const RuncRestoreArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuncRestoreArgs& operator=(RuncRestoreArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuncRestoreArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuncRestoreArgs* internal_default_instance() {
    return reinterpret_cast<const RuncRestoreArgs*>(
               &_RuncRestoreArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(RuncRestoreArgs& a, RuncRestoreArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(RuncRestoreArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuncRestoreArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuncRestoreArgs* New() const final {
    return CreateMaybeMessage<RuncRestoreArgs>(nullptr);
  }

  RuncRestoreArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuncRestoreArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuncRestoreArgs& from);
  void MergeFrom(const RuncRestoreArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuncRestoreArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.RuncRestoreArgs";
  }
  protected:
  explicit RuncRestoreArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerIDFieldNumber = 1,
    kImagePathFieldNumber = 2,
    kCheckpointIDFieldNumber = 5,
    kOptsFieldNumber = 3,
    kCriuOptsFieldNumber = 6,
    kTypeFieldNumber = 4,
  };
  // string ContainerID = 1[json_name = "ContainerID"];
  void clear_containerid();
  const std::string& containerid() const;
  void set_containerid(const std::string& value);
  void set_containerid(std::string&& value);
  void set_containerid(const char* value);
  void set_containerid(const char* value, size_t size);
  std::string* mutable_containerid();
  std::string* release_containerid();
  void set_allocated_containerid(std::string* containerid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_containerid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_containerid(
      std::string* containerid);
  private:
  const std::string& _internal_containerid() const;
  void _internal_set_containerid(const std::string& value);
  std::string* _internal_mutable_containerid();
  public:

  // string ImagePath = 2[json_name = "ImagePath"];
  void clear_imagepath();
  const std::string& imagepath() const;
  void set_imagepath(const std::string& value);
  void set_imagepath(std::string&& value);
  void set_imagepath(const char* value);
  void set_imagepath(const char* value, size_t size);
  std::string* mutable_imagepath();
  std::string* release_imagepath();
  void set_allocated_imagepath(std::string* imagepath);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_imagepath();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_imagepath(
      std::string* imagepath);
  private:
  const std::string& _internal_imagepath() const;
  void _internal_set_imagepath(const std::string& value);
  std::string* _internal_mutable_imagepath();
  public:

  // string CheckpointID = 5[json_name = "CheckpointID"];
  void clear_checkpointid();
  const std::string& checkpointid() const;
  void set_checkpointid(const std::string& value);
  void set_checkpointid(std::string&& value);
  void set_checkpointid(const char* value);
  void set_checkpointid(const char* value, size_t size);
  std::string* mutable_checkpointid();
  std::string* release_checkpointid();
  void set_allocated_checkpointid(std::string* checkpointid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_checkpointid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_checkpointid(
      std::string* checkpointid);
  private:
  const std::string& _internal_checkpointid() const;
  void _internal_set_checkpointid(const std::string& value);
  std::string* _internal_mutable_checkpointid();
  public:

  // .cedana.services.task.RuncOpts Opts = 3[json_name = "Opts"];
  bool has_opts() const;
  private:
  bool _internal_has_opts() const;
  public:
  void clear_opts();
  const ::cedana::services::task::RuncOpts& opts() const;
  ::cedana::services::task::RuncOpts* release_opts();
  ::cedana::services::task::RuncOpts* mutable_opts();
  void set_allocated_opts(::cedana::services::task::RuncOpts* opts);
  private:
  const ::cedana::services::task::RuncOpts& _internal_opts() const;
  ::cedana::services::task::RuncOpts* _internal_mutable_opts();
  public:
  void unsafe_arena_set_allocated_opts(
      ::cedana::services::task::RuncOpts* opts);
  ::cedana::services::task::RuncOpts* unsafe_arena_release_opts();

  // .cedana.services.task.CriuOpts CriuOpts = 6[json_name = "CriuOpts"];
  bool has_criuopts() const;
  private:
  bool _internal_has_criuopts() const;
  public:
  void clear_criuopts();
  const ::cedana::services::task::CriuOpts& criuopts() const;
  ::cedana::services::task::CriuOpts* release_criuopts();
  ::cedana::services::task::CriuOpts* mutable_criuopts();
  void set_allocated_criuopts(::cedana::services::task::CriuOpts* criuopts);
  private:
  const ::cedana::services::task::CriuOpts& _internal_criuopts() const;
  ::cedana::services::task::CriuOpts* _internal_mutable_criuopts();
  public:
  void unsafe_arena_set_allocated_criuopts(
      ::cedana::services::task::CriuOpts* criuopts);
  ::cedana::services::task::CriuOpts* unsafe_arena_release_criuopts();

  // .cedana.services.task.CRType Type = 4[json_name = "Type"];
  void clear_type();
  ::cedana::services::task::CRType type() const;
  void set_type(::cedana::services::task::CRType value);
  private:
  ::cedana::services::task::CRType _internal_type() const;
  void _internal_set_type(::cedana::services::task::CRType value);
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.RuncRestoreArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr containerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagepath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checkpointid_;
  ::cedana::services::task::RuncOpts* opts_;
  ::cedana::services::task::CriuOpts* criuopts_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class RuncRestoreResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.RuncRestoreResp) */ {
 public:
  inline RuncRestoreResp() : RuncRestoreResp(nullptr) {};
  virtual ~RuncRestoreResp();

  RuncRestoreResp(const RuncRestoreResp& from);
  RuncRestoreResp(RuncRestoreResp&& from) noexcept
    : RuncRestoreResp() {
    *this = ::std::move(from);
  }

  inline RuncRestoreResp& operator=(const RuncRestoreResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuncRestoreResp& operator=(RuncRestoreResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuncRestoreResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuncRestoreResp* internal_default_instance() {
    return reinterpret_cast<const RuncRestoreResp*>(
               &_RuncRestoreResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(RuncRestoreResp& a, RuncRestoreResp& b) {
    a.Swap(&b);
  }
  inline void Swap(RuncRestoreResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuncRestoreResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuncRestoreResp* New() const final {
    return CreateMaybeMessage<RuncRestoreResp>(nullptr);
  }

  RuncRestoreResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuncRestoreResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuncRestoreResp& from);
  void MergeFrom(const RuncRestoreResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuncRestoreResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.RuncRestoreResp";
  }
  protected:
  explicit RuncRestoreResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kStateFieldNumber = 2,
    kRestoreStatsFieldNumber = 3,
  };
  // string Message = 1[json_name = "Message"];
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .cedana.services.task.ProcessState State = 2[json_name = "State"];
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::cedana::services::task::ProcessState& state() const;
  ::cedana::services::task::ProcessState* release_state();
  ::cedana::services::task::ProcessState* mutable_state();
  void set_allocated_state(::cedana::services::task::ProcessState* state);
  private:
  const ::cedana::services::task::ProcessState& _internal_state() const;
  ::cedana::services::task::ProcessState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::cedana::services::task::ProcessState* state);
  ::cedana::services::task::ProcessState* unsafe_arena_release_state();

  // .cedana.services.task.RestoreStats RestoreStats = 3[json_name = "RestoreStats"];
  bool has_restorestats() const;
  private:
  bool _internal_has_restorestats() const;
  public:
  void clear_restorestats();
  const ::cedana::services::task::RestoreStats& restorestats() const;
  ::cedana::services::task::RestoreStats* release_restorestats();
  ::cedana::services::task::RestoreStats* mutable_restorestats();
  void set_allocated_restorestats(::cedana::services::task::RestoreStats* restorestats);
  private:
  const ::cedana::services::task::RestoreStats& _internal_restorestats() const;
  ::cedana::services::task::RestoreStats* _internal_mutable_restorestats();
  public:
  void unsafe_arena_set_allocated_restorestats(
      ::cedana::services::task::RestoreStats* restorestats);
  ::cedana::services::task::RestoreStats* unsafe_arena_release_restorestats();

  // @@protoc_insertion_point(class_scope:cedana.services.task.RuncRestoreResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::cedana::services::task::ProcessState* state_;
  ::cedana::services::task::RestoreStats* restorestats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class RuncOpts PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.RuncOpts) */ {
 public:
  inline RuncOpts() : RuncOpts(nullptr) {};
  virtual ~RuncOpts();

  RuncOpts(const RuncOpts& from);
  RuncOpts(RuncOpts&& from) noexcept
    : RuncOpts() {
    *this = ::std::move(from);
  }

  inline RuncOpts& operator=(const RuncOpts& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuncOpts& operator=(RuncOpts&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuncOpts& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuncOpts* internal_default_instance() {
    return reinterpret_cast<const RuncOpts*>(
               &_RuncOpts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(RuncOpts& a, RuncOpts& b) {
    a.Swap(&b);
  }
  inline void Swap(RuncOpts* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuncOpts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuncOpts* New() const final {
    return CreateMaybeMessage<RuncOpts>(nullptr);
  }

  RuncOpts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuncOpts>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuncOpts& from);
  void MergeFrom(const RuncOpts& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuncOpts* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.RuncOpts";
  }
  protected:
  explicit RuncOpts(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootFieldNumber = 1,
    kContainerIDFieldNumber = 2,
    kBundleFieldNumber = 3,
    kRootlessFieldNumber = 8,
    kConsoleSocketFieldNumber = 11,
    kPidFileFieldNumber = 13,
    kSystemdCgroupFieldNumber = 4,
    kNoPivotFieldNumber = 5,
    kNoMountFallbackFieldNumber = 6,
    kNoNewKeyringFieldNumber = 7,
    kNoSubreaperFieldNumber = 9,
    kKeepFieldNumber = 10,
    kDetachFieldNumber = 12,
    kPreserveFdsFieldNumber = 14,
    kNetPidFieldNumber = 15,
  };
  // string Root = 1[json_name = "Root"];
  void clear_root();
  const std::string& root() const;
  void set_root(const std::string& value);
  void set_root(std::string&& value);
  void set_root(const char* value);
  void set_root(const char* value, size_t size);
  std::string* mutable_root();
  std::string* release_root();
  void set_allocated_root(std::string* root);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_root();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_root(
      std::string* root);
  private:
  const std::string& _internal_root() const;
  void _internal_set_root(const std::string& value);
  std::string* _internal_mutable_root();
  public:

  // string ContainerID = 2[json_name = "ContainerID"];
  void clear_containerid();
  const std::string& containerid() const;
  void set_containerid(const std::string& value);
  void set_containerid(std::string&& value);
  void set_containerid(const char* value);
  void set_containerid(const char* value, size_t size);
  std::string* mutable_containerid();
  std::string* release_containerid();
  void set_allocated_containerid(std::string* containerid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_containerid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_containerid(
      std::string* containerid);
  private:
  const std::string& _internal_containerid() const;
  void _internal_set_containerid(const std::string& value);
  std::string* _internal_mutable_containerid();
  public:

  // string Bundle = 3[json_name = "Bundle"];
  void clear_bundle();
  const std::string& bundle() const;
  void set_bundle(const std::string& value);
  void set_bundle(std::string&& value);
  void set_bundle(const char* value);
  void set_bundle(const char* value, size_t size);
  std::string* mutable_bundle();
  std::string* release_bundle();
  void set_allocated_bundle(std::string* bundle);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bundle();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bundle(
      std::string* bundle);
  private:
  const std::string& _internal_bundle() const;
  void _internal_set_bundle(const std::string& value);
  std::string* _internal_mutable_bundle();
  public:

  // string Rootless = 8[json_name = "Rootless"];
  void clear_rootless();
  const std::string& rootless() const;
  void set_rootless(const std::string& value);
  void set_rootless(std::string&& value);
  void set_rootless(const char* value);
  void set_rootless(const char* value, size_t size);
  std::string* mutable_rootless();
  std::string* release_rootless();
  void set_allocated_rootless(std::string* rootless);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rootless();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rootless(
      std::string* rootless);
  private:
  const std::string& _internal_rootless() const;
  void _internal_set_rootless(const std::string& value);
  std::string* _internal_mutable_rootless();
  public:

  // string ConsoleSocket = 11[json_name = "ConsoleSocket"];
  void clear_consolesocket();
  const std::string& consolesocket() const;
  void set_consolesocket(const std::string& value);
  void set_consolesocket(std::string&& value);
  void set_consolesocket(const char* value);
  void set_consolesocket(const char* value, size_t size);
  std::string* mutable_consolesocket();
  std::string* release_consolesocket();
  void set_allocated_consolesocket(std::string* consolesocket);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_consolesocket();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_consolesocket(
      std::string* consolesocket);
  private:
  const std::string& _internal_consolesocket() const;
  void _internal_set_consolesocket(const std::string& value);
  std::string* _internal_mutable_consolesocket();
  public:

  // string PidFile = 13[json_name = "PidFile"];
  void clear_pidfile();
  const std::string& pidfile() const;
  void set_pidfile(const std::string& value);
  void set_pidfile(std::string&& value);
  void set_pidfile(const char* value);
  void set_pidfile(const char* value, size_t size);
  std::string* mutable_pidfile();
  std::string* release_pidfile();
  void set_allocated_pidfile(std::string* pidfile);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pidfile();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pidfile(
      std::string* pidfile);
  private:
  const std::string& _internal_pidfile() const;
  void _internal_set_pidfile(const std::string& value);
  std::string* _internal_mutable_pidfile();
  public:

  // bool SystemdCgroup = 4[json_name = "SystemdCgroup"];
  void clear_systemdcgroup();
  bool systemdcgroup() const;
  void set_systemdcgroup(bool value);
  private:
  bool _internal_systemdcgroup() const;
  void _internal_set_systemdcgroup(bool value);
  public:

  // bool NoPivot = 5[json_name = "NoPivot"];
  void clear_nopivot();
  bool nopivot() const;
  void set_nopivot(bool value);
  private:
  bool _internal_nopivot() const;
  void _internal_set_nopivot(bool value);
  public:

  // bool NoMountFallback = 6[json_name = "NoMountFallback"];
  void clear_nomountfallback();
  bool nomountfallback() const;
  void set_nomountfallback(bool value);
  private:
  bool _internal_nomountfallback() const;
  void _internal_set_nomountfallback(bool value);
  public:

  // bool NoNewKeyring = 7[json_name = "NoNewKeyring"];
  void clear_nonewkeyring();
  bool nonewkeyring() const;
  void set_nonewkeyring(bool value);
  private:
  bool _internal_nonewkeyring() const;
  void _internal_set_nonewkeyring(bool value);
  public:

  // bool NoSubreaper = 9[json_name = "NoSubreaper"];
  void clear_nosubreaper();
  bool nosubreaper() const;
  void set_nosubreaper(bool value);
  private:
  bool _internal_nosubreaper() const;
  void _internal_set_nosubreaper(bool value);
  public:

  // bool Keep = 10[json_name = "Keep"];
  void clear_keep();
  bool keep() const;
  void set_keep(bool value);
  private:
  bool _internal_keep() const;
  void _internal_set_keep(bool value);
  public:

  // bool Detach = 12[json_name = "Detach"];
  void clear_detach();
  bool detach() const;
  void set_detach(bool value);
  private:
  bool _internal_detach() const;
  void _internal_set_detach(bool value);
  public:

  // int32 PreserveFds = 14[json_name = "PreserveFds"];
  void clear_preservefds();
  ::PROTOBUF_NAMESPACE_ID::int32 preservefds() const;
  void set_preservefds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_preservefds() const;
  void _internal_set_preservefds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 NetPid = 15[json_name = "NetPid"];
  void clear_netpid();
  ::PROTOBUF_NAMESPACE_ID::int32 netpid() const;
  void set_netpid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_netpid() const;
  void _internal_set_netpid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.RuncOpts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr containerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bundle_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rootless_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consolesocket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pidfile_;
  bool systemdcgroup_;
  bool nopivot_;
  bool nomountfallback_;
  bool nonewkeyring_;
  bool nosubreaper_;
  bool keep_;
  bool detach_;
  ::PROTOBUF_NAMESPACE_ID::int32 preservefds_;
  ::PROTOBUF_NAMESPACE_ID::int32 netpid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class RuncQueryArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.RuncQueryArgs) */ {
 public:
  inline RuncQueryArgs() : RuncQueryArgs(nullptr) {};
  virtual ~RuncQueryArgs();

  RuncQueryArgs(const RuncQueryArgs& from);
  RuncQueryArgs(RuncQueryArgs&& from) noexcept
    : RuncQueryArgs() {
    *this = ::std::move(from);
  }

  inline RuncQueryArgs& operator=(const RuncQueryArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuncQueryArgs& operator=(RuncQueryArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuncQueryArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuncQueryArgs* internal_default_instance() {
    return reinterpret_cast<const RuncQueryArgs*>(
               &_RuncQueryArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(RuncQueryArgs& a, RuncQueryArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(RuncQueryArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuncQueryArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuncQueryArgs* New() const final {
    return CreateMaybeMessage<RuncQueryArgs>(nullptr);
  }

  RuncQueryArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuncQueryArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuncQueryArgs& from);
  void MergeFrom(const RuncQueryArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuncQueryArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.RuncQueryArgs";
  }
  protected:
  explicit RuncQueryArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerNamesFieldNumber = 3,
    kSandboxNamesFieldNumber = 4,
    kRootFieldNumber = 1,
    kNamespaceFieldNumber = 2,
  };
  // repeated string ContainerNames = 3[json_name = "ContainerNames"];
  int containernames_size() const;
  private:
  int _internal_containernames_size() const;
  public:
  void clear_containernames();
  const std::string& containernames(int index) const;
  std::string* mutable_containernames(int index);
  void set_containernames(int index, const std::string& value);
  void set_containernames(int index, std::string&& value);
  void set_containernames(int index, const char* value);
  void set_containernames(int index, const char* value, size_t size);
  std::string* add_containernames();
  void add_containernames(const std::string& value);
  void add_containernames(std::string&& value);
  void add_containernames(const char* value);
  void add_containernames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& containernames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_containernames();
  private:
  const std::string& _internal_containernames(int index) const;
  std::string* _internal_add_containernames();
  public:

  // repeated string SandboxNames = 4[json_name = "SandboxNames"];
  int sandboxnames_size() const;
  private:
  int _internal_sandboxnames_size() const;
  public:
  void clear_sandboxnames();
  const std::string& sandboxnames(int index) const;
  std::string* mutable_sandboxnames(int index);
  void set_sandboxnames(int index, const std::string& value);
  void set_sandboxnames(int index, std::string&& value);
  void set_sandboxnames(int index, const char* value);
  void set_sandboxnames(int index, const char* value, size_t size);
  std::string* add_sandboxnames();
  void add_sandboxnames(const std::string& value);
  void add_sandboxnames(std::string&& value);
  void add_sandboxnames(const char* value);
  void add_sandboxnames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& sandboxnames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_sandboxnames();
  private:
  const std::string& _internal_sandboxnames(int index) const;
  std::string* _internal_add_sandboxnames();
  public:

  // string Root = 1[json_name = "Root"];
  void clear_root();
  const std::string& root() const;
  void set_root(const std::string& value);
  void set_root(std::string&& value);
  void set_root(const char* value);
  void set_root(const char* value, size_t size);
  std::string* mutable_root();
  std::string* release_root();
  void set_allocated_root(std::string* root);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_root();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_root(
      std::string* root);
  private:
  const std::string& _internal_root() const;
  void _internal_set_root(const std::string& value);
  std::string* _internal_mutable_root();
  public:

  // string Namespace = 2[json_name = "Namespace"];
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_namespace_();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_namespace_(
      std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.RuncQueryArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> containernames_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> sandboxnames_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class RuncQueryResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.RuncQueryResp) */ {
 public:
  inline RuncQueryResp() : RuncQueryResp(nullptr) {};
  virtual ~RuncQueryResp();

  RuncQueryResp(const RuncQueryResp& from);
  RuncQueryResp(RuncQueryResp&& from) noexcept
    : RuncQueryResp() {
    *this = ::std::move(from);
  }

  inline RuncQueryResp& operator=(const RuncQueryResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuncQueryResp& operator=(RuncQueryResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuncQueryResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuncQueryResp* internal_default_instance() {
    return reinterpret_cast<const RuncQueryResp*>(
               &_RuncQueryResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(RuncQueryResp& a, RuncQueryResp& b) {
    a.Swap(&b);
  }
  inline void Swap(RuncQueryResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuncQueryResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuncQueryResp* New() const final {
    return CreateMaybeMessage<RuncQueryResp>(nullptr);
  }

  RuncQueryResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuncQueryResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuncQueryResp& from);
  void MergeFrom(const RuncQueryResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuncQueryResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.RuncQueryResp";
  }
  protected:
  explicit RuncQueryResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainersFieldNumber = 1,
  };
  // repeated .cedana.services.task.RuncContainer Containers = 1[json_name = "Containers"];
  int containers_size() const;
  private:
  int _internal_containers_size() const;
  public:
  void clear_containers();
  ::cedana::services::task::RuncContainer* mutable_containers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedana::services::task::RuncContainer >*
      mutable_containers();
  private:
  const ::cedana::services::task::RuncContainer& _internal_containers(int index) const;
  ::cedana::services::task::RuncContainer* _internal_add_containers();
  public:
  const ::cedana::services::task::RuncContainer& containers(int index) const;
  ::cedana::services::task::RuncContainer* add_containers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedana::services::task::RuncContainer >&
      containers() const;

  // @@protoc_insertion_point(class_scope:cedana.services.task.RuncQueryResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedana::services::task::RuncContainer > containers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class RuncContainer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.RuncContainer) */ {
 public:
  inline RuncContainer() : RuncContainer(nullptr) {};
  virtual ~RuncContainer();

  RuncContainer(const RuncContainer& from);
  RuncContainer(RuncContainer&& from) noexcept
    : RuncContainer() {
    *this = ::std::move(from);
  }

  inline RuncContainer& operator=(const RuncContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuncContainer& operator=(RuncContainer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuncContainer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuncContainer* internal_default_instance() {
    return reinterpret_cast<const RuncContainer*>(
               &_RuncContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(RuncContainer& a, RuncContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(RuncContainer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuncContainer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuncContainer* New() const final {
    return CreateMaybeMessage<RuncContainer>(nullptr);
  }

  RuncContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuncContainer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuncContainer& from);
  void MergeFrom(const RuncContainer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuncContainer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.RuncContainer";
  }
  protected:
  explicit RuncContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
    kBundlePathFieldNumber = 2,
    kContainerNameFieldNumber = 3,
    kImageNameFieldNumber = 4,
    kSandboxIdFieldNumber = 5,
    kSandboxNameFieldNumber = 6,
    kSandboxUidFieldNumber = 7,
  };
  // string ID = 1[json_name = "ID"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string BundlePath = 2[json_name = "BundlePath"];
  void clear_bundlepath();
  const std::string& bundlepath() const;
  void set_bundlepath(const std::string& value);
  void set_bundlepath(std::string&& value);
  void set_bundlepath(const char* value);
  void set_bundlepath(const char* value, size_t size);
  std::string* mutable_bundlepath();
  std::string* release_bundlepath();
  void set_allocated_bundlepath(std::string* bundlepath);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bundlepath();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bundlepath(
      std::string* bundlepath);
  private:
  const std::string& _internal_bundlepath() const;
  void _internal_set_bundlepath(const std::string& value);
  std::string* _internal_mutable_bundlepath();
  public:

  // string ContainerName = 3[json_name = "ContainerName"];
  void clear_containername();
  const std::string& containername() const;
  void set_containername(const std::string& value);
  void set_containername(std::string&& value);
  void set_containername(const char* value);
  void set_containername(const char* value, size_t size);
  std::string* mutable_containername();
  std::string* release_containername();
  void set_allocated_containername(std::string* containername);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_containername();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_containername(
      std::string* containername);
  private:
  const std::string& _internal_containername() const;
  void _internal_set_containername(const std::string& value);
  std::string* _internal_mutable_containername();
  public:

  // string ImageName = 4[json_name = "ImageName"];
  void clear_imagename();
  const std::string& imagename() const;
  void set_imagename(const std::string& value);
  void set_imagename(std::string&& value);
  void set_imagename(const char* value);
  void set_imagename(const char* value, size_t size);
  std::string* mutable_imagename();
  std::string* release_imagename();
  void set_allocated_imagename(std::string* imagename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_imagename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_imagename(
      std::string* imagename);
  private:
  const std::string& _internal_imagename() const;
  void _internal_set_imagename(const std::string& value);
  std::string* _internal_mutable_imagename();
  public:

  // string SandboxId = 5[json_name = "SandboxId"];
  void clear_sandboxid();
  const std::string& sandboxid() const;
  void set_sandboxid(const std::string& value);
  void set_sandboxid(std::string&& value);
  void set_sandboxid(const char* value);
  void set_sandboxid(const char* value, size_t size);
  std::string* mutable_sandboxid();
  std::string* release_sandboxid();
  void set_allocated_sandboxid(std::string* sandboxid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sandboxid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sandboxid(
      std::string* sandboxid);
  private:
  const std::string& _internal_sandboxid() const;
  void _internal_set_sandboxid(const std::string& value);
  std::string* _internal_mutable_sandboxid();
  public:

  // string SandboxName = 6[json_name = "SandboxName"];
  void clear_sandboxname();
  const std::string& sandboxname() const;
  void set_sandboxname(const std::string& value);
  void set_sandboxname(std::string&& value);
  void set_sandboxname(const char* value);
  void set_sandboxname(const char* value, size_t size);
  std::string* mutable_sandboxname();
  std::string* release_sandboxname();
  void set_allocated_sandboxname(std::string* sandboxname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sandboxname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sandboxname(
      std::string* sandboxname);
  private:
  const std::string& _internal_sandboxname() const;
  void _internal_set_sandboxname(const std::string& value);
  std::string* _internal_mutable_sandboxname();
  public:

  // string SandboxUid = 7[json_name = "SandboxUid"];
  void clear_sandboxuid();
  const std::string& sandboxuid() const;
  void set_sandboxuid(const std::string& value);
  void set_sandboxuid(std::string&& value);
  void set_sandboxuid(const char* value);
  void set_sandboxuid(const char* value, size_t size);
  std::string* mutable_sandboxuid();
  std::string* release_sandboxuid();
  void set_allocated_sandboxuid(std::string* sandboxuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sandboxuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sandboxuid(
      std::string* sandboxuid);
  private:
  const std::string& _internal_sandboxuid() const;
  void _internal_set_sandboxuid(const std::string& value);
  std::string* _internal_mutable_sandboxuid();
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.RuncContainer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bundlepath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr containername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sandboxid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sandboxname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sandboxuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class RuncGetPausePidArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.RuncGetPausePidArgs) */ {
 public:
  inline RuncGetPausePidArgs() : RuncGetPausePidArgs(nullptr) {};
  virtual ~RuncGetPausePidArgs();

  RuncGetPausePidArgs(const RuncGetPausePidArgs& from);
  RuncGetPausePidArgs(RuncGetPausePidArgs&& from) noexcept
    : RuncGetPausePidArgs() {
    *this = ::std::move(from);
  }

  inline RuncGetPausePidArgs& operator=(const RuncGetPausePidArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuncGetPausePidArgs& operator=(RuncGetPausePidArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuncGetPausePidArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuncGetPausePidArgs* internal_default_instance() {
    return reinterpret_cast<const RuncGetPausePidArgs*>(
               &_RuncGetPausePidArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(RuncGetPausePidArgs& a, RuncGetPausePidArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(RuncGetPausePidArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuncGetPausePidArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuncGetPausePidArgs* New() const final {
    return CreateMaybeMessage<RuncGetPausePidArgs>(nullptr);
  }

  RuncGetPausePidArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuncGetPausePidArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuncGetPausePidArgs& from);
  void MergeFrom(const RuncGetPausePidArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuncGetPausePidArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.RuncGetPausePidArgs";
  }
  protected:
  explicit RuncGetPausePidArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBundlePathFieldNumber = 1,
  };
  // string BundlePath = 1[json_name = "BundlePath"];
  void clear_bundlepath();
  const std::string& bundlepath() const;
  void set_bundlepath(const std::string& value);
  void set_bundlepath(std::string&& value);
  void set_bundlepath(const char* value);
  void set_bundlepath(const char* value, size_t size);
  std::string* mutable_bundlepath();
  std::string* release_bundlepath();
  void set_allocated_bundlepath(std::string* bundlepath);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bundlepath();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bundlepath(
      std::string* bundlepath);
  private:
  const std::string& _internal_bundlepath() const;
  void _internal_set_bundlepath(const std::string& value);
  std::string* _internal_mutable_bundlepath();
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.RuncGetPausePidArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bundlepath_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class RuncGetPausePidResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.RuncGetPausePidResp) */ {
 public:
  inline RuncGetPausePidResp() : RuncGetPausePidResp(nullptr) {};
  virtual ~RuncGetPausePidResp();

  RuncGetPausePidResp(const RuncGetPausePidResp& from);
  RuncGetPausePidResp(RuncGetPausePidResp&& from) noexcept
    : RuncGetPausePidResp() {
    *this = ::std::move(from);
  }

  inline RuncGetPausePidResp& operator=(const RuncGetPausePidResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuncGetPausePidResp& operator=(RuncGetPausePidResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuncGetPausePidResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuncGetPausePidResp* internal_default_instance() {
    return reinterpret_cast<const RuncGetPausePidResp*>(
               &_RuncGetPausePidResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(RuncGetPausePidResp& a, RuncGetPausePidResp& b) {
    a.Swap(&b);
  }
  inline void Swap(RuncGetPausePidResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuncGetPausePidResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuncGetPausePidResp* New() const final {
    return CreateMaybeMessage<RuncGetPausePidResp>(nullptr);
  }

  RuncGetPausePidResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuncGetPausePidResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuncGetPausePidResp& from);
  void MergeFrom(const RuncGetPausePidResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuncGetPausePidResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.RuncGetPausePidResp";
  }
  protected:
  explicit RuncGetPausePidResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPausePidFieldNumber = 1,
  };
  // int64 PausePid = 1[json_name = "PausePid"];
  void clear_pausepid();
  ::PROTOBUF_NAMESPACE_ID::int64 pausepid() const;
  void set_pausepid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_pausepid() const;
  void _internal_set_pausepid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.RuncGetPausePidResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 pausepid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class LogStreamingArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.LogStreamingArgs) */ {
 public:
  inline LogStreamingArgs() : LogStreamingArgs(nullptr) {};
  virtual ~LogStreamingArgs();

  LogStreamingArgs(const LogStreamingArgs& from);
  LogStreamingArgs(LogStreamingArgs&& from) noexcept
    : LogStreamingArgs() {
    *this = ::std::move(from);
  }

  inline LogStreamingArgs& operator=(const LogStreamingArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogStreamingArgs& operator=(LogStreamingArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogStreamingArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogStreamingArgs* internal_default_instance() {
    return reinterpret_cast<const LogStreamingArgs*>(
               &_LogStreamingArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(LogStreamingArgs& a, LogStreamingArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(LogStreamingArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogStreamingArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogStreamingArgs* New() const final {
    return CreateMaybeMessage<LogStreamingArgs>(nullptr);
  }

  LogStreamingArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogStreamingArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogStreamingArgs& from);
  void MergeFrom(const LogStreamingArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogStreamingArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.LogStreamingArgs";
  }
  protected:
  explicit LogStreamingArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kSourceFieldNumber = 2,
    kLevelFieldNumber = 3,
    kMsgFieldNumber = 4,
  };
  // string Timestamp = 1[json_name = "Timestamp"];
  void clear_timestamp();
  const std::string& timestamp() const;
  void set_timestamp(const std::string& value);
  void set_timestamp(std::string&& value);
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  std::string* mutable_timestamp();
  std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_timestamp();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_timestamp(
      std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // string Source = 2[json_name = "Source"];
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source(
      std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // string Level = 3[json_name = "Level"];
  void clear_level();
  const std::string& level() const;
  void set_level(const std::string& value);
  void set_level(std::string&& value);
  void set_level(const char* value);
  void set_level(const char* value, size_t size);
  std::string* mutable_level();
  std::string* release_level();
  void set_allocated_level(std::string* level);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_level();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_level(
      std::string* level);
  private:
  const std::string& _internal_level() const;
  void _internal_set_level(const std::string& value);
  std::string* _internal_mutable_level();
  public:

  // string Msg = 4[json_name = "Msg"];
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.LogStreamingArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class LogStreamingResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.LogStreamingResp) */ {
 public:
  inline LogStreamingResp() : LogStreamingResp(nullptr) {};
  virtual ~LogStreamingResp();

  LogStreamingResp(const LogStreamingResp& from);
  LogStreamingResp(LogStreamingResp&& from) noexcept
    : LogStreamingResp() {
    *this = ::std::move(from);
  }

  inline LogStreamingResp& operator=(const LogStreamingResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogStreamingResp& operator=(LogStreamingResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogStreamingResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogStreamingResp* internal_default_instance() {
    return reinterpret_cast<const LogStreamingResp*>(
               &_LogStreamingResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(LogStreamingResp& a, LogStreamingResp& b) {
    a.Swap(&b);
  }
  inline void Swap(LogStreamingResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogStreamingResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogStreamingResp* New() const final {
    return CreateMaybeMessage<LogStreamingResp>(nullptr);
  }

  LogStreamingResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogStreamingResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogStreamingResp& from);
  void MergeFrom(const LogStreamingResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogStreamingResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.LogStreamingResp";
  }
  protected:
  explicit LogStreamingResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // string Status = 1[json_name = "Status"];
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_status();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_status(
      std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.LogStreamingResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class ProcessState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.ProcessState) */ {
 public:
  inline ProcessState() : ProcessState(nullptr) {};
  virtual ~ProcessState();

  ProcessState(const ProcessState& from);
  ProcessState(ProcessState&& from) noexcept
    : ProcessState() {
    *this = ::std::move(from);
  }

  inline ProcessState& operator=(const ProcessState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessState& operator=(ProcessState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessState* internal_default_instance() {
    return reinterpret_cast<const ProcessState*>(
               &_ProcessState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(ProcessState& a, ProcessState& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessState* New() const final {
    return CreateMaybeMessage<ProcessState>(nullptr);
  }

  ProcessState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessState& from);
  void MergeFrom(const ProcessState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.ProcessState";
  }
  protected:
  explicit ProcessState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteStateFieldNumber = 10,
    kUIDsFieldNumber = 16,
    kGIDsFieldNumber = 17,
    kGroupsFieldNumber = 18,
    kTaskFieldNumber = 2,
    kContainerIDFieldNumber = 4,
    kStartedAtFieldNumber = 5,
    kCheckpointPathFieldNumber = 7,
    kJIDFieldNumber = 12,
    kProcessInfoFieldNumber = 6,
    kHostInfoFieldNumber = 13,
    kCPUInfoFieldNumber = 14,
    kMemoryInfoFieldNumber = 15,
    kPIDFieldNumber = 1,
    kCheckpointStateFieldNumber = 8,
    kJobStateFieldNumber = 9,
    kGPUCheckpointedFieldNumber = 11,
  };
  // repeated .cedana.services.task.RemoteState RemoteState = 10[json_name = "RemoteState"];
  int remotestate_size() const;
  private:
  int _internal_remotestate_size() const;
  public:
  void clear_remotestate();
  ::cedana::services::task::RemoteState* mutable_remotestate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedana::services::task::RemoteState >*
      mutable_remotestate();
  private:
  const ::cedana::services::task::RemoteState& _internal_remotestate(int index) const;
  ::cedana::services::task::RemoteState* _internal_add_remotestate();
  public:
  const ::cedana::services::task::RemoteState& remotestate(int index) const;
  ::cedana::services::task::RemoteState* add_remotestate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedana::services::task::RemoteState >&
      remotestate() const;

  // repeated int32 UIDs = 16[json_name = "UIDs"];
  int uids_size() const;
  private:
  int _internal_uids_size() const;
  public:
  void clear_uids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_uids() const;
  void _internal_add_uids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_uids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 uids(int index) const;
  void set_uids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_uids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      uids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_uids();

  // repeated int32 GIDs = 17[json_name = "GIDs"];
  int gids_size() const;
  private:
  int _internal_gids_size() const;
  public:
  void clear_gids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_gids() const;
  void _internal_add_gids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_gids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 gids(int index) const;
  void set_gids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_gids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      gids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_gids();

  // repeated int32 Groups = 18[json_name = "Groups"];
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_groups(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_groups() const;
  void _internal_add_groups(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_groups();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 groups(int index) const;
  void set_groups(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_groups(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      groups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_groups();

  // string Task = 2[json_name = "Task"];
  void clear_task();
  const std::string& task() const;
  void set_task(const std::string& value);
  void set_task(std::string&& value);
  void set_task(const char* value);
  void set_task(const char* value, size_t size);
  std::string* mutable_task();
  std::string* release_task();
  void set_allocated_task(std::string* task);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_task();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_task(
      std::string* task);
  private:
  const std::string& _internal_task() const;
  void _internal_set_task(const std::string& value);
  std::string* _internal_mutable_task();
  public:

  // string ContainerID = 4[json_name = "ContainerID"];
  void clear_containerid();
  const std::string& containerid() const;
  void set_containerid(const std::string& value);
  void set_containerid(std::string&& value);
  void set_containerid(const char* value);
  void set_containerid(const char* value, size_t size);
  std::string* mutable_containerid();
  std::string* release_containerid();
  void set_allocated_containerid(std::string* containerid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_containerid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_containerid(
      std::string* containerid);
  private:
  const std::string& _internal_containerid() const;
  void _internal_set_containerid(const std::string& value);
  std::string* _internal_mutable_containerid();
  public:

  // string StartedAt = 5[json_name = "StartedAt"];
  void clear_startedat();
  const std::string& startedat() const;
  void set_startedat(const std::string& value);
  void set_startedat(std::string&& value);
  void set_startedat(const char* value);
  void set_startedat(const char* value, size_t size);
  std::string* mutable_startedat();
  std::string* release_startedat();
  void set_allocated_startedat(std::string* startedat);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_startedat();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_startedat(
      std::string* startedat);
  private:
  const std::string& _internal_startedat() const;
  void _internal_set_startedat(const std::string& value);
  std::string* _internal_mutable_startedat();
  public:

  // string CheckpointPath = 7[json_name = "CheckpointPath"];
  void clear_checkpointpath();
  const std::string& checkpointpath() const;
  void set_checkpointpath(const std::string& value);
  void set_checkpointpath(std::string&& value);
  void set_checkpointpath(const char* value);
  void set_checkpointpath(const char* value, size_t size);
  std::string* mutable_checkpointpath();
  std::string* release_checkpointpath();
  void set_allocated_checkpointpath(std::string* checkpointpath);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_checkpointpath();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_checkpointpath(
      std::string* checkpointpath);
  private:
  const std::string& _internal_checkpointpath() const;
  void _internal_set_checkpointpath(const std::string& value);
  std::string* _internal_mutable_checkpointpath();
  public:

  // string JID = 12[json_name = "JID"];
  void clear_jid();
  const std::string& jid() const;
  void set_jid(const std::string& value);
  void set_jid(std::string&& value);
  void set_jid(const char* value);
  void set_jid(const char* value, size_t size);
  std::string* mutable_jid();
  std::string* release_jid();
  void set_allocated_jid(std::string* jid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_jid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_jid(
      std::string* jid);
  private:
  const std::string& _internal_jid() const;
  void _internal_set_jid(const std::string& value);
  std::string* _internal_mutable_jid();
  public:

  // .cedana.services.task.ProcessInfo ProcessInfo = 6[json_name = "ProcessInfo"];
  bool has_processinfo() const;
  private:
  bool _internal_has_processinfo() const;
  public:
  void clear_processinfo();
  const ::cedana::services::task::ProcessInfo& processinfo() const;
  ::cedana::services::task::ProcessInfo* release_processinfo();
  ::cedana::services::task::ProcessInfo* mutable_processinfo();
  void set_allocated_processinfo(::cedana::services::task::ProcessInfo* processinfo);
  private:
  const ::cedana::services::task::ProcessInfo& _internal_processinfo() const;
  ::cedana::services::task::ProcessInfo* _internal_mutable_processinfo();
  public:
  void unsafe_arena_set_allocated_processinfo(
      ::cedana::services::task::ProcessInfo* processinfo);
  ::cedana::services::task::ProcessInfo* unsafe_arena_release_processinfo();

  // .cedana.services.task.HostInfo HostInfo = 13[json_name = "HostInfo"];
  bool has_hostinfo() const;
  private:
  bool _internal_has_hostinfo() const;
  public:
  void clear_hostinfo();
  const ::cedana::services::task::HostInfo& hostinfo() const;
  ::cedana::services::task::HostInfo* release_hostinfo();
  ::cedana::services::task::HostInfo* mutable_hostinfo();
  void set_allocated_hostinfo(::cedana::services::task::HostInfo* hostinfo);
  private:
  const ::cedana::services::task::HostInfo& _internal_hostinfo() const;
  ::cedana::services::task::HostInfo* _internal_mutable_hostinfo();
  public:
  void unsafe_arena_set_allocated_hostinfo(
      ::cedana::services::task::HostInfo* hostinfo);
  ::cedana::services::task::HostInfo* unsafe_arena_release_hostinfo();

  // .cedana.services.task.CPUInfo CPUInfo = 14[json_name = "CPUInfo"];
  bool has_cpuinfo() const;
  private:
  bool _internal_has_cpuinfo() const;
  public:
  void clear_cpuinfo();
  const ::cedana::services::task::CPUInfo& cpuinfo() const;
  ::cedana::services::task::CPUInfo* release_cpuinfo();
  ::cedana::services::task::CPUInfo* mutable_cpuinfo();
  void set_allocated_cpuinfo(::cedana::services::task::CPUInfo* cpuinfo);
  private:
  const ::cedana::services::task::CPUInfo& _internal_cpuinfo() const;
  ::cedana::services::task::CPUInfo* _internal_mutable_cpuinfo();
  public:
  void unsafe_arena_set_allocated_cpuinfo(
      ::cedana::services::task::CPUInfo* cpuinfo);
  ::cedana::services::task::CPUInfo* unsafe_arena_release_cpuinfo();

  // .cedana.services.task.MemoryInfo MemoryInfo = 15[json_name = "MemoryInfo"];
  bool has_memoryinfo() const;
  private:
  bool _internal_has_memoryinfo() const;
  public:
  void clear_memoryinfo();
  const ::cedana::services::task::MemoryInfo& memoryinfo() const;
  ::cedana::services::task::MemoryInfo* release_memoryinfo();
  ::cedana::services::task::MemoryInfo* mutable_memoryinfo();
  void set_allocated_memoryinfo(::cedana::services::task::MemoryInfo* memoryinfo);
  private:
  const ::cedana::services::task::MemoryInfo& _internal_memoryinfo() const;
  ::cedana::services::task::MemoryInfo* _internal_mutable_memoryinfo();
  public:
  void unsafe_arena_set_allocated_memoryinfo(
      ::cedana::services::task::MemoryInfo* memoryinfo);
  ::cedana::services::task::MemoryInfo* unsafe_arena_release_memoryinfo();

  // int32 PID = 1[json_name = "PID"];
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .cedana.services.task.CheckpointState CheckpointState = 8[json_name = "CheckpointState"];
  void clear_checkpointstate();
  ::cedana::services::task::CheckpointState checkpointstate() const;
  void set_checkpointstate(::cedana::services::task::CheckpointState value);
  private:
  ::cedana::services::task::CheckpointState _internal_checkpointstate() const;
  void _internal_set_checkpointstate(::cedana::services::task::CheckpointState value);
  public:

  // .cedana.services.task.JobState JobState = 9[json_name = "JobState"];
  void clear_jobstate();
  ::cedana::services::task::JobState jobstate() const;
  void set_jobstate(::cedana::services::task::JobState value);
  private:
  ::cedana::services::task::JobState _internal_jobstate() const;
  void _internal_set_jobstate(::cedana::services::task::JobState value);
  public:

  // bool GPUCheckpointed = 11[json_name = "GPUCheckpointed"];
  void clear_gpucheckpointed();
  bool gpucheckpointed() const;
  void set_gpucheckpointed(bool value);
  private:
  bool _internal_gpucheckpointed() const;
  void _internal_set_gpucheckpointed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.ProcessState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedana::services::task::RemoteState > remotestate_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > uids_;
  mutable std::atomic<int> _uids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > gids_;
  mutable std::atomic<int> _gids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > groups_;
  mutable std::atomic<int> _groups_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr containerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr startedat_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checkpointpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jid_;
  ::cedana::services::task::ProcessInfo* processinfo_;
  ::cedana::services::task::HostInfo* hostinfo_;
  ::cedana::services::task::CPUInfo* cpuinfo_;
  ::cedana::services::task::MemoryInfo* memoryinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  int checkpointstate_;
  int jobstate_;
  bool gpucheckpointed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class RemoteState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.RemoteState) */ {
 public:
  inline RemoteState() : RemoteState(nullptr) {};
  virtual ~RemoteState();

  RemoteState(const RemoteState& from);
  RemoteState(RemoteState&& from) noexcept
    : RemoteState() {
    *this = ::std::move(from);
  }

  inline RemoteState& operator=(const RemoteState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteState& operator=(RemoteState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoteState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoteState* internal_default_instance() {
    return reinterpret_cast<const RemoteState*>(
               &_RemoteState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(RemoteState& a, RemoteState& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoteState* New() const final {
    return CreateMaybeMessage<RemoteState>(nullptr);
  }

  RemoteState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoteState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoteState& from);
  void MergeFrom(const RemoteState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.RemoteState";
  }
  protected:
  explicit RemoteState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheckpointIDFieldNumber = 1,
    kUploadIDFieldNumber = 2,
    kTimestampFieldNumber = 3,
  };
  // string CheckpointID = 1[json_name = "CheckpointID"];
  void clear_checkpointid();
  const std::string& checkpointid() const;
  void set_checkpointid(const std::string& value);
  void set_checkpointid(std::string&& value);
  void set_checkpointid(const char* value);
  void set_checkpointid(const char* value, size_t size);
  std::string* mutable_checkpointid();
  std::string* release_checkpointid();
  void set_allocated_checkpointid(std::string* checkpointid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_checkpointid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_checkpointid(
      std::string* checkpointid);
  private:
  const std::string& _internal_checkpointid() const;
  void _internal_set_checkpointid(const std::string& value);
  std::string* _internal_mutable_checkpointid();
  public:

  // string UploadID = 2[json_name = "UploadID"];
  void clear_uploadid();
  const std::string& uploadid() const;
  void set_uploadid(const std::string& value);
  void set_uploadid(std::string&& value);
  void set_uploadid(const char* value);
  void set_uploadid(const char* value, size_t size);
  std::string* mutable_uploadid();
  std::string* release_uploadid();
  void set_allocated_uploadid(std::string* uploadid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uploadid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uploadid(
      std::string* uploadid);
  private:
  const std::string& _internal_uploadid() const;
  void _internal_set_uploadid(const std::string& value);
  std::string* _internal_mutable_uploadid();
  public:

  // int64 Timestamp = 3[json_name = "Timestamp"];
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.RemoteState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checkpointid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uploadid_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class ProcessInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.ProcessInfo) */ {
 public:
  inline ProcessInfo() : ProcessInfo(nullptr) {};
  virtual ~ProcessInfo();

  ProcessInfo(const ProcessInfo& from);
  ProcessInfo(ProcessInfo&& from) noexcept
    : ProcessInfo() {
    *this = ::std::move(from);
  }

  inline ProcessInfo& operator=(const ProcessInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessInfo& operator=(ProcessInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessInfo* internal_default_instance() {
    return reinterpret_cast<const ProcessInfo*>(
               &_ProcessInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(ProcessInfo& a, ProcessInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessInfo* New() const final {
    return CreateMaybeMessage<ProcessInfo>(nullptr);
  }

  ProcessInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessInfo& from);
  void MergeFrom(const ProcessInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.ProcessInfo";
  }
  protected:
  explicit ProcessInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenFdsFieldNumber = 3,
    kOpenConnectionsFieldNumber = 5,
    kWorkingDirFieldNumber = 4,
    kStatusFieldNumber = 8,
    kPIDFieldNumber = 1,
    kAttachedToHardwareAccelFieldNumber = 2,
    kIsRunningFieldNumber = 7,
    kMemoryPercentFieldNumber = 6,
  };
  // repeated .cedana.services.task.OpenFilesStat OpenFds = 3[json_name = "OpenFds"];
  int openfds_size() const;
  private:
  int _internal_openfds_size() const;
  public:
  void clear_openfds();
  ::cedana::services::task::OpenFilesStat* mutable_openfds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedana::services::task::OpenFilesStat >*
      mutable_openfds();
  private:
  const ::cedana::services::task::OpenFilesStat& _internal_openfds(int index) const;
  ::cedana::services::task::OpenFilesStat* _internal_add_openfds();
  public:
  const ::cedana::services::task::OpenFilesStat& openfds(int index) const;
  ::cedana::services::task::OpenFilesStat* add_openfds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedana::services::task::OpenFilesStat >&
      openfds() const;

  // repeated .cedana.services.task.ConnectionStat OpenConnections = 5[json_name = "OpenConnections"];
  int openconnections_size() const;
  private:
  int _internal_openconnections_size() const;
  public:
  void clear_openconnections();
  ::cedana::services::task::ConnectionStat* mutable_openconnections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedana::services::task::ConnectionStat >*
      mutable_openconnections();
  private:
  const ::cedana::services::task::ConnectionStat& _internal_openconnections(int index) const;
  ::cedana::services::task::ConnectionStat* _internal_add_openconnections();
  public:
  const ::cedana::services::task::ConnectionStat& openconnections(int index) const;
  ::cedana::services::task::ConnectionStat* add_openconnections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedana::services::task::ConnectionStat >&
      openconnections() const;

  // string WorkingDir = 4[json_name = "WorkingDir"];
  void clear_workingdir();
  const std::string& workingdir() const;
  void set_workingdir(const std::string& value);
  void set_workingdir(std::string&& value);
  void set_workingdir(const char* value);
  void set_workingdir(const char* value, size_t size);
  std::string* mutable_workingdir();
  std::string* release_workingdir();
  void set_allocated_workingdir(std::string* workingdir);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_workingdir();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_workingdir(
      std::string* workingdir);
  private:
  const std::string& _internal_workingdir() const;
  void _internal_set_workingdir(const std::string& value);
  std::string* _internal_mutable_workingdir();
  public:

  // string Status = 8[json_name = "Status"];
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_status();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_status(
      std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // int32 PID = 1[json_name = "PID"];
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool AttachedToHardwareAccel = 2[json_name = "AttachedToHardwareAccel"];
  void clear_attachedtohardwareaccel();
  bool attachedtohardwareaccel() const;
  void set_attachedtohardwareaccel(bool value);
  private:
  bool _internal_attachedtohardwareaccel() const;
  void _internal_set_attachedtohardwareaccel(bool value);
  public:

  // bool IsRunning = 7[json_name = "IsRunning"];
  void clear_isrunning();
  bool isrunning() const;
  void set_isrunning(bool value);
  private:
  bool _internal_isrunning() const;
  void _internal_set_isrunning(bool value);
  public:

  // float MemoryPercent = 6[json_name = "MemoryPercent"];
  void clear_memorypercent();
  float memorypercent() const;
  void set_memorypercent(float value);
  private:
  float _internal_memorypercent() const;
  void _internal_set_memorypercent(float value);
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.ProcessInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedana::services::task::OpenFilesStat > openfds_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedana::services::task::ConnectionStat > openconnections_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workingdir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  bool attachedtohardwareaccel_;
  bool isrunning_;
  float memorypercent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class HostInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.HostInfo) */ {
 public:
  inline HostInfo() : HostInfo(nullptr) {};
  virtual ~HostInfo();

  HostInfo(const HostInfo& from);
  HostInfo(HostInfo&& from) noexcept
    : HostInfo() {
    *this = ::std::move(from);
  }

  inline HostInfo& operator=(const HostInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostInfo& operator=(HostInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostInfo* internal_default_instance() {
    return reinterpret_cast<const HostInfo*>(
               &_HostInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(HostInfo& a, HostInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(HostInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostInfo* New() const final {
    return CreateMaybeMessage<HostInfo>(nullptr);
  }

  HostInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostInfo& from);
  void MergeFrom(const HostInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.HostInfo";
  }
  protected:
  explicit HostInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostIDFieldNumber = 1,
    kHostnameFieldNumber = 4,
    kOSFieldNumber = 5,
    kPlatformFieldNumber = 6,
    kKernelVersionFieldNumber = 7,
    kKernelArchFieldNumber = 8,
    kVirtualizationSystemFieldNumber = 9,
    kVirtualizationRoleFieldNumber = 10,
  };
  // string HostID = 1[json_name = "HostID"];
  void clear_hostid();
  const std::string& hostid() const;
  void set_hostid(const std::string& value);
  void set_hostid(std::string&& value);
  void set_hostid(const char* value);
  void set_hostid(const char* value, size_t size);
  std::string* mutable_hostid();
  std::string* release_hostid();
  void set_allocated_hostid(std::string* hostid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hostid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hostid(
      std::string* hostid);
  private:
  const std::string& _internal_hostid() const;
  void _internal_set_hostid(const std::string& value);
  std::string* _internal_mutable_hostid();
  public:

  // string Hostname = 4[json_name = "Hostname"];
  void clear_hostname();
  const std::string& hostname() const;
  void set_hostname(const std::string& value);
  void set_hostname(std::string&& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  std::string* mutable_hostname();
  std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hostname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hostname(
      std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // string OS = 5[json_name = "OS"];
  void clear_os();
  const std::string& os() const;
  void set_os(const std::string& value);
  void set_os(std::string&& value);
  void set_os(const char* value);
  void set_os(const char* value, size_t size);
  std::string* mutable_os();
  std::string* release_os();
  void set_allocated_os(std::string* os);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_os();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_os(
      std::string* os);
  private:
  const std::string& _internal_os() const;
  void _internal_set_os(const std::string& value);
  std::string* _internal_mutable_os();
  public:

  // string Platform = 6[json_name = "Platform"];
  void clear_platform();
  const std::string& platform() const;
  void set_platform(const std::string& value);
  void set_platform(std::string&& value);
  void set_platform(const char* value);
  void set_platform(const char* value, size_t size);
  std::string* mutable_platform();
  std::string* release_platform();
  void set_allocated_platform(std::string* platform);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_platform();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_platform(
      std::string* platform);
  private:
  const std::string& _internal_platform() const;
  void _internal_set_platform(const std::string& value);
  std::string* _internal_mutable_platform();
  public:

  // string KernelVersion = 7[json_name = "KernelVersion"];
  void clear_kernelversion();
  const std::string& kernelversion() const;
  void set_kernelversion(const std::string& value);
  void set_kernelversion(std::string&& value);
  void set_kernelversion(const char* value);
  void set_kernelversion(const char* value, size_t size);
  std::string* mutable_kernelversion();
  std::string* release_kernelversion();
  void set_allocated_kernelversion(std::string* kernelversion);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_kernelversion();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_kernelversion(
      std::string* kernelversion);
  private:
  const std::string& _internal_kernelversion() const;
  void _internal_set_kernelversion(const std::string& value);
  std::string* _internal_mutable_kernelversion();
  public:

  // string KernelArch = 8[json_name = "KernelArch"];
  void clear_kernelarch();
  const std::string& kernelarch() const;
  void set_kernelarch(const std::string& value);
  void set_kernelarch(std::string&& value);
  void set_kernelarch(const char* value);
  void set_kernelarch(const char* value, size_t size);
  std::string* mutable_kernelarch();
  std::string* release_kernelarch();
  void set_allocated_kernelarch(std::string* kernelarch);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_kernelarch();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_kernelarch(
      std::string* kernelarch);
  private:
  const std::string& _internal_kernelarch() const;
  void _internal_set_kernelarch(const std::string& value);
  std::string* _internal_mutable_kernelarch();
  public:

  // string VirtualizationSystem = 9[json_name = "VirtualizationSystem"];
  void clear_virtualizationsystem();
  const std::string& virtualizationsystem() const;
  void set_virtualizationsystem(const std::string& value);
  void set_virtualizationsystem(std::string&& value);
  void set_virtualizationsystem(const char* value);
  void set_virtualizationsystem(const char* value, size_t size);
  std::string* mutable_virtualizationsystem();
  std::string* release_virtualizationsystem();
  void set_allocated_virtualizationsystem(std::string* virtualizationsystem);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_virtualizationsystem();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_virtualizationsystem(
      std::string* virtualizationsystem);
  private:
  const std::string& _internal_virtualizationsystem() const;
  void _internal_set_virtualizationsystem(const std::string& value);
  std::string* _internal_mutable_virtualizationsystem();
  public:

  // string VirtualizationRole = 10[json_name = "VirtualizationRole"];
  void clear_virtualizationrole();
  const std::string& virtualizationrole() const;
  void set_virtualizationrole(const std::string& value);
  void set_virtualizationrole(std::string&& value);
  void set_virtualizationrole(const char* value);
  void set_virtualizationrole(const char* value, size_t size);
  std::string* mutable_virtualizationrole();
  std::string* release_virtualizationrole();
  void set_allocated_virtualizationrole(std::string* virtualizationrole);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_virtualizationrole();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_virtualizationrole(
      std::string* virtualizationrole);
  private:
  const std::string& _internal_virtualizationrole() const;
  void _internal_set_virtualizationrole(const std::string& value);
  std::string* _internal_mutable_virtualizationrole();
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.HostInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr os_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platform_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kernelversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kernelarch_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr virtualizationsystem_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr virtualizationrole_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class CPUInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.CPUInfo) */ {
 public:
  inline CPUInfo() : CPUInfo(nullptr) {};
  virtual ~CPUInfo();

  CPUInfo(const CPUInfo& from);
  CPUInfo(CPUInfo&& from) noexcept
    : CPUInfo() {
    *this = ::std::move(from);
  }

  inline CPUInfo& operator=(const CPUInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPUInfo& operator=(CPUInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPUInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPUInfo* internal_default_instance() {
    return reinterpret_cast<const CPUInfo*>(
               &_CPUInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CPUInfo& a, CPUInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CPUInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPUInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPUInfo* New() const final {
    return CreateMaybeMessage<CPUInfo>(nullptr);
  }

  CPUInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPUInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPUInfo& from);
  void MergeFrom(const CPUInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPUInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.CPUInfo";
  }
  protected:
  explicit CPUInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVendorIDFieldNumber = 3,
    kFamilyFieldNumber = 4,
    kPhysicalIDFieldNumber = 5,
    kCountFieldNumber = 1,
    kCPUFieldNumber = 2,
  };
  // string VendorID = 3[json_name = "VendorID"];
  void clear_vendorid();
  const std::string& vendorid() const;
  void set_vendorid(const std::string& value);
  void set_vendorid(std::string&& value);
  void set_vendorid(const char* value);
  void set_vendorid(const char* value, size_t size);
  std::string* mutable_vendorid();
  std::string* release_vendorid();
  void set_allocated_vendorid(std::string* vendorid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_vendorid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_vendorid(
      std::string* vendorid);
  private:
  const std::string& _internal_vendorid() const;
  void _internal_set_vendorid(const std::string& value);
  std::string* _internal_mutable_vendorid();
  public:

  // string Family = 4[json_name = "Family"];
  void clear_family();
  const std::string& family() const;
  void set_family(const std::string& value);
  void set_family(std::string&& value);
  void set_family(const char* value);
  void set_family(const char* value, size_t size);
  std::string* mutable_family();
  std::string* release_family();
  void set_allocated_family(std::string* family);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_family();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_family(
      std::string* family);
  private:
  const std::string& _internal_family() const;
  void _internal_set_family(const std::string& value);
  std::string* _internal_mutable_family();
  public:

  // string PhysicalID = 5[json_name = "PhysicalID"];
  void clear_physicalid();
  const std::string& physicalid() const;
  void set_physicalid(const std::string& value);
  void set_physicalid(std::string&& value);
  void set_physicalid(const char* value);
  void set_physicalid(const char* value, size_t size);
  std::string* mutable_physicalid();
  std::string* release_physicalid();
  void set_allocated_physicalid(std::string* physicalid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_physicalid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_physicalid(
      std::string* physicalid);
  private:
  const std::string& _internal_physicalid() const;
  void _internal_set_physicalid(const std::string& value);
  std::string* _internal_mutable_physicalid();
  public:

  // int32 Count = 1[json_name = "Count"];
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 CPU = 2[json_name = "CPU"];
  void clear_cpu();
  ::PROTOBUF_NAMESPACE_ID::int32 cpu() const;
  void set_cpu(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cpu() const;
  void _internal_set_cpu(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.CPUInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendorid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr family_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr physicalid_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 cpu_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class MemoryInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.MemoryInfo) */ {
 public:
  inline MemoryInfo() : MemoryInfo(nullptr) {};
  virtual ~MemoryInfo();

  MemoryInfo(const MemoryInfo& from);
  MemoryInfo(MemoryInfo&& from) noexcept
    : MemoryInfo() {
    *this = ::std::move(from);
  }

  inline MemoryInfo& operator=(const MemoryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryInfo& operator=(MemoryInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemoryInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryInfo* internal_default_instance() {
    return reinterpret_cast<const MemoryInfo*>(
               &_MemoryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(MemoryInfo& a, MemoryInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryInfo* New() const final {
    return CreateMaybeMessage<MemoryInfo>(nullptr);
  }

  MemoryInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemoryInfo& from);
  void MergeFrom(const MemoryInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.MemoryInfo";
  }
  protected:
  explicit MemoryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalFieldNumber = 1,
    kAvailableFieldNumber = 2,
    kUsedFieldNumber = 3,
  };
  // uint64 Total = 1[json_name = "Total"];
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::uint64 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 Available = 2[json_name = "Available"];
  void clear_available();
  ::PROTOBUF_NAMESPACE_ID::uint64 available() const;
  void set_available(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_available() const;
  void _internal_set_available(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 Used = 3[json_name = "Used"];
  void clear_used();
  ::PROTOBUF_NAMESPACE_ID::uint64 used() const;
  void set_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_used() const;
  void _internal_set_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.MemoryInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_;
  ::PROTOBUF_NAMESPACE_ID::uint64 available_;
  ::PROTOBUF_NAMESPACE_ID::uint64 used_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class OpenFilesStat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.OpenFilesStat) */ {
 public:
  inline OpenFilesStat() : OpenFilesStat(nullptr) {};
  virtual ~OpenFilesStat();

  OpenFilesStat(const OpenFilesStat& from);
  OpenFilesStat(OpenFilesStat&& from) noexcept
    : OpenFilesStat() {
    *this = ::std::move(from);
  }

  inline OpenFilesStat& operator=(const OpenFilesStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenFilesStat& operator=(OpenFilesStat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpenFilesStat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenFilesStat* internal_default_instance() {
    return reinterpret_cast<const OpenFilesStat*>(
               &_OpenFilesStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(OpenFilesStat& a, OpenFilesStat& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenFilesStat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenFilesStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpenFilesStat* New() const final {
    return CreateMaybeMessage<OpenFilesStat>(nullptr);
  }

  OpenFilesStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpenFilesStat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpenFilesStat& from);
  void MergeFrom(const OpenFilesStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenFilesStat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.OpenFilesStat";
  }
  protected:
  explicit OpenFilesStat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef OpenFilesStat_StreamType StreamType;
  static constexpr StreamType STDIN =
    OpenFilesStat_StreamType_STDIN;
  static constexpr StreamType STDOUT =
    OpenFilesStat_StreamType_STDOUT;
  static constexpr StreamType STDERR =
    OpenFilesStat_StreamType_STDERR;
  static constexpr StreamType NONE =
    OpenFilesStat_StreamType_NONE;
  static inline bool StreamType_IsValid(int value) {
    return OpenFilesStat_StreamType_IsValid(value);
  }
  static constexpr StreamType StreamType_MIN =
    OpenFilesStat_StreamType_StreamType_MIN;
  static constexpr StreamType StreamType_MAX =
    OpenFilesStat_StreamType_StreamType_MAX;
  static constexpr int StreamType_ARRAYSIZE =
    OpenFilesStat_StreamType_StreamType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StreamType_descriptor() {
    return OpenFilesStat_StreamType_descriptor();
  }
  template<typename T>
  static inline const std::string& StreamType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StreamType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StreamType_Name.");
    return OpenFilesStat_StreamType_Name(enum_t_value);
  }
  static inline bool StreamType_Parse(const std::string& name,
      StreamType* value) {
    return OpenFilesStat_StreamType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kModeFieldNumber = 3,
    kFdFieldNumber = 2,
    kStreamFieldNumber = 5,
  };
  // string Path = 1[json_name = "Path"];
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_path(
      std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string Mode = 3[json_name = "Mode"];
  void clear_mode();
  const std::string& mode() const;
  void set_mode(const std::string& value);
  void set_mode(std::string&& value);
  void set_mode(const char* value);
  void set_mode(const char* value, size_t size);
  std::string* mutable_mode();
  std::string* release_mode();
  void set_allocated_mode(std::string* mode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mode(
      std::string* mode);
  private:
  const std::string& _internal_mode() const;
  void _internal_set_mode(const std::string& value);
  std::string* _internal_mutable_mode();
  public:

  // uint64 Fd = 2[json_name = "Fd"];
  void clear_fd();
  ::PROTOBUF_NAMESPACE_ID::uint64 fd() const;
  void set_fd(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fd() const;
  void _internal_set_fd(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .cedana.services.task.OpenFilesStat.StreamType Stream = 5[json_name = "Stream"];
  void clear_stream();
  ::cedana::services::task::OpenFilesStat_StreamType stream() const;
  void set_stream(::cedana::services::task::OpenFilesStat_StreamType value);
  private:
  ::cedana::services::task::OpenFilesStat_StreamType _internal_stream() const;
  void _internal_set_stream(::cedana::services::task::OpenFilesStat_StreamType value);
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.OpenFilesStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mode_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fd_;
  int stream_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class ConnectionStat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.ConnectionStat) */ {
 public:
  inline ConnectionStat() : ConnectionStat(nullptr) {};
  virtual ~ConnectionStat();

  ConnectionStat(const ConnectionStat& from);
  ConnectionStat(ConnectionStat&& from) noexcept
    : ConnectionStat() {
    *this = ::std::move(from);
  }

  inline ConnectionStat& operator=(const ConnectionStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionStat& operator=(ConnectionStat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectionStat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectionStat* internal_default_instance() {
    return reinterpret_cast<const ConnectionStat*>(
               &_ConnectionStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(ConnectionStat& a, ConnectionStat& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionStat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectionStat* New() const final {
    return CreateMaybeMessage<ConnectionStat>(nullptr);
  }

  ConnectionStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectionStat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectionStat& from);
  void MergeFrom(const ConnectionStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionStat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.ConnectionStat";
  }
  protected:
  explicit ConnectionStat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUIDsFieldNumber = 7,
    kStatusFieldNumber = 6,
    kLaddrFieldNumber = 4,
    kRaddrFieldNumber = 5,
    kFdFieldNumber = 1,
    kFamilyFieldNumber = 2,
    kTypeFieldNumber = 3,
    kPIDFieldNumber = 8,
  };
  // repeated int32 UIDs = 7[json_name = "UIDs"];
  int uids_size() const;
  private:
  int _internal_uids_size() const;
  public:
  void clear_uids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_uids() const;
  void _internal_add_uids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_uids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 uids(int index) const;
  void set_uids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_uids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      uids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_uids();

  // string Status = 6[json_name = "Status"];
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_status();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_status(
      std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .cedana.services.task.Addr Laddr = 4[json_name = "Laddr"];
  bool has_laddr() const;
  private:
  bool _internal_has_laddr() const;
  public:
  void clear_laddr();
  const ::cedana::services::task::Addr& laddr() const;
  ::cedana::services::task::Addr* release_laddr();
  ::cedana::services::task::Addr* mutable_laddr();
  void set_allocated_laddr(::cedana::services::task::Addr* laddr);
  private:
  const ::cedana::services::task::Addr& _internal_laddr() const;
  ::cedana::services::task::Addr* _internal_mutable_laddr();
  public:
  void unsafe_arena_set_allocated_laddr(
      ::cedana::services::task::Addr* laddr);
  ::cedana::services::task::Addr* unsafe_arena_release_laddr();

  // .cedana.services.task.Addr Raddr = 5[json_name = "Raddr"];
  bool has_raddr() const;
  private:
  bool _internal_has_raddr() const;
  public:
  void clear_raddr();
  const ::cedana::services::task::Addr& raddr() const;
  ::cedana::services::task::Addr* release_raddr();
  ::cedana::services::task::Addr* mutable_raddr();
  void set_allocated_raddr(::cedana::services::task::Addr* raddr);
  private:
  const ::cedana::services::task::Addr& _internal_raddr() const;
  ::cedana::services::task::Addr* _internal_mutable_raddr();
  public:
  void unsafe_arena_set_allocated_raddr(
      ::cedana::services::task::Addr* raddr);
  ::cedana::services::task::Addr* unsafe_arena_release_raddr();

  // uint32 Fd = 1[json_name = "Fd"];
  void clear_fd();
  ::PROTOBUF_NAMESPACE_ID::uint32 fd() const;
  void set_fd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fd() const;
  void _internal_set_fd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Family = 2[json_name = "Family"];
  void clear_family();
  ::PROTOBUF_NAMESPACE_ID::uint32 family() const;
  void set_family(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_family() const;
  void _internal_set_family(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Type = 3[json_name = "Type"];
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 PID = 8[json_name = "PID"];
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.ConnectionStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > uids_;
  mutable std::atomic<int> _uids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::cedana::services::task::Addr* laddr_;
  ::cedana::services::task::Addr* raddr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 family_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class Addr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.Addr) */ {
 public:
  inline Addr() : Addr(nullptr) {};
  virtual ~Addr();

  Addr(const Addr& from);
  Addr(Addr&& from) noexcept
    : Addr() {
    *this = ::std::move(from);
  }

  inline Addr& operator=(const Addr& from) {
    CopyFrom(from);
    return *this;
  }
  inline Addr& operator=(Addr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Addr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Addr* internal_default_instance() {
    return reinterpret_cast<const Addr*>(
               &_Addr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(Addr& a, Addr& b) {
    a.Swap(&b);
  }
  inline void Swap(Addr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Addr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Addr* New() const final {
    return CreateMaybeMessage<Addr>(nullptr);
  }

  Addr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Addr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Addr& from);
  void MergeFrom(const Addr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Addr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.Addr";
  }
  protected:
  explicit Addr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIPFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string IP = 1[json_name = "IP"];
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // uint32 Port = 2[json_name = "Port"];
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.Addr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class ProcessStateStreamingArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.ProcessStateStreamingArgs) */ {
 public:
  inline ProcessStateStreamingArgs() : ProcessStateStreamingArgs(nullptr) {};
  virtual ~ProcessStateStreamingArgs();

  ProcessStateStreamingArgs(const ProcessStateStreamingArgs& from);
  ProcessStateStreamingArgs(ProcessStateStreamingArgs&& from) noexcept
    : ProcessStateStreamingArgs() {
    *this = ::std::move(from);
  }

  inline ProcessStateStreamingArgs& operator=(const ProcessStateStreamingArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessStateStreamingArgs& operator=(ProcessStateStreamingArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessStateStreamingArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessStateStreamingArgs* internal_default_instance() {
    return reinterpret_cast<const ProcessStateStreamingArgs*>(
               &_ProcessStateStreamingArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(ProcessStateStreamingArgs& a, ProcessStateStreamingArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessStateStreamingArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessStateStreamingArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessStateStreamingArgs* New() const final {
    return CreateMaybeMessage<ProcessStateStreamingArgs>(nullptr);
  }

  ProcessStateStreamingArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessStateStreamingArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessStateStreamingArgs& from);
  void MergeFrom(const ProcessStateStreamingArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessStateStreamingArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.ProcessStateStreamingArgs";
  }
  protected:
  explicit ProcessStateStreamingArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJIDFieldNumber = 1,
  };
  // string JID = 1[json_name = "JID"];
  void clear_jid();
  const std::string& jid() const;
  void set_jid(const std::string& value);
  void set_jid(std::string&& value);
  void set_jid(const char* value);
  void set_jid(const char* value, size_t size);
  std::string* mutable_jid();
  std::string* release_jid();
  void set_allocated_jid(std::string* jid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_jid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_jid(
      std::string* jid);
  private:
  const std::string& _internal_jid() const;
  void _internal_set_jid(const std::string& value);
  std::string* _internal_mutable_jid();
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.ProcessStateStreamingArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class CheckpointReason PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.CheckpointReason) */ {
 public:
  inline CheckpointReason() : CheckpointReason(nullptr) {};
  virtual ~CheckpointReason();

  CheckpointReason(const CheckpointReason& from);
  CheckpointReason(CheckpointReason&& from) noexcept
    : CheckpointReason() {
    *this = ::std::move(from);
  }

  inline CheckpointReason& operator=(const CheckpointReason& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckpointReason& operator=(CheckpointReason&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckpointReason& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckpointReason* internal_default_instance() {
    return reinterpret_cast<const CheckpointReason*>(
               &_CheckpointReason_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CheckpointReason& a, CheckpointReason& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckpointReason* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckpointReason* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckpointReason* New() const final {
    return CreateMaybeMessage<CheckpointReason>(nullptr);
  }

  CheckpointReason* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckpointReason>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckpointReason& from);
  void MergeFrom(const CheckpointReason& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckpointReason* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.CheckpointReason";
  }
  protected:
  explicit CheckpointReason(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CheckpointReason_CheckpointReasonEnum CheckpointReasonEnum;
  static constexpr CheckpointReasonEnum INSTANCE_TERMINATION =
    CheckpointReason_CheckpointReasonEnum_INSTANCE_TERMINATION;
  static constexpr CheckpointReasonEnum JOB_TERMINATION =
    CheckpointReason_CheckpointReasonEnum_JOB_TERMINATION;
  static constexpr CheckpointReasonEnum HEARTBEAT =
    CheckpointReason_CheckpointReasonEnum_HEARTBEAT;
  static inline bool CheckpointReasonEnum_IsValid(int value) {
    return CheckpointReason_CheckpointReasonEnum_IsValid(value);
  }
  static constexpr CheckpointReasonEnum CheckpointReasonEnum_MIN =
    CheckpointReason_CheckpointReasonEnum_CheckpointReasonEnum_MIN;
  static constexpr CheckpointReasonEnum CheckpointReasonEnum_MAX =
    CheckpointReason_CheckpointReasonEnum_CheckpointReasonEnum_MAX;
  static constexpr int CheckpointReasonEnum_ARRAYSIZE =
    CheckpointReason_CheckpointReasonEnum_CheckpointReasonEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CheckpointReasonEnum_descriptor() {
    return CheckpointReason_CheckpointReasonEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& CheckpointReasonEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CheckpointReasonEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CheckpointReasonEnum_Name.");
    return CheckpointReason_CheckpointReasonEnum_Name(enum_t_value);
  }
  static inline bool CheckpointReasonEnum_Parse(const std::string& name,
      CheckpointReasonEnum* value) {
    return CheckpointReason_CheckpointReasonEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 1,
  };
  // .cedana.services.task.CheckpointReason.CheckpointReasonEnum Reason = 1[json_name = "Reason"];
  void clear_reason();
  ::cedana::services::task::CheckpointReason_CheckpointReasonEnum reason() const;
  void set_reason(::cedana::services::task::CheckpointReason_CheckpointReasonEnum value);
  private:
  ::cedana::services::task::CheckpointReason_CheckpointReasonEnum _internal_reason() const;
  void _internal_set_reason(::cedana::services::task::CheckpointReason_CheckpointReasonEnum value);
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.CheckpointReason)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class StartAttachArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.StartAttachArgs) */ {
 public:
  inline StartAttachArgs() : StartAttachArgs(nullptr) {};
  virtual ~StartAttachArgs();

  StartAttachArgs(const StartAttachArgs& from);
  StartAttachArgs(StartAttachArgs&& from) noexcept
    : StartAttachArgs() {
    *this = ::std::move(from);
  }

  inline StartAttachArgs& operator=(const StartAttachArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartAttachArgs& operator=(StartAttachArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartAttachArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartAttachArgs* internal_default_instance() {
    return reinterpret_cast<const StartAttachArgs*>(
               &_StartAttachArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(StartAttachArgs& a, StartAttachArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(StartAttachArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartAttachArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartAttachArgs* New() const final {
    return CreateMaybeMessage<StartAttachArgs>(nullptr);
  }

  StartAttachArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartAttachArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartAttachArgs& from);
  void MergeFrom(const StartAttachArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartAttachArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.StartAttachArgs";
  }
  protected:
  explicit StartAttachArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStdinFieldNumber = 2,
    kArgsFieldNumber = 1,
  };
  // string Stdin = 2[json_name = "Stdin"];
  void clear_stdin();
  const std::string& stdin() const;
  void set_stdin(const std::string& value);
  void set_stdin(std::string&& value);
  void set_stdin(const char* value);
  void set_stdin(const char* value, size_t size);
  std::string* mutable_stdin();
  std::string* release_stdin();
  void set_allocated_stdin(std::string* stdin);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stdin();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stdin(
      std::string* stdin);
  private:
  const std::string& _internal_stdin() const;
  void _internal_set_stdin(const std::string& value);
  std::string* _internal_mutable_stdin();
  public:

  // .cedana.services.task.StartArgs Args = 1[json_name = "Args"];
  bool has_args() const;
  private:
  bool _internal_has_args() const;
  public:
  void clear_args();
  const ::cedana::services::task::StartArgs& args() const;
  ::cedana::services::task::StartArgs* release_args();
  ::cedana::services::task::StartArgs* mutable_args();
  void set_allocated_args(::cedana::services::task::StartArgs* args);
  private:
  const ::cedana::services::task::StartArgs& _internal_args() const;
  ::cedana::services::task::StartArgs* _internal_mutable_args();
  public:
  void unsafe_arena_set_allocated_args(
      ::cedana::services::task::StartArgs* args);
  ::cedana::services::task::StartArgs* unsafe_arena_release_args();

  // @@protoc_insertion_point(class_scope:cedana.services.task.StartAttachArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stdin_;
  ::cedana::services::task::StartArgs* args_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class StartAttachResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.StartAttachResp) */ {
 public:
  inline StartAttachResp() : StartAttachResp(nullptr) {};
  virtual ~StartAttachResp();

  StartAttachResp(const StartAttachResp& from);
  StartAttachResp(StartAttachResp&& from) noexcept
    : StartAttachResp() {
    *this = ::std::move(from);
  }

  inline StartAttachResp& operator=(const StartAttachResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartAttachResp& operator=(StartAttachResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartAttachResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartAttachResp* internal_default_instance() {
    return reinterpret_cast<const StartAttachResp*>(
               &_StartAttachResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(StartAttachResp& a, StartAttachResp& b) {
    a.Swap(&b);
  }
  inline void Swap(StartAttachResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartAttachResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartAttachResp* New() const final {
    return CreateMaybeMessage<StartAttachResp>(nullptr);
  }

  StartAttachResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartAttachResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartAttachResp& from);
  void MergeFrom(const StartAttachResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartAttachResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.StartAttachResp";
  }
  protected:
  explicit StartAttachResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStdoutFieldNumber = 1,
    kStderrFieldNumber = 2,
    kExitCodeFieldNumber = 3,
  };
  // string Stdout = 1[json_name = "Stdout"];
  void clear_stdout();
  const std::string& stdout() const;
  void set_stdout(const std::string& value);
  void set_stdout(std::string&& value);
  void set_stdout(const char* value);
  void set_stdout(const char* value, size_t size);
  std::string* mutable_stdout();
  std::string* release_stdout();
  void set_allocated_stdout(std::string* stdout);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stdout();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stdout(
      std::string* stdout);
  private:
  const std::string& _internal_stdout() const;
  void _internal_set_stdout(const std::string& value);
  std::string* _internal_mutable_stdout();
  public:

  // string Stderr = 2[json_name = "Stderr"];
  void clear_stderr();
  const std::string& stderr() const;
  void set_stderr(const std::string& value);
  void set_stderr(std::string&& value);
  void set_stderr(const char* value);
  void set_stderr(const char* value, size_t size);
  std::string* mutable_stderr();
  std::string* release_stderr();
  void set_allocated_stderr(std::string* stderr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stderr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stderr(
      std::string* stderr);
  private:
  const std::string& _internal_stderr() const;
  void _internal_set_stderr(const std::string& value);
  std::string* _internal_mutable_stderr();
  public:

  // int32 ExitCode = 3[json_name = "ExitCode"];
  void clear_exitcode();
  ::PROTOBUF_NAMESPACE_ID::int32 exitcode() const;
  void set_exitcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_exitcode() const;
  void _internal_set_exitcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.StartAttachResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stdout_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stderr_;
  ::PROTOBUF_NAMESPACE_ID::int32 exitcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class RestoreAttachArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.RestoreAttachArgs) */ {
 public:
  inline RestoreAttachArgs() : RestoreAttachArgs(nullptr) {};
  virtual ~RestoreAttachArgs();

  RestoreAttachArgs(const RestoreAttachArgs& from);
  RestoreAttachArgs(RestoreAttachArgs&& from) noexcept
    : RestoreAttachArgs() {
    *this = ::std::move(from);
  }

  inline RestoreAttachArgs& operator=(const RestoreAttachArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestoreAttachArgs& operator=(RestoreAttachArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestoreAttachArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RestoreAttachArgs* internal_default_instance() {
    return reinterpret_cast<const RestoreAttachArgs*>(
               &_RestoreAttachArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(RestoreAttachArgs& a, RestoreAttachArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(RestoreAttachArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestoreAttachArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestoreAttachArgs* New() const final {
    return CreateMaybeMessage<RestoreAttachArgs>(nullptr);
  }

  RestoreAttachArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestoreAttachArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestoreAttachArgs& from);
  void MergeFrom(const RestoreAttachArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestoreAttachArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.RestoreAttachArgs";
  }
  protected:
  explicit RestoreAttachArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStdinFieldNumber = 2,
    kArgsFieldNumber = 1,
  };
  // string Stdin = 2[json_name = "Stdin"];
  void clear_stdin();
  const std::string& stdin() const;
  void set_stdin(const std::string& value);
  void set_stdin(std::string&& value);
  void set_stdin(const char* value);
  void set_stdin(const char* value, size_t size);
  std::string* mutable_stdin();
  std::string* release_stdin();
  void set_allocated_stdin(std::string* stdin);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stdin();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stdin(
      std::string* stdin);
  private:
  const std::string& _internal_stdin() const;
  void _internal_set_stdin(const std::string& value);
  std::string* _internal_mutable_stdin();
  public:

  // .cedana.services.task.RestoreArgs Args = 1[json_name = "Args"];
  bool has_args() const;
  private:
  bool _internal_has_args() const;
  public:
  void clear_args();
  const ::cedana::services::task::RestoreArgs& args() const;
  ::cedana::services::task::RestoreArgs* release_args();
  ::cedana::services::task::RestoreArgs* mutable_args();
  void set_allocated_args(::cedana::services::task::RestoreArgs* args);
  private:
  const ::cedana::services::task::RestoreArgs& _internal_args() const;
  ::cedana::services::task::RestoreArgs* _internal_mutable_args();
  public:
  void unsafe_arena_set_allocated_args(
      ::cedana::services::task::RestoreArgs* args);
  ::cedana::services::task::RestoreArgs* unsafe_arena_release_args();

  // @@protoc_insertion_point(class_scope:cedana.services.task.RestoreAttachArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stdin_;
  ::cedana::services::task::RestoreArgs* args_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class RestoreAttachResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.RestoreAttachResp) */ {
 public:
  inline RestoreAttachResp() : RestoreAttachResp(nullptr) {};
  virtual ~RestoreAttachResp();

  RestoreAttachResp(const RestoreAttachResp& from);
  RestoreAttachResp(RestoreAttachResp&& from) noexcept
    : RestoreAttachResp() {
    *this = ::std::move(from);
  }

  inline RestoreAttachResp& operator=(const RestoreAttachResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestoreAttachResp& operator=(RestoreAttachResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestoreAttachResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RestoreAttachResp* internal_default_instance() {
    return reinterpret_cast<const RestoreAttachResp*>(
               &_RestoreAttachResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(RestoreAttachResp& a, RestoreAttachResp& b) {
    a.Swap(&b);
  }
  inline void Swap(RestoreAttachResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestoreAttachResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestoreAttachResp* New() const final {
    return CreateMaybeMessage<RestoreAttachResp>(nullptr);
  }

  RestoreAttachResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestoreAttachResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestoreAttachResp& from);
  void MergeFrom(const RestoreAttachResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestoreAttachResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.RestoreAttachResp";
  }
  protected:
  explicit RestoreAttachResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStdoutFieldNumber = 1,
    kStderrFieldNumber = 2,
    kExitCodeFieldNumber = 3,
  };
  // string Stdout = 1[json_name = "Stdout"];
  void clear_stdout();
  const std::string& stdout() const;
  void set_stdout(const std::string& value);
  void set_stdout(std::string&& value);
  void set_stdout(const char* value);
  void set_stdout(const char* value, size_t size);
  std::string* mutable_stdout();
  std::string* release_stdout();
  void set_allocated_stdout(std::string* stdout);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stdout();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stdout(
      std::string* stdout);
  private:
  const std::string& _internal_stdout() const;
  void _internal_set_stdout(const std::string& value);
  std::string* _internal_mutable_stdout();
  public:

  // string Stderr = 2[json_name = "Stderr"];
  void clear_stderr();
  const std::string& stderr() const;
  void set_stderr(const std::string& value);
  void set_stderr(std::string&& value);
  void set_stderr(const char* value);
  void set_stderr(const char* value, size_t size);
  std::string* mutable_stderr();
  std::string* release_stderr();
  void set_allocated_stderr(std::string* stderr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stderr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stderr(
      std::string* stderr);
  private:
  const std::string& _internal_stderr() const;
  void _internal_set_stderr(const std::string& value);
  std::string* _internal_mutable_stderr();
  public:

  // int32 ExitCode = 3[json_name = "ExitCode"];
  void clear_exitcode();
  ::PROTOBUF_NAMESPACE_ID::int32 exitcode() const;
  void set_exitcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_exitcode() const;
  void _internal_set_exitcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.RestoreAttachResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stdout_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stderr_;
  ::PROTOBUF_NAMESPACE_ID::int32 exitcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class DetailedHealthCheckRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.DetailedHealthCheckRequest) */ {
 public:
  inline DetailedHealthCheckRequest() : DetailedHealthCheckRequest(nullptr) {};
  virtual ~DetailedHealthCheckRequest();

  DetailedHealthCheckRequest(const DetailedHealthCheckRequest& from);
  DetailedHealthCheckRequest(DetailedHealthCheckRequest&& from) noexcept
    : DetailedHealthCheckRequest() {
    *this = ::std::move(from);
  }

  inline DetailedHealthCheckRequest& operator=(const DetailedHealthCheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetailedHealthCheckRequest& operator=(DetailedHealthCheckRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetailedHealthCheckRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetailedHealthCheckRequest* internal_default_instance() {
    return reinterpret_cast<const DetailedHealthCheckRequest*>(
               &_DetailedHealthCheckRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(DetailedHealthCheckRequest& a, DetailedHealthCheckRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DetailedHealthCheckRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetailedHealthCheckRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetailedHealthCheckRequest* New() const final {
    return CreateMaybeMessage<DetailedHealthCheckRequest>(nullptr);
  }

  DetailedHealthCheckRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetailedHealthCheckRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetailedHealthCheckRequest& from);
  void MergeFrom(const DetailedHealthCheckRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetailedHealthCheckRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.DetailedHealthCheckRequest";
  }
  protected:
  explicit DetailedHealthCheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 3,
    kUIDFieldNumber = 1,
    kGIDFieldNumber = 2,
  };
  // repeated int32 Groups = 3[json_name = "Groups"];
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_groups(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_groups() const;
  void _internal_add_groups(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_groups();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 groups(int index) const;
  void set_groups(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_groups(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      groups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_groups();

  // int32 UID = 1[json_name = "UID"];
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 GID = 2[json_name = "GID"];
  void clear_gid();
  ::PROTOBUF_NAMESPACE_ID::int32 gid() const;
  void set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gid() const;
  void _internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.DetailedHealthCheckRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > groups_;
  mutable std::atomic<int> _groups_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 gid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class DetailedHealthCheckResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.DetailedHealthCheckResponse) */ {
 public:
  inline DetailedHealthCheckResponse() : DetailedHealthCheckResponse(nullptr) {};
  virtual ~DetailedHealthCheckResponse();

  DetailedHealthCheckResponse(const DetailedHealthCheckResponse& from);
  DetailedHealthCheckResponse(DetailedHealthCheckResponse&& from) noexcept
    : DetailedHealthCheckResponse() {
    *this = ::std::move(from);
  }

  inline DetailedHealthCheckResponse& operator=(const DetailedHealthCheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetailedHealthCheckResponse& operator=(DetailedHealthCheckResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetailedHealthCheckResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetailedHealthCheckResponse* internal_default_instance() {
    return reinterpret_cast<const DetailedHealthCheckResponse*>(
               &_DetailedHealthCheckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(DetailedHealthCheckResponse& a, DetailedHealthCheckResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DetailedHealthCheckResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetailedHealthCheckResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetailedHealthCheckResponse* New() const final {
    return CreateMaybeMessage<DetailedHealthCheckResponse>(nullptr);
  }

  DetailedHealthCheckResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetailedHealthCheckResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetailedHealthCheckResponse& from);
  void MergeFrom(const DetailedHealthCheckResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetailedHealthCheckResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.DetailedHealthCheckResponse";
  }
  protected:
  explicit DetailedHealthCheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnhealthyReasonsFieldNumber = 2,
    kHealthCheckStatsFieldNumber = 1,
  };
  // repeated string unhealthyReasons = 2[json_name = "unhealthyReasons"];
  int unhealthyreasons_size() const;
  private:
  int _internal_unhealthyreasons_size() const;
  public:
  void clear_unhealthyreasons();
  const std::string& unhealthyreasons(int index) const;
  std::string* mutable_unhealthyreasons(int index);
  void set_unhealthyreasons(int index, const std::string& value);
  void set_unhealthyreasons(int index, std::string&& value);
  void set_unhealthyreasons(int index, const char* value);
  void set_unhealthyreasons(int index, const char* value, size_t size);
  std::string* add_unhealthyreasons();
  void add_unhealthyreasons(const std::string& value);
  void add_unhealthyreasons(std::string&& value);
  void add_unhealthyreasons(const char* value);
  void add_unhealthyreasons(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& unhealthyreasons() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_unhealthyreasons();
  private:
  const std::string& _internal_unhealthyreasons(int index) const;
  std::string* _internal_add_unhealthyreasons();
  public:

  // .cedana.services.task.HealthCheckStats HealthCheckStats = 1[json_name = "HealthCheckStats"];
  bool has_healthcheckstats() const;
  private:
  bool _internal_has_healthcheckstats() const;
  public:
  void clear_healthcheckstats();
  const ::cedana::services::task::HealthCheckStats& healthcheckstats() const;
  ::cedana::services::task::HealthCheckStats* release_healthcheckstats();
  ::cedana::services::task::HealthCheckStats* mutable_healthcheckstats();
  void set_allocated_healthcheckstats(::cedana::services::task::HealthCheckStats* healthcheckstats);
  private:
  const ::cedana::services::task::HealthCheckStats& _internal_healthcheckstats() const;
  ::cedana::services::task::HealthCheckStats* _internal_mutable_healthcheckstats();
  public:
  void unsafe_arena_set_allocated_healthcheckstats(
      ::cedana::services::task::HealthCheckStats* healthcheckstats);
  ::cedana::services::task::HealthCheckStats* unsafe_arena_release_healthcheckstats();

  // @@protoc_insertion_point(class_scope:cedana.services.task.DetailedHealthCheckResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> unhealthyreasons_;
  ::cedana::services::task::HealthCheckStats* healthcheckstats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class HealthCheckStats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.HealthCheckStats) */ {
 public:
  inline HealthCheckStats() : HealthCheckStats(nullptr) {};
  virtual ~HealthCheckStats();

  HealthCheckStats(const HealthCheckStats& from);
  HealthCheckStats(HealthCheckStats&& from) noexcept
    : HealthCheckStats() {
    *this = ::std::move(from);
  }

  inline HealthCheckStats& operator=(const HealthCheckStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthCheckStats& operator=(HealthCheckStats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HealthCheckStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HealthCheckStats* internal_default_instance() {
    return reinterpret_cast<const HealthCheckStats*>(
               &_HealthCheckStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(HealthCheckStats& a, HealthCheckStats& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthCheckStats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthCheckStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HealthCheckStats* New() const final {
    return CreateMaybeMessage<HealthCheckStats>(nullptr);
  }

  HealthCheckStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HealthCheckStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HealthCheckStats& from);
  void MergeFrom(const HealthCheckStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthCheckStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.HealthCheckStats";
  }
  protected:
  explicit HealthCheckStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCriuVersionFieldNumber = 1,
    kGPUHealthCheckFieldNumber = 2,
  };
  // string criuVersion = 1[json_name = "criuVersion"];
  void clear_criuversion();
  const std::string& criuversion() const;
  void set_criuversion(const std::string& value);
  void set_criuversion(std::string&& value);
  void set_criuversion(const char* value);
  void set_criuversion(const char* value, size_t size);
  std::string* mutable_criuversion();
  std::string* release_criuversion();
  void set_allocated_criuversion(std::string* criuversion);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_criuversion();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_criuversion(
      std::string* criuversion);
  private:
  const std::string& _internal_criuversion() const;
  void _internal_set_criuversion(const std::string& value);
  std::string* _internal_mutable_criuversion();
  public:

  // .cedanagpu.HealthCheckResponse GPUHealthCheck = 2[json_name = "GPUHealthCheck"];
  bool has_gpuhealthcheck() const;
  private:
  bool _internal_has_gpuhealthcheck() const;
  public:
  void clear_gpuhealthcheck();
  const ::cedanagpu::HealthCheckResponse& gpuhealthcheck() const;
  ::cedanagpu::HealthCheckResponse* release_gpuhealthcheck();
  ::cedanagpu::HealthCheckResponse* mutable_gpuhealthcheck();
  void set_allocated_gpuhealthcheck(::cedanagpu::HealthCheckResponse* gpuhealthcheck);
  private:
  const ::cedanagpu::HealthCheckResponse& _internal_gpuhealthcheck() const;
  ::cedanagpu::HealthCheckResponse* _internal_mutable_gpuhealthcheck();
  public:
  void unsafe_arena_set_allocated_gpuhealthcheck(
      ::cedanagpu::HealthCheckResponse* gpuhealthcheck);
  ::cedanagpu::HealthCheckResponse* unsafe_arena_release_gpuhealthcheck();

  // @@protoc_insertion_point(class_scope:cedana.services.task.HealthCheckStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr criuversion_;
  ::cedanagpu::HealthCheckResponse* gpuhealthcheck_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class GetConfigRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.GetConfigRequest) */ {
 public:
  inline GetConfigRequest() : GetConfigRequest(nullptr) {};
  virtual ~GetConfigRequest();

  GetConfigRequest(const GetConfigRequest& from);
  GetConfigRequest(GetConfigRequest&& from) noexcept
    : GetConfigRequest() {
    *this = ::std::move(from);
  }

  inline GetConfigRequest& operator=(const GetConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConfigRequest& operator=(GetConfigRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetConfigRequest* internal_default_instance() {
    return reinterpret_cast<const GetConfigRequest*>(
               &_GetConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(GetConfigRequest& a, GetConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConfigRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConfigRequest* New() const final {
    return CreateMaybeMessage<GetConfigRequest>(nullptr);
  }

  GetConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConfigRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConfigRequest& from);
  void MergeFrom(const GetConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConfigRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.GetConfigRequest";
  }
  protected:
  explicit GetConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cedana.services.task.GetConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class GetConfigResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.GetConfigResponse) */ {
 public:
  inline GetConfigResponse() : GetConfigResponse(nullptr) {};
  virtual ~GetConfigResponse();

  GetConfigResponse(const GetConfigResponse& from);
  GetConfigResponse(GetConfigResponse&& from) noexcept
    : GetConfigResponse() {
    *this = ::std::move(from);
  }

  inline GetConfigResponse& operator=(const GetConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConfigResponse& operator=(GetConfigResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetConfigResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetConfigResponse* internal_default_instance() {
    return reinterpret_cast<const GetConfigResponse*>(
               &_GetConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(GetConfigResponse& a, GetConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConfigResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConfigResponse* New() const final {
    return CreateMaybeMessage<GetConfigResponse>(nullptr);
  }

  GetConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConfigResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConfigResponse& from);
  void MergeFrom(const GetConfigResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConfigResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.GetConfigResponse";
  }
  protected:
  explicit GetConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJSONFieldNumber = 1,
  };
  // string JSON = 1[json_name = "JSON"];
  void clear_json();
  const std::string& json() const;
  void set_json(const std::string& value);
  void set_json(std::string&& value);
  void set_json(const char* value);
  void set_json(const char* value, size_t size);
  std::string* mutable_json();
  std::string* release_json();
  void set_allocated_json(std::string* json);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_json();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_json(
      std::string* json);
  private:
  const std::string& _internal_json() const;
  void _internal_set_json(const std::string& value);
  std::string* _internal_mutable_json();
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.GetConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class QueueJobCheckpointRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.QueueJobCheckpointRequest) */ {
 public:
  inline QueueJobCheckpointRequest() : QueueJobCheckpointRequest(nullptr) {};
  virtual ~QueueJobCheckpointRequest();

  QueueJobCheckpointRequest(const QueueJobCheckpointRequest& from);
  QueueJobCheckpointRequest(QueueJobCheckpointRequest&& from) noexcept
    : QueueJobCheckpointRequest() {
    *this = ::std::move(from);
  }

  inline QueueJobCheckpointRequest& operator=(const QueueJobCheckpointRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueueJobCheckpointRequest& operator=(QueueJobCheckpointRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueueJobCheckpointRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueueJobCheckpointRequest* internal_default_instance() {
    return reinterpret_cast<const QueueJobCheckpointRequest*>(
               &_QueueJobCheckpointRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(QueueJobCheckpointRequest& a, QueueJobCheckpointRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueueJobCheckpointRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueueJobCheckpointRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueueJobCheckpointRequest* New() const final {
    return CreateMaybeMessage<QueueJobCheckpointRequest>(nullptr);
  }

  QueueJobCheckpointRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueueJobCheckpointRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueueJobCheckpointRequest& from);
  void MergeFrom(const QueueJobCheckpointRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueueJobCheckpointRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.QueueJobCheckpointRequest";
  }
  protected:
  explicit QueueJobCheckpointRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerNameFieldNumber = 1,
    kNamespaceFieldNumber = 2,
    kPodNameFieldNumber = 3,
    kImageNameFieldNumber = 4,
    kIdFieldNumber = 5,
  };
  // string ContainerName = 1[json_name = "ContainerName"];
  void clear_containername();
  const std::string& containername() const;
  void set_containername(const std::string& value);
  void set_containername(std::string&& value);
  void set_containername(const char* value);
  void set_containername(const char* value, size_t size);
  std::string* mutable_containername();
  std::string* release_containername();
  void set_allocated_containername(std::string* containername);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_containername();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_containername(
      std::string* containername);
  private:
  const std::string& _internal_containername() const;
  void _internal_set_containername(const std::string& value);
  std::string* _internal_mutable_containername();
  public:

  // string Namespace = 2[json_name = "Namespace"];
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_namespace_();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_namespace_(
      std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // string PodName = 3[json_name = "PodName"];
  void clear_podname();
  const std::string& podname() const;
  void set_podname(const std::string& value);
  void set_podname(std::string&& value);
  void set_podname(const char* value);
  void set_podname(const char* value, size_t size);
  std::string* mutable_podname();
  std::string* release_podname();
  void set_allocated_podname(std::string* podname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_podname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_podname(
      std::string* podname);
  private:
  const std::string& _internal_podname() const;
  void _internal_set_podname(const std::string& value);
  std::string* _internal_mutable_podname();
  public:

  // string ImageName = 4[json_name = "ImageName"];
  void clear_imagename();
  const std::string& imagename() const;
  void set_imagename(const std::string& value);
  void set_imagename(std::string&& value);
  void set_imagename(const char* value);
  void set_imagename(const char* value, size_t size);
  std::string* mutable_imagename();
  std::string* release_imagename();
  void set_allocated_imagename(std::string* imagename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_imagename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_imagename(
      std::string* imagename);
  private:
  const std::string& _internal_imagename() const;
  void _internal_set_imagename(const std::string& value);
  std::string* _internal_mutable_imagename();
  public:

  // string Id = 5[json_name = "Id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.QueueJobCheckpointRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr containername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr podname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class QueueJobRestoreRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.QueueJobRestoreRequest) */ {
 public:
  inline QueueJobRestoreRequest() : QueueJobRestoreRequest(nullptr) {};
  virtual ~QueueJobRestoreRequest();

  QueueJobRestoreRequest(const QueueJobRestoreRequest& from);
  QueueJobRestoreRequest(QueueJobRestoreRequest&& from) noexcept
    : QueueJobRestoreRequest() {
    *this = ::std::move(from);
  }

  inline QueueJobRestoreRequest& operator=(const QueueJobRestoreRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueueJobRestoreRequest& operator=(QueueJobRestoreRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueueJobRestoreRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueueJobRestoreRequest* internal_default_instance() {
    return reinterpret_cast<const QueueJobRestoreRequest*>(
               &_QueueJobRestoreRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(QueueJobRestoreRequest& a, QueueJobRestoreRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueueJobRestoreRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueueJobRestoreRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueueJobRestoreRequest* New() const final {
    return CreateMaybeMessage<QueueJobRestoreRequest>(nullptr);
  }

  QueueJobRestoreRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueueJobRestoreRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueueJobRestoreRequest& from);
  void MergeFrom(const QueueJobRestoreRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueueJobRestoreRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.QueueJobRestoreRequest";
  }
  protected:
  explicit QueueJobRestoreRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerNameFieldNumber = 1,
    kNamespaceFieldNumber = 2,
    kPodNameFieldNumber = 3,
    kSourceNameFieldNumber = 4,
    kIdFieldNumber = 5,
  };
  // string ContainerName = 1[json_name = "ContainerName"];
  void clear_containername();
  const std::string& containername() const;
  void set_containername(const std::string& value);
  void set_containername(std::string&& value);
  void set_containername(const char* value);
  void set_containername(const char* value, size_t size);
  std::string* mutable_containername();
  std::string* release_containername();
  void set_allocated_containername(std::string* containername);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_containername();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_containername(
      std::string* containername);
  private:
  const std::string& _internal_containername() const;
  void _internal_set_containername(const std::string& value);
  std::string* _internal_mutable_containername();
  public:

  // string Namespace = 2[json_name = "Namespace"];
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_namespace_();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_namespace_(
      std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // string PodName = 3[json_name = "PodName"];
  void clear_podname();
  const std::string& podname() const;
  void set_podname(const std::string& value);
  void set_podname(std::string&& value);
  void set_podname(const char* value);
  void set_podname(const char* value, size_t size);
  std::string* mutable_podname();
  std::string* release_podname();
  void set_allocated_podname(std::string* podname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_podname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_podname(
      std::string* podname);
  private:
  const std::string& _internal_podname() const;
  void _internal_set_podname(const std::string& value);
  std::string* _internal_mutable_podname();
  public:

  // string SourceName = 4[json_name = "SourceName"];
  void clear_sourcename();
  const std::string& sourcename() const;
  void set_sourcename(const std::string& value);
  void set_sourcename(std::string&& value);
  void set_sourcename(const char* value);
  void set_sourcename(const char* value, size_t size);
  std::string* mutable_sourcename();
  std::string* release_sourcename();
  void set_allocated_sourcename(std::string* sourcename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sourcename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sourcename(
      std::string* sourcename);
  private:
  const std::string& _internal_sourcename() const;
  void _internal_set_sourcename(const std::string& value);
  std::string* _internal_mutable_sourcename();
  public:

  // string Id = 5[json_name = "Id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.QueueJobRestoreRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr containername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr podname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourcename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class QueueJobID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.QueueJobID) */ {
 public:
  inline QueueJobID() : QueueJobID(nullptr) {};
  virtual ~QueueJobID();

  QueueJobID(const QueueJobID& from);
  QueueJobID(QueueJobID&& from) noexcept
    : QueueJobID() {
    *this = ::std::move(from);
  }

  inline QueueJobID& operator=(const QueueJobID& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueueJobID& operator=(QueueJobID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueueJobID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueueJobID* internal_default_instance() {
    return reinterpret_cast<const QueueJobID*>(
               &_QueueJobID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(QueueJobID& a, QueueJobID& b) {
    a.Swap(&b);
  }
  inline void Swap(QueueJobID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueueJobID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueueJobID* New() const final {
    return CreateMaybeMessage<QueueJobID>(nullptr);
  }

  QueueJobID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueueJobID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueueJobID& from);
  void MergeFrom(const QueueJobID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueueJobID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.QueueJobID";
  }
  protected:
  explicit QueueJobID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobIDFieldNumber = 1,
  };
  // string JobID = 1[json_name = "JobID"];
  void clear_jobid();
  const std::string& jobid() const;
  void set_jobid(const std::string& value);
  void set_jobid(std::string&& value);
  void set_jobid(const char* value);
  void set_jobid(const char* value, size_t size);
  std::string* mutable_jobid();
  std::string* release_jobid();
  void set_allocated_jobid(std::string* jobid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_jobid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_jobid(
      std::string* jobid);
  private:
  const std::string& _internal_jobid() const;
  void _internal_set_jobid(const std::string& value);
  std::string* _internal_mutable_jobid();
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.QueueJobID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jobid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class QueueJobStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedana.services.task.QueueJobStatus) */ {
 public:
  inline QueueJobStatus() : QueueJobStatus(nullptr) {};
  virtual ~QueueJobStatus();

  QueueJobStatus(const QueueJobStatus& from);
  QueueJobStatus(QueueJobStatus&& from) noexcept
    : QueueJobStatus() {
    *this = ::std::move(from);
  }

  inline QueueJobStatus& operator=(const QueueJobStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueueJobStatus& operator=(QueueJobStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueueJobStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueueJobStatus* internal_default_instance() {
    return reinterpret_cast<const QueueJobStatus*>(
               &_QueueJobStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(QueueJobStatus& a, QueueJobStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(QueueJobStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueueJobStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueueJobStatus* New() const final {
    return CreateMaybeMessage<QueueJobStatus>(nullptr);
  }

  QueueJobStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueueJobStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueueJobStatus& from);
  void MergeFrom(const QueueJobStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueueJobStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedana.services.task.QueueJobStatus";
  }
  protected:
  explicit QueueJobStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_task_2eproto);
    return ::descriptor_table_task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .cedana.services.task.QueueJobStatusEnum Status = 1[json_name = "Status"];
  void clear_status();
  ::cedana::services::task::QueueJobStatusEnum status() const;
  void set_status(::cedana::services::task::QueueJobStatusEnum value);
  private:
  ::cedana::services::task::QueueJobStatusEnum _internal_status() const;
  void _internal_set_status(::cedana::services::task::QueueJobStatusEnum value);
  public:

  // @@protoc_insertion_point(class_scope:cedana.services.task.QueueJobStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DumpStats

// .cedana.services.task.DumpType DumpType = 1[json_name = "DumpType"];
inline void DumpStats::clear_dumptype() {
  dumptype_ = 0;
}
inline ::cedana::services::task::DumpType DumpStats::_internal_dumptype() const {
  return static_cast< ::cedana::services::task::DumpType >(dumptype_);
}
inline ::cedana::services::task::DumpType DumpStats::dumptype() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.DumpStats.DumpType)
  return _internal_dumptype();
}
inline void DumpStats::_internal_set_dumptype(::cedana::services::task::DumpType value) {
  
  dumptype_ = value;
}
inline void DumpStats::set_dumptype(::cedana::services::task::DumpType value) {
  _internal_set_dumptype(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.DumpStats.DumpType)
}

// int64 PrepareDuration = 2[json_name = "PrepareDuration"];
inline void DumpStats::clear_prepareduration() {
  prepareduration_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DumpStats::_internal_prepareduration() const {
  return prepareduration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DumpStats::prepareduration() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.DumpStats.PrepareDuration)
  return _internal_prepareduration();
}
inline void DumpStats::_internal_set_prepareduration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  prepareduration_ = value;
}
inline void DumpStats::set_prepareduration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_prepareduration(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.DumpStats.PrepareDuration)
}

// int64 CRIUDuration = 3[json_name = "CRIUDuration"];
inline void DumpStats::clear_criuduration() {
  criuduration_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DumpStats::_internal_criuduration() const {
  return criuduration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DumpStats::criuduration() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.DumpStats.CRIUDuration)
  return _internal_criuduration();
}
inline void DumpStats::_internal_set_criuduration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  criuduration_ = value;
}
inline void DumpStats::set_criuduration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_criuduration(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.DumpStats.CRIUDuration)
}

// int64 GPUDuration = 4[json_name = "GPUDuration"];
inline void DumpStats::clear_gpuduration() {
  gpuduration_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DumpStats::_internal_gpuduration() const {
  return gpuduration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DumpStats::gpuduration() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.DumpStats.GPUDuration)
  return _internal_gpuduration();
}
inline void DumpStats::_internal_set_gpuduration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gpuduration_ = value;
}
inline void DumpStats::set_gpuduration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gpuduration(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.DumpStats.GPUDuration)
}

// int64 UploadDuration = 5[json_name = "UploadDuration"];
inline void DumpStats::clear_uploadduration() {
  uploadduration_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DumpStats::_internal_uploadduration() const {
  return uploadduration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DumpStats::uploadduration() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.DumpStats.UploadDuration)
  return _internal_uploadduration();
}
inline void DumpStats::_internal_set_uploadduration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  uploadduration_ = value;
}
inline void DumpStats::set_uploadduration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_uploadduration(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.DumpStats.UploadDuration)
}

// .cedana.services.task.ContainerRuntime ContainerRuntime = 6[json_name = "ContainerRuntime"];
inline void DumpStats::clear_containerruntime() {
  containerruntime_ = 0;
}
inline ::cedana::services::task::ContainerRuntime DumpStats::_internal_containerruntime() const {
  return static_cast< ::cedana::services::task::ContainerRuntime >(containerruntime_);
}
inline ::cedana::services::task::ContainerRuntime DumpStats::containerruntime() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.DumpStats.ContainerRuntime)
  return _internal_containerruntime();
}
inline void DumpStats::_internal_set_containerruntime(::cedana::services::task::ContainerRuntime value) {
  
  containerruntime_ = value;
}
inline void DumpStats::set_containerruntime(::cedana::services::task::ContainerRuntime value) {
  _internal_set_containerruntime(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.DumpStats.ContainerRuntime)
}

// bool Kubernetes = 7[json_name = "Kubernetes"];
inline void DumpStats::clear_kubernetes() {
  kubernetes_ = false;
}
inline bool DumpStats::_internal_kubernetes() const {
  return kubernetes_;
}
inline bool DumpStats::kubernetes() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.DumpStats.Kubernetes)
  return _internal_kubernetes();
}
inline void DumpStats::_internal_set_kubernetes(bool value) {
  
  kubernetes_ = value;
}
inline void DumpStats::set_kubernetes(bool value) {
  _internal_set_kubernetes(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.DumpStats.Kubernetes)
}

// .cedana.services.task.CheckpointFileStats CheckpointFileStats = 8[json_name = "CheckpointFileStats"];
inline bool DumpStats::_internal_has_checkpointfilestats() const {
  return this != internal_default_instance() && checkpointfilestats_ != nullptr;
}
inline bool DumpStats::has_checkpointfilestats() const {
  return _internal_has_checkpointfilestats();
}
inline void DumpStats::clear_checkpointfilestats() {
  if (GetArena() == nullptr && checkpointfilestats_ != nullptr) {
    delete checkpointfilestats_;
  }
  checkpointfilestats_ = nullptr;
}
inline const ::cedana::services::task::CheckpointFileStats& DumpStats::_internal_checkpointfilestats() const {
  const ::cedana::services::task::CheckpointFileStats* p = checkpointfilestats_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cedana::services::task::CheckpointFileStats*>(
      &::cedana::services::task::_CheckpointFileStats_default_instance_);
}
inline const ::cedana::services::task::CheckpointFileStats& DumpStats::checkpointfilestats() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.DumpStats.CheckpointFileStats)
  return _internal_checkpointfilestats();
}
inline void DumpStats::unsafe_arena_set_allocated_checkpointfilestats(
    ::cedana::services::task::CheckpointFileStats* checkpointfilestats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(checkpointfilestats_);
  }
  checkpointfilestats_ = checkpointfilestats;
  if (checkpointfilestats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.DumpStats.CheckpointFileStats)
}
inline ::cedana::services::task::CheckpointFileStats* DumpStats::release_checkpointfilestats() {
  auto temp = unsafe_arena_release_checkpointfilestats();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cedana::services::task::CheckpointFileStats* DumpStats::unsafe_arena_release_checkpointfilestats() {
  // @@protoc_insertion_point(field_release:cedana.services.task.DumpStats.CheckpointFileStats)
  
  ::cedana::services::task::CheckpointFileStats* temp = checkpointfilestats_;
  checkpointfilestats_ = nullptr;
  return temp;
}
inline ::cedana::services::task::CheckpointFileStats* DumpStats::_internal_mutable_checkpointfilestats() {
  
  if (checkpointfilestats_ == nullptr) {
    auto* p = CreateMaybeMessage<::cedana::services::task::CheckpointFileStats>(GetArena());
    checkpointfilestats_ = p;
  }
  return checkpointfilestats_;
}
inline ::cedana::services::task::CheckpointFileStats* DumpStats::mutable_checkpointfilestats() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.DumpStats.CheckpointFileStats)
  return _internal_mutable_checkpointfilestats();
}
inline void DumpStats::set_allocated_checkpointfilestats(::cedana::services::task::CheckpointFileStats* checkpointfilestats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete checkpointfilestats_;
  }
  if (checkpointfilestats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(checkpointfilestats);
    if (message_arena != submessage_arena) {
      checkpointfilestats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, checkpointfilestats, submessage_arena);
    }
    
  } else {
    
  }
  checkpointfilestats_ = checkpointfilestats;
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.DumpStats.CheckpointFileStats)
}

// -------------------------------------------------------------------

// CheckpointFileStats

// int64 Size = 1[json_name = "Size"];
inline void CheckpointFileStats::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CheckpointFileStats::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CheckpointFileStats::size() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CheckpointFileStats.Size)
  return _internal_size();
}
inline void CheckpointFileStats::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void CheckpointFileStats::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CheckpointFileStats.Size)
}

// int64 Duration = 2[json_name = "Duration"];
inline void CheckpointFileStats::clear_duration() {
  duration_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CheckpointFileStats::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CheckpointFileStats::duration() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CheckpointFileStats.Duration)
  return _internal_duration();
}
inline void CheckpointFileStats::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  duration_ = value;
}
inline void CheckpointFileStats::set_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CheckpointFileStats.Duration)
}

// -------------------------------------------------------------------

// RestoreStats

// .cedana.services.task.DumpType DumpType = 1[json_name = "DumpType"];
inline void RestoreStats::clear_dumptype() {
  dumptype_ = 0;
}
inline ::cedana::services::task::DumpType RestoreStats::_internal_dumptype() const {
  return static_cast< ::cedana::services::task::DumpType >(dumptype_);
}
inline ::cedana::services::task::DumpType RestoreStats::dumptype() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RestoreStats.DumpType)
  return _internal_dumptype();
}
inline void RestoreStats::_internal_set_dumptype(::cedana::services::task::DumpType value) {
  
  dumptype_ = value;
}
inline void RestoreStats::set_dumptype(::cedana::services::task::DumpType value) {
  _internal_set_dumptype(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RestoreStats.DumpType)
}

// .cedana.services.task.ContainerRuntime ContainerRuntime = 2[json_name = "ContainerRuntime"];
inline void RestoreStats::clear_containerruntime() {
  containerruntime_ = 0;
}
inline ::cedana::services::task::ContainerRuntime RestoreStats::_internal_containerruntime() const {
  return static_cast< ::cedana::services::task::ContainerRuntime >(containerruntime_);
}
inline ::cedana::services::task::ContainerRuntime RestoreStats::containerruntime() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RestoreStats.ContainerRuntime)
  return _internal_containerruntime();
}
inline void RestoreStats::_internal_set_containerruntime(::cedana::services::task::ContainerRuntime value) {
  
  containerruntime_ = value;
}
inline void RestoreStats::set_containerruntime(::cedana::services::task::ContainerRuntime value) {
  _internal_set_containerruntime(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RestoreStats.ContainerRuntime)
}

// int64 PrepareDuration = 3[json_name = "PrepareDuration"];
inline void RestoreStats::clear_prepareduration() {
  prepareduration_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RestoreStats::_internal_prepareduration() const {
  return prepareduration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RestoreStats::prepareduration() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RestoreStats.PrepareDuration)
  return _internal_prepareduration();
}
inline void RestoreStats::_internal_set_prepareduration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  prepareduration_ = value;
}
inline void RestoreStats::set_prepareduration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_prepareduration(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RestoreStats.PrepareDuration)
}

// int64 CRIUDuration = 4[json_name = "CRIUDuration"];
inline void RestoreStats::clear_criuduration() {
  criuduration_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RestoreStats::_internal_criuduration() const {
  return criuduration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RestoreStats::criuduration() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RestoreStats.CRIUDuration)
  return _internal_criuduration();
}
inline void RestoreStats::_internal_set_criuduration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  criuduration_ = value;
}
inline void RestoreStats::set_criuduration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_criuduration(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RestoreStats.CRIUDuration)
}

// int64 GPUDuration = 5[json_name = "GPUDuration"];
inline void RestoreStats::clear_gpuduration() {
  gpuduration_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RestoreStats::_internal_gpuduration() const {
  return gpuduration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RestoreStats::gpuduration() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RestoreStats.GPUDuration)
  return _internal_gpuduration();
}
inline void RestoreStats::_internal_set_gpuduration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gpuduration_ = value;
}
inline void RestoreStats::set_gpuduration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gpuduration(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RestoreStats.GPUDuration)
}

// int64 DownloadDuration = 6[json_name = "DownloadDuration"];
inline void RestoreStats::clear_downloadduration() {
  downloadduration_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RestoreStats::_internal_downloadduration() const {
  return downloadduration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RestoreStats::downloadduration() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RestoreStats.DownloadDuration)
  return _internal_downloadduration();
}
inline void RestoreStats::_internal_set_downloadduration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  downloadduration_ = value;
}
inline void RestoreStats::set_downloadduration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_downloadduration(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RestoreStats.DownloadDuration)
}

// .cedana.services.task.CheckpointFileStats CheckpointFileStats = 7[json_name = "CheckpointFileStats"];
inline bool RestoreStats::_internal_has_checkpointfilestats() const {
  return this != internal_default_instance() && checkpointfilestats_ != nullptr;
}
inline bool RestoreStats::has_checkpointfilestats() const {
  return _internal_has_checkpointfilestats();
}
inline void RestoreStats::clear_checkpointfilestats() {
  if (GetArena() == nullptr && checkpointfilestats_ != nullptr) {
    delete checkpointfilestats_;
  }
  checkpointfilestats_ = nullptr;
}
inline const ::cedana::services::task::CheckpointFileStats& RestoreStats::_internal_checkpointfilestats() const {
  const ::cedana::services::task::CheckpointFileStats* p = checkpointfilestats_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cedana::services::task::CheckpointFileStats*>(
      &::cedana::services::task::_CheckpointFileStats_default_instance_);
}
inline const ::cedana::services::task::CheckpointFileStats& RestoreStats::checkpointfilestats() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RestoreStats.CheckpointFileStats)
  return _internal_checkpointfilestats();
}
inline void RestoreStats::unsafe_arena_set_allocated_checkpointfilestats(
    ::cedana::services::task::CheckpointFileStats* checkpointfilestats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(checkpointfilestats_);
  }
  checkpointfilestats_ = checkpointfilestats;
  if (checkpointfilestats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RestoreStats.CheckpointFileStats)
}
inline ::cedana::services::task::CheckpointFileStats* RestoreStats::release_checkpointfilestats() {
  auto temp = unsafe_arena_release_checkpointfilestats();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cedana::services::task::CheckpointFileStats* RestoreStats::unsafe_arena_release_checkpointfilestats() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RestoreStats.CheckpointFileStats)
  
  ::cedana::services::task::CheckpointFileStats* temp = checkpointfilestats_;
  checkpointfilestats_ = nullptr;
  return temp;
}
inline ::cedana::services::task::CheckpointFileStats* RestoreStats::_internal_mutable_checkpointfilestats() {
  
  if (checkpointfilestats_ == nullptr) {
    auto* p = CreateMaybeMessage<::cedana::services::task::CheckpointFileStats>(GetArena());
    checkpointfilestats_ = p;
  }
  return checkpointfilestats_;
}
inline ::cedana::services::task::CheckpointFileStats* RestoreStats::mutable_checkpointfilestats() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RestoreStats.CheckpointFileStats)
  return _internal_mutable_checkpointfilestats();
}
inline void RestoreStats::set_allocated_checkpointfilestats(::cedana::services::task::CheckpointFileStats* checkpointfilestats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete checkpointfilestats_;
  }
  if (checkpointfilestats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(checkpointfilestats);
    if (message_arena != submessage_arena) {
      checkpointfilestats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, checkpointfilestats, submessage_arena);
    }
    
  } else {
    
  }
  checkpointfilestats_ = checkpointfilestats;
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RestoreStats.CheckpointFileStats)
}

// .cedanagpu.GPURestoreStats GPURestoreStats = 8[json_name = "GPURestoreStats"];
inline bool RestoreStats::_internal_has_gpurestorestats() const {
  return this != internal_default_instance() && gpurestorestats_ != nullptr;
}
inline bool RestoreStats::has_gpurestorestats() const {
  return _internal_has_gpurestorestats();
}
inline const ::cedanagpu::GPURestoreStats& RestoreStats::_internal_gpurestorestats() const {
  const ::cedanagpu::GPURestoreStats* p = gpurestorestats_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cedanagpu::GPURestoreStats*>(
      &::cedanagpu::_GPURestoreStats_default_instance_);
}
inline const ::cedanagpu::GPURestoreStats& RestoreStats::gpurestorestats() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RestoreStats.GPURestoreStats)
  return _internal_gpurestorestats();
}
inline void RestoreStats::unsafe_arena_set_allocated_gpurestorestats(
    ::cedanagpu::GPURestoreStats* gpurestorestats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gpurestorestats_);
  }
  gpurestorestats_ = gpurestorestats;
  if (gpurestorestats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RestoreStats.GPURestoreStats)
}
inline ::cedanagpu::GPURestoreStats* RestoreStats::release_gpurestorestats() {
  auto temp = unsafe_arena_release_gpurestorestats();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cedanagpu::GPURestoreStats* RestoreStats::unsafe_arena_release_gpurestorestats() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RestoreStats.GPURestoreStats)
  
  ::cedanagpu::GPURestoreStats* temp = gpurestorestats_;
  gpurestorestats_ = nullptr;
  return temp;
}
inline ::cedanagpu::GPURestoreStats* RestoreStats::_internal_mutable_gpurestorestats() {
  
  if (gpurestorestats_ == nullptr) {
    auto* p = CreateMaybeMessage<::cedanagpu::GPURestoreStats>(GetArena());
    gpurestorestats_ = p;
  }
  return gpurestorestats_;
}
inline ::cedanagpu::GPURestoreStats* RestoreStats::mutable_gpurestorestats() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RestoreStats.GPURestoreStats)
  return _internal_mutable_gpurestorestats();
}
inline void RestoreStats::set_allocated_gpurestorestats(::cedanagpu::GPURestoreStats* gpurestorestats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gpurestorestats_);
  }
  if (gpurestorestats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gpurestorestats)->GetArena();
    if (message_arena != submessage_arena) {
      gpurestorestats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpurestorestats, submessage_arena);
    }
    
  } else {
    
  }
  gpurestorestats_ = gpurestorestats;
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RestoreStats.GPURestoreStats)
}

// -------------------------------------------------------------------

// CRIOImagePushArgs

// string OriginalImageRef = 1[json_name = "OriginalImageRef"];
inline void CRIOImagePushArgs::clear_originalimageref() {
  originalimageref_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CRIOImagePushArgs::originalimageref() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CRIOImagePushArgs.OriginalImageRef)
  return _internal_originalimageref();
}
inline void CRIOImagePushArgs::set_originalimageref(const std::string& value) {
  _internal_set_originalimageref(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CRIOImagePushArgs.OriginalImageRef)
}
inline std::string* CRIOImagePushArgs::mutable_originalimageref() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.CRIOImagePushArgs.OriginalImageRef)
  return _internal_mutable_originalimageref();
}
inline const std::string& CRIOImagePushArgs::_internal_originalimageref() const {
  return originalimageref_.Get();
}
inline void CRIOImagePushArgs::_internal_set_originalimageref(const std::string& value) {
  
  originalimageref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CRIOImagePushArgs::set_originalimageref(std::string&& value) {
  
  originalimageref_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.CRIOImagePushArgs.OriginalImageRef)
}
inline void CRIOImagePushArgs::set_originalimageref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  originalimageref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.CRIOImagePushArgs.OriginalImageRef)
}
inline void CRIOImagePushArgs::set_originalimageref(const char* value,
    size_t size) {
  
  originalimageref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.CRIOImagePushArgs.OriginalImageRef)
}
inline std::string* CRIOImagePushArgs::_internal_mutable_originalimageref() {
  
  return originalimageref_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CRIOImagePushArgs::release_originalimageref() {
  // @@protoc_insertion_point(field_release:cedana.services.task.CRIOImagePushArgs.OriginalImageRef)
  return originalimageref_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CRIOImagePushArgs::set_allocated_originalimageref(std::string* originalimageref) {
  if (originalimageref != nullptr) {
    
  } else {
    
  }
  originalimageref_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), originalimageref,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.CRIOImagePushArgs.OriginalImageRef)
}
inline std::string* CRIOImagePushArgs::unsafe_arena_release_originalimageref() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.CRIOImagePushArgs.OriginalImageRef)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return originalimageref_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CRIOImagePushArgs::unsafe_arena_set_allocated_originalimageref(
    std::string* originalimageref) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (originalimageref != nullptr) {
    
  } else {
    
  }
  originalimageref_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      originalimageref, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.CRIOImagePushArgs.OriginalImageRef)
}

// string NewImageRef = 2[json_name = "NewImageRef"];
inline void CRIOImagePushArgs::clear_newimageref() {
  newimageref_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CRIOImagePushArgs::newimageref() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CRIOImagePushArgs.NewImageRef)
  return _internal_newimageref();
}
inline void CRIOImagePushArgs::set_newimageref(const std::string& value) {
  _internal_set_newimageref(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CRIOImagePushArgs.NewImageRef)
}
inline std::string* CRIOImagePushArgs::mutable_newimageref() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.CRIOImagePushArgs.NewImageRef)
  return _internal_mutable_newimageref();
}
inline const std::string& CRIOImagePushArgs::_internal_newimageref() const {
  return newimageref_.Get();
}
inline void CRIOImagePushArgs::_internal_set_newimageref(const std::string& value) {
  
  newimageref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CRIOImagePushArgs::set_newimageref(std::string&& value) {
  
  newimageref_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.CRIOImagePushArgs.NewImageRef)
}
inline void CRIOImagePushArgs::set_newimageref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  newimageref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.CRIOImagePushArgs.NewImageRef)
}
inline void CRIOImagePushArgs::set_newimageref(const char* value,
    size_t size) {
  
  newimageref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.CRIOImagePushArgs.NewImageRef)
}
inline std::string* CRIOImagePushArgs::_internal_mutable_newimageref() {
  
  return newimageref_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CRIOImagePushArgs::release_newimageref() {
  // @@protoc_insertion_point(field_release:cedana.services.task.CRIOImagePushArgs.NewImageRef)
  return newimageref_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CRIOImagePushArgs::set_allocated_newimageref(std::string* newimageref) {
  if (newimageref != nullptr) {
    
  } else {
    
  }
  newimageref_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), newimageref,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.CRIOImagePushArgs.NewImageRef)
}
inline std::string* CRIOImagePushArgs::unsafe_arena_release_newimageref() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.CRIOImagePushArgs.NewImageRef)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return newimageref_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CRIOImagePushArgs::unsafe_arena_set_allocated_newimageref(
    std::string* newimageref) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (newimageref != nullptr) {
    
  } else {
    
  }
  newimageref_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      newimageref, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.CRIOImagePushArgs.NewImageRef)
}

// string RootfsDiffPath = 3[json_name = "RootfsDiffPath"];
inline void CRIOImagePushArgs::clear_rootfsdiffpath() {
  rootfsdiffpath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CRIOImagePushArgs::rootfsdiffpath() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CRIOImagePushArgs.RootfsDiffPath)
  return _internal_rootfsdiffpath();
}
inline void CRIOImagePushArgs::set_rootfsdiffpath(const std::string& value) {
  _internal_set_rootfsdiffpath(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CRIOImagePushArgs.RootfsDiffPath)
}
inline std::string* CRIOImagePushArgs::mutable_rootfsdiffpath() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.CRIOImagePushArgs.RootfsDiffPath)
  return _internal_mutable_rootfsdiffpath();
}
inline const std::string& CRIOImagePushArgs::_internal_rootfsdiffpath() const {
  return rootfsdiffpath_.Get();
}
inline void CRIOImagePushArgs::_internal_set_rootfsdiffpath(const std::string& value) {
  
  rootfsdiffpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CRIOImagePushArgs::set_rootfsdiffpath(std::string&& value) {
  
  rootfsdiffpath_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.CRIOImagePushArgs.RootfsDiffPath)
}
inline void CRIOImagePushArgs::set_rootfsdiffpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rootfsdiffpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.CRIOImagePushArgs.RootfsDiffPath)
}
inline void CRIOImagePushArgs::set_rootfsdiffpath(const char* value,
    size_t size) {
  
  rootfsdiffpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.CRIOImagePushArgs.RootfsDiffPath)
}
inline std::string* CRIOImagePushArgs::_internal_mutable_rootfsdiffpath() {
  
  return rootfsdiffpath_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CRIOImagePushArgs::release_rootfsdiffpath() {
  // @@protoc_insertion_point(field_release:cedana.services.task.CRIOImagePushArgs.RootfsDiffPath)
  return rootfsdiffpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CRIOImagePushArgs::set_allocated_rootfsdiffpath(std::string* rootfsdiffpath) {
  if (rootfsdiffpath != nullptr) {
    
  } else {
    
  }
  rootfsdiffpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rootfsdiffpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.CRIOImagePushArgs.RootfsDiffPath)
}
inline std::string* CRIOImagePushArgs::unsafe_arena_release_rootfsdiffpath() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.CRIOImagePushArgs.RootfsDiffPath)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return rootfsdiffpath_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CRIOImagePushArgs::unsafe_arena_set_allocated_rootfsdiffpath(
    std::string* rootfsdiffpath) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (rootfsdiffpath != nullptr) {
    
  } else {
    
  }
  rootfsdiffpath_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rootfsdiffpath, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.CRIOImagePushArgs.RootfsDiffPath)
}

// string ContainerStorage = 4[json_name = "ContainerStorage"];
inline void CRIOImagePushArgs::clear_containerstorage() {
  containerstorage_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CRIOImagePushArgs::containerstorage() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CRIOImagePushArgs.ContainerStorage)
  return _internal_containerstorage();
}
inline void CRIOImagePushArgs::set_containerstorage(const std::string& value) {
  _internal_set_containerstorage(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CRIOImagePushArgs.ContainerStorage)
}
inline std::string* CRIOImagePushArgs::mutable_containerstorage() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.CRIOImagePushArgs.ContainerStorage)
  return _internal_mutable_containerstorage();
}
inline const std::string& CRIOImagePushArgs::_internal_containerstorage() const {
  return containerstorage_.Get();
}
inline void CRIOImagePushArgs::_internal_set_containerstorage(const std::string& value) {
  
  containerstorage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CRIOImagePushArgs::set_containerstorage(std::string&& value) {
  
  containerstorage_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.CRIOImagePushArgs.ContainerStorage)
}
inline void CRIOImagePushArgs::set_containerstorage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  containerstorage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.CRIOImagePushArgs.ContainerStorage)
}
inline void CRIOImagePushArgs::set_containerstorage(const char* value,
    size_t size) {
  
  containerstorage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.CRIOImagePushArgs.ContainerStorage)
}
inline std::string* CRIOImagePushArgs::_internal_mutable_containerstorage() {
  
  return containerstorage_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CRIOImagePushArgs::release_containerstorage() {
  // @@protoc_insertion_point(field_release:cedana.services.task.CRIOImagePushArgs.ContainerStorage)
  return containerstorage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CRIOImagePushArgs::set_allocated_containerstorage(std::string* containerstorage) {
  if (containerstorage != nullptr) {
    
  } else {
    
  }
  containerstorage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), containerstorage,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.CRIOImagePushArgs.ContainerStorage)
}
inline std::string* CRIOImagePushArgs::unsafe_arena_release_containerstorage() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.CRIOImagePushArgs.ContainerStorage)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return containerstorage_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CRIOImagePushArgs::unsafe_arena_set_allocated_containerstorage(
    std::string* containerstorage) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (containerstorage != nullptr) {
    
  } else {
    
  }
  containerstorage_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      containerstorage, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.CRIOImagePushArgs.ContainerStorage)
}

// string RegistryAuthTokenPush = 5[json_name = "RegistryAuthTokenPush"];
inline void CRIOImagePushArgs::clear_registryauthtokenpush() {
  registryauthtokenpush_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CRIOImagePushArgs::registryauthtokenpush() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CRIOImagePushArgs.RegistryAuthTokenPush)
  return _internal_registryauthtokenpush();
}
inline void CRIOImagePushArgs::set_registryauthtokenpush(const std::string& value) {
  _internal_set_registryauthtokenpush(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CRIOImagePushArgs.RegistryAuthTokenPush)
}
inline std::string* CRIOImagePushArgs::mutable_registryauthtokenpush() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.CRIOImagePushArgs.RegistryAuthTokenPush)
  return _internal_mutable_registryauthtokenpush();
}
inline const std::string& CRIOImagePushArgs::_internal_registryauthtokenpush() const {
  return registryauthtokenpush_.Get();
}
inline void CRIOImagePushArgs::_internal_set_registryauthtokenpush(const std::string& value) {
  
  registryauthtokenpush_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CRIOImagePushArgs::set_registryauthtokenpush(std::string&& value) {
  
  registryauthtokenpush_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.CRIOImagePushArgs.RegistryAuthTokenPush)
}
inline void CRIOImagePushArgs::set_registryauthtokenpush(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  registryauthtokenpush_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.CRIOImagePushArgs.RegistryAuthTokenPush)
}
inline void CRIOImagePushArgs::set_registryauthtokenpush(const char* value,
    size_t size) {
  
  registryauthtokenpush_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.CRIOImagePushArgs.RegistryAuthTokenPush)
}
inline std::string* CRIOImagePushArgs::_internal_mutable_registryauthtokenpush() {
  
  return registryauthtokenpush_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CRIOImagePushArgs::release_registryauthtokenpush() {
  // @@protoc_insertion_point(field_release:cedana.services.task.CRIOImagePushArgs.RegistryAuthTokenPush)
  return registryauthtokenpush_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CRIOImagePushArgs::set_allocated_registryauthtokenpush(std::string* registryauthtokenpush) {
  if (registryauthtokenpush != nullptr) {
    
  } else {
    
  }
  registryauthtokenpush_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), registryauthtokenpush,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.CRIOImagePushArgs.RegistryAuthTokenPush)
}
inline std::string* CRIOImagePushArgs::unsafe_arena_release_registryauthtokenpush() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.CRIOImagePushArgs.RegistryAuthTokenPush)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return registryauthtokenpush_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CRIOImagePushArgs::unsafe_arena_set_allocated_registryauthtokenpush(
    std::string* registryauthtokenpush) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (registryauthtokenpush != nullptr) {
    
  } else {
    
  }
  registryauthtokenpush_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      registryauthtokenpush, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.CRIOImagePushArgs.RegistryAuthTokenPush)
}

// string RegistryAuthTokenPull = 6[json_name = "RegistryAuthTokenPull"];
inline void CRIOImagePushArgs::clear_registryauthtokenpull() {
  registryauthtokenpull_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CRIOImagePushArgs::registryauthtokenpull() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CRIOImagePushArgs.RegistryAuthTokenPull)
  return _internal_registryauthtokenpull();
}
inline void CRIOImagePushArgs::set_registryauthtokenpull(const std::string& value) {
  _internal_set_registryauthtokenpull(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CRIOImagePushArgs.RegistryAuthTokenPull)
}
inline std::string* CRIOImagePushArgs::mutable_registryauthtokenpull() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.CRIOImagePushArgs.RegistryAuthTokenPull)
  return _internal_mutable_registryauthtokenpull();
}
inline const std::string& CRIOImagePushArgs::_internal_registryauthtokenpull() const {
  return registryauthtokenpull_.Get();
}
inline void CRIOImagePushArgs::_internal_set_registryauthtokenpull(const std::string& value) {
  
  registryauthtokenpull_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CRIOImagePushArgs::set_registryauthtokenpull(std::string&& value) {
  
  registryauthtokenpull_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.CRIOImagePushArgs.RegistryAuthTokenPull)
}
inline void CRIOImagePushArgs::set_registryauthtokenpull(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  registryauthtokenpull_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.CRIOImagePushArgs.RegistryAuthTokenPull)
}
inline void CRIOImagePushArgs::set_registryauthtokenpull(const char* value,
    size_t size) {
  
  registryauthtokenpull_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.CRIOImagePushArgs.RegistryAuthTokenPull)
}
inline std::string* CRIOImagePushArgs::_internal_mutable_registryauthtokenpull() {
  
  return registryauthtokenpull_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CRIOImagePushArgs::release_registryauthtokenpull() {
  // @@protoc_insertion_point(field_release:cedana.services.task.CRIOImagePushArgs.RegistryAuthTokenPull)
  return registryauthtokenpull_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CRIOImagePushArgs::set_allocated_registryauthtokenpull(std::string* registryauthtokenpull) {
  if (registryauthtokenpull != nullptr) {
    
  } else {
    
  }
  registryauthtokenpull_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), registryauthtokenpull,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.CRIOImagePushArgs.RegistryAuthTokenPull)
}
inline std::string* CRIOImagePushArgs::unsafe_arena_release_registryauthtokenpull() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.CRIOImagePushArgs.RegistryAuthTokenPull)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return registryauthtokenpull_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CRIOImagePushArgs::unsafe_arena_set_allocated_registryauthtokenpull(
    std::string* registryauthtokenpull) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (registryauthtokenpull != nullptr) {
    
  } else {
    
  }
  registryauthtokenpull_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      registryauthtokenpull, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.CRIOImagePushArgs.RegistryAuthTokenPull)
}

// -------------------------------------------------------------------

// CRIOImagePushResp

// string Message = 1[json_name = "Message"];
inline void CRIOImagePushResp::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CRIOImagePushResp::message() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CRIOImagePushResp.Message)
  return _internal_message();
}
inline void CRIOImagePushResp::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CRIOImagePushResp.Message)
}
inline std::string* CRIOImagePushResp::mutable_message() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.CRIOImagePushResp.Message)
  return _internal_mutable_message();
}
inline const std::string& CRIOImagePushResp::_internal_message() const {
  return message_.Get();
}
inline void CRIOImagePushResp::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CRIOImagePushResp::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.CRIOImagePushResp.Message)
}
inline void CRIOImagePushResp::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.CRIOImagePushResp.Message)
}
inline void CRIOImagePushResp::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.CRIOImagePushResp.Message)
}
inline std::string* CRIOImagePushResp::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CRIOImagePushResp::release_message() {
  // @@protoc_insertion_point(field_release:cedana.services.task.CRIOImagePushResp.Message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CRIOImagePushResp::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.CRIOImagePushResp.Message)
}
inline std::string* CRIOImagePushResp::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.CRIOImagePushResp.Message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CRIOImagePushResp::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.CRIOImagePushResp.Message)
}

// -------------------------------------------------------------------

// CRIORootfsDumpArgs

// string ContainerID = 1[json_name = "ContainerID"];
inline void CRIORootfsDumpArgs::clear_containerid() {
  containerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CRIORootfsDumpArgs::containerid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CRIORootfsDumpArgs.ContainerID)
  return _internal_containerid();
}
inline void CRIORootfsDumpArgs::set_containerid(const std::string& value) {
  _internal_set_containerid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CRIORootfsDumpArgs.ContainerID)
}
inline std::string* CRIORootfsDumpArgs::mutable_containerid() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.CRIORootfsDumpArgs.ContainerID)
  return _internal_mutable_containerid();
}
inline const std::string& CRIORootfsDumpArgs::_internal_containerid() const {
  return containerid_.Get();
}
inline void CRIORootfsDumpArgs::_internal_set_containerid(const std::string& value) {
  
  containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CRIORootfsDumpArgs::set_containerid(std::string&& value) {
  
  containerid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.CRIORootfsDumpArgs.ContainerID)
}
inline void CRIORootfsDumpArgs::set_containerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.CRIORootfsDumpArgs.ContainerID)
}
inline void CRIORootfsDumpArgs::set_containerid(const char* value,
    size_t size) {
  
  containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.CRIORootfsDumpArgs.ContainerID)
}
inline std::string* CRIORootfsDumpArgs::_internal_mutable_containerid() {
  
  return containerid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CRIORootfsDumpArgs::release_containerid() {
  // @@protoc_insertion_point(field_release:cedana.services.task.CRIORootfsDumpArgs.ContainerID)
  return containerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CRIORootfsDumpArgs::set_allocated_containerid(std::string* containerid) {
  if (containerid != nullptr) {
    
  } else {
    
  }
  containerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), containerid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.CRIORootfsDumpArgs.ContainerID)
}
inline std::string* CRIORootfsDumpArgs::unsafe_arena_release_containerid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.CRIORootfsDumpArgs.ContainerID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return containerid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CRIORootfsDumpArgs::unsafe_arena_set_allocated_containerid(
    std::string* containerid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (containerid != nullptr) {
    
  } else {
    
  }
  containerid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      containerid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.CRIORootfsDumpArgs.ContainerID)
}

// string Dest = 2[json_name = "Dest"];
inline void CRIORootfsDumpArgs::clear_dest() {
  dest_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CRIORootfsDumpArgs::dest() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CRIORootfsDumpArgs.Dest)
  return _internal_dest();
}
inline void CRIORootfsDumpArgs::set_dest(const std::string& value) {
  _internal_set_dest(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CRIORootfsDumpArgs.Dest)
}
inline std::string* CRIORootfsDumpArgs::mutable_dest() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.CRIORootfsDumpArgs.Dest)
  return _internal_mutable_dest();
}
inline const std::string& CRIORootfsDumpArgs::_internal_dest() const {
  return dest_.Get();
}
inline void CRIORootfsDumpArgs::_internal_set_dest(const std::string& value) {
  
  dest_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CRIORootfsDumpArgs::set_dest(std::string&& value) {
  
  dest_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.CRIORootfsDumpArgs.Dest)
}
inline void CRIORootfsDumpArgs::set_dest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dest_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.CRIORootfsDumpArgs.Dest)
}
inline void CRIORootfsDumpArgs::set_dest(const char* value,
    size_t size) {
  
  dest_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.CRIORootfsDumpArgs.Dest)
}
inline std::string* CRIORootfsDumpArgs::_internal_mutable_dest() {
  
  return dest_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CRIORootfsDumpArgs::release_dest() {
  // @@protoc_insertion_point(field_release:cedana.services.task.CRIORootfsDumpArgs.Dest)
  return dest_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CRIORootfsDumpArgs::set_allocated_dest(std::string* dest) {
  if (dest != nullptr) {
    
  } else {
    
  }
  dest_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dest,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.CRIORootfsDumpArgs.Dest)
}
inline std::string* CRIORootfsDumpArgs::unsafe_arena_release_dest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.CRIORootfsDumpArgs.Dest)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dest_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CRIORootfsDumpArgs::unsafe_arena_set_allocated_dest(
    std::string* dest) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dest != nullptr) {
    
  } else {
    
  }
  dest_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dest, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.CRIORootfsDumpArgs.Dest)
}

// string ContainerStorage = 3[json_name = "ContainerStorage"];
inline void CRIORootfsDumpArgs::clear_containerstorage() {
  containerstorage_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CRIORootfsDumpArgs::containerstorage() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CRIORootfsDumpArgs.ContainerStorage)
  return _internal_containerstorage();
}
inline void CRIORootfsDumpArgs::set_containerstorage(const std::string& value) {
  _internal_set_containerstorage(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CRIORootfsDumpArgs.ContainerStorage)
}
inline std::string* CRIORootfsDumpArgs::mutable_containerstorage() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.CRIORootfsDumpArgs.ContainerStorage)
  return _internal_mutable_containerstorage();
}
inline const std::string& CRIORootfsDumpArgs::_internal_containerstorage() const {
  return containerstorage_.Get();
}
inline void CRIORootfsDumpArgs::_internal_set_containerstorage(const std::string& value) {
  
  containerstorage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CRIORootfsDumpArgs::set_containerstorage(std::string&& value) {
  
  containerstorage_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.CRIORootfsDumpArgs.ContainerStorage)
}
inline void CRIORootfsDumpArgs::set_containerstorage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  containerstorage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.CRIORootfsDumpArgs.ContainerStorage)
}
inline void CRIORootfsDumpArgs::set_containerstorage(const char* value,
    size_t size) {
  
  containerstorage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.CRIORootfsDumpArgs.ContainerStorage)
}
inline std::string* CRIORootfsDumpArgs::_internal_mutable_containerstorage() {
  
  return containerstorage_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CRIORootfsDumpArgs::release_containerstorage() {
  // @@protoc_insertion_point(field_release:cedana.services.task.CRIORootfsDumpArgs.ContainerStorage)
  return containerstorage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CRIORootfsDumpArgs::set_allocated_containerstorage(std::string* containerstorage) {
  if (containerstorage != nullptr) {
    
  } else {
    
  }
  containerstorage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), containerstorage,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.CRIORootfsDumpArgs.ContainerStorage)
}
inline std::string* CRIORootfsDumpArgs::unsafe_arena_release_containerstorage() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.CRIORootfsDumpArgs.ContainerStorage)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return containerstorage_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CRIORootfsDumpArgs::unsafe_arena_set_allocated_containerstorage(
    std::string* containerstorage) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (containerstorage != nullptr) {
    
  } else {
    
  }
  containerstorage_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      containerstorage, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.CRIORootfsDumpArgs.ContainerStorage)
}

// -------------------------------------------------------------------

// CRIORootfsDumpResp

// string Dest = 1[json_name = "Dest"];
inline void CRIORootfsDumpResp::clear_dest() {
  dest_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CRIORootfsDumpResp::dest() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CRIORootfsDumpResp.Dest)
  return _internal_dest();
}
inline void CRIORootfsDumpResp::set_dest(const std::string& value) {
  _internal_set_dest(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CRIORootfsDumpResp.Dest)
}
inline std::string* CRIORootfsDumpResp::mutable_dest() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.CRIORootfsDumpResp.Dest)
  return _internal_mutable_dest();
}
inline const std::string& CRIORootfsDumpResp::_internal_dest() const {
  return dest_.Get();
}
inline void CRIORootfsDumpResp::_internal_set_dest(const std::string& value) {
  
  dest_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CRIORootfsDumpResp::set_dest(std::string&& value) {
  
  dest_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.CRIORootfsDumpResp.Dest)
}
inline void CRIORootfsDumpResp::set_dest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dest_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.CRIORootfsDumpResp.Dest)
}
inline void CRIORootfsDumpResp::set_dest(const char* value,
    size_t size) {
  
  dest_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.CRIORootfsDumpResp.Dest)
}
inline std::string* CRIORootfsDumpResp::_internal_mutable_dest() {
  
  return dest_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CRIORootfsDumpResp::release_dest() {
  // @@protoc_insertion_point(field_release:cedana.services.task.CRIORootfsDumpResp.Dest)
  return dest_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CRIORootfsDumpResp::set_allocated_dest(std::string* dest) {
  if (dest != nullptr) {
    
  } else {
    
  }
  dest_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dest,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.CRIORootfsDumpResp.Dest)
}
inline std::string* CRIORootfsDumpResp::unsafe_arena_release_dest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.CRIORootfsDumpResp.Dest)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dest_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CRIORootfsDumpResp::unsafe_arena_set_allocated_dest(
    std::string* dest) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dest != nullptr) {
    
  } else {
    
  }
  dest_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dest, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.CRIORootfsDumpResp.Dest)
}

// -------------------------------------------------------------------

// StartArgs

// string Task = 1[json_name = "Task"];
inline void StartArgs::clear_task() {
  task_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartArgs::task() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.StartArgs.Task)
  return _internal_task();
}
inline void StartArgs::set_task(const std::string& value) {
  _internal_set_task(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.StartArgs.Task)
}
inline std::string* StartArgs::mutable_task() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.StartArgs.Task)
  return _internal_mutable_task();
}
inline const std::string& StartArgs::_internal_task() const {
  return task_.Get();
}
inline void StartArgs::_internal_set_task(const std::string& value) {
  
  task_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartArgs::set_task(std::string&& value) {
  
  task_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.StartArgs.Task)
}
inline void StartArgs::set_task(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  task_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.StartArgs.Task)
}
inline void StartArgs::set_task(const char* value,
    size_t size) {
  
  task_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.StartArgs.Task)
}
inline std::string* StartArgs::_internal_mutable_task() {
  
  return task_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartArgs::release_task() {
  // @@protoc_insertion_point(field_release:cedana.services.task.StartArgs.Task)
  return task_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartArgs::set_allocated_task(std::string* task) {
  if (task != nullptr) {
    
  } else {
    
  }
  task_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.StartArgs.Task)
}
inline std::string* StartArgs::unsafe_arena_release_task() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.StartArgs.Task)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return task_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartArgs::unsafe_arena_set_allocated_task(
    std::string* task) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (task != nullptr) {
    
  } else {
    
  }
  task_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      task, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.StartArgs.Task)
}

// string JID = 2[json_name = "JID"];
inline void StartArgs::clear_jid() {
  jid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartArgs::jid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.StartArgs.JID)
  return _internal_jid();
}
inline void StartArgs::set_jid(const std::string& value) {
  _internal_set_jid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.StartArgs.JID)
}
inline std::string* StartArgs::mutable_jid() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.StartArgs.JID)
  return _internal_mutable_jid();
}
inline const std::string& StartArgs::_internal_jid() const {
  return jid_.Get();
}
inline void StartArgs::_internal_set_jid(const std::string& value) {
  
  jid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartArgs::set_jid(std::string&& value) {
  
  jid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.StartArgs.JID)
}
inline void StartArgs::set_jid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  jid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.StartArgs.JID)
}
inline void StartArgs::set_jid(const char* value,
    size_t size) {
  
  jid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.StartArgs.JID)
}
inline std::string* StartArgs::_internal_mutable_jid() {
  
  return jid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartArgs::release_jid() {
  // @@protoc_insertion_point(field_release:cedana.services.task.StartArgs.JID)
  return jid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartArgs::set_allocated_jid(std::string* jid) {
  if (jid != nullptr) {
    
  } else {
    
  }
  jid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.StartArgs.JID)
}
inline std::string* StartArgs::unsafe_arena_release_jid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.StartArgs.JID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return jid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartArgs::unsafe_arena_set_allocated_jid(
    std::string* jid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (jid != nullptr) {
    
  } else {
    
  }
  jid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      jid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.StartArgs.JID)
}

// string WorkingDir = 3[json_name = "WorkingDir"];
inline void StartArgs::clear_workingdir() {
  workingdir_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartArgs::workingdir() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.StartArgs.WorkingDir)
  return _internal_workingdir();
}
inline void StartArgs::set_workingdir(const std::string& value) {
  _internal_set_workingdir(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.StartArgs.WorkingDir)
}
inline std::string* StartArgs::mutable_workingdir() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.StartArgs.WorkingDir)
  return _internal_mutable_workingdir();
}
inline const std::string& StartArgs::_internal_workingdir() const {
  return workingdir_.Get();
}
inline void StartArgs::_internal_set_workingdir(const std::string& value) {
  
  workingdir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartArgs::set_workingdir(std::string&& value) {
  
  workingdir_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.StartArgs.WorkingDir)
}
inline void StartArgs::set_workingdir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workingdir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.StartArgs.WorkingDir)
}
inline void StartArgs::set_workingdir(const char* value,
    size_t size) {
  
  workingdir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.StartArgs.WorkingDir)
}
inline std::string* StartArgs::_internal_mutable_workingdir() {
  
  return workingdir_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartArgs::release_workingdir() {
  // @@protoc_insertion_point(field_release:cedana.services.task.StartArgs.WorkingDir)
  return workingdir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartArgs::set_allocated_workingdir(std::string* workingdir) {
  if (workingdir != nullptr) {
    
  } else {
    
  }
  workingdir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workingdir,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.StartArgs.WorkingDir)
}
inline std::string* StartArgs::unsafe_arena_release_workingdir() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.StartArgs.WorkingDir)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return workingdir_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartArgs::unsafe_arena_set_allocated_workingdir(
    std::string* workingdir) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (workingdir != nullptr) {
    
  } else {
    
  }
  workingdir_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      workingdir, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.StartArgs.WorkingDir)
}

// repeated string Env = 4[json_name = "Env"];
inline int StartArgs::_internal_env_size() const {
  return env_.size();
}
inline int StartArgs::env_size() const {
  return _internal_env_size();
}
inline void StartArgs::clear_env() {
  env_.Clear();
}
inline std::string* StartArgs::add_env() {
  // @@protoc_insertion_point(field_add_mutable:cedana.services.task.StartArgs.Env)
  return _internal_add_env();
}
inline const std::string& StartArgs::_internal_env(int index) const {
  return env_.Get(index);
}
inline const std::string& StartArgs::env(int index) const {
  // @@protoc_insertion_point(field_get:cedana.services.task.StartArgs.Env)
  return _internal_env(index);
}
inline std::string* StartArgs::mutable_env(int index) {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.StartArgs.Env)
  return env_.Mutable(index);
}
inline void StartArgs::set_env(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:cedana.services.task.StartArgs.Env)
  env_.Mutable(index)->assign(value);
}
inline void StartArgs::set_env(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:cedana.services.task.StartArgs.Env)
  env_.Mutable(index)->assign(std::move(value));
}
inline void StartArgs::set_env(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  env_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cedana.services.task.StartArgs.Env)
}
inline void StartArgs::set_env(int index, const char* value, size_t size) {
  env_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.StartArgs.Env)
}
inline std::string* StartArgs::_internal_add_env() {
  return env_.Add();
}
inline void StartArgs::add_env(const std::string& value) {
  env_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cedana.services.task.StartArgs.Env)
}
inline void StartArgs::add_env(std::string&& value) {
  env_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cedana.services.task.StartArgs.Env)
}
inline void StartArgs::add_env(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  env_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cedana.services.task.StartArgs.Env)
}
inline void StartArgs::add_env(const char* value, size_t size) {
  env_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cedana.services.task.StartArgs.Env)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StartArgs::env() const {
  // @@protoc_insertion_point(field_list:cedana.services.task.StartArgs.Env)
  return env_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StartArgs::mutable_env() {
  // @@protoc_insertion_point(field_mutable_list:cedana.services.task.StartArgs.Env)
  return &env_;
}

// string LogOutputFile = 5[json_name = "LogOutputFile"];
inline void StartArgs::clear_logoutputfile() {
  logoutputfile_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartArgs::logoutputfile() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.StartArgs.LogOutputFile)
  return _internal_logoutputfile();
}
inline void StartArgs::set_logoutputfile(const std::string& value) {
  _internal_set_logoutputfile(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.StartArgs.LogOutputFile)
}
inline std::string* StartArgs::mutable_logoutputfile() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.StartArgs.LogOutputFile)
  return _internal_mutable_logoutputfile();
}
inline const std::string& StartArgs::_internal_logoutputfile() const {
  return logoutputfile_.Get();
}
inline void StartArgs::_internal_set_logoutputfile(const std::string& value) {
  
  logoutputfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartArgs::set_logoutputfile(std::string&& value) {
  
  logoutputfile_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.StartArgs.LogOutputFile)
}
inline void StartArgs::set_logoutputfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logoutputfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.StartArgs.LogOutputFile)
}
inline void StartArgs::set_logoutputfile(const char* value,
    size_t size) {
  
  logoutputfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.StartArgs.LogOutputFile)
}
inline std::string* StartArgs::_internal_mutable_logoutputfile() {
  
  return logoutputfile_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartArgs::release_logoutputfile() {
  // @@protoc_insertion_point(field_release:cedana.services.task.StartArgs.LogOutputFile)
  return logoutputfile_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartArgs::set_allocated_logoutputfile(std::string* logoutputfile) {
  if (logoutputfile != nullptr) {
    
  } else {
    
  }
  logoutputfile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logoutputfile,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.StartArgs.LogOutputFile)
}
inline std::string* StartArgs::unsafe_arena_release_logoutputfile() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.StartArgs.LogOutputFile)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return logoutputfile_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartArgs::unsafe_arena_set_allocated_logoutputfile(
    std::string* logoutputfile) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (logoutputfile != nullptr) {
    
  } else {
    
  }
  logoutputfile_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      logoutputfile, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.StartArgs.LogOutputFile)
}

// int32 UID = 6[json_name = "UID"];
inline void StartArgs::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartArgs::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartArgs::uid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.StartArgs.UID)
  return _internal_uid();
}
inline void StartArgs::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void StartArgs::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.StartArgs.UID)
}

// int32 GID = 7[json_name = "GID"];
inline void StartArgs::clear_gid() {
  gid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartArgs::_internal_gid() const {
  return gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartArgs::gid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.StartArgs.GID)
  return _internal_gid();
}
inline void StartArgs::_internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gid_ = value;
}
inline void StartArgs::set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.StartArgs.GID)
}

// bool GPU = 8[json_name = "GPU"];
inline void StartArgs::clear_gpu() {
  gpu_ = false;
}
inline bool StartArgs::_internal_gpu() const {
  return gpu_;
}
inline bool StartArgs::gpu() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.StartArgs.GPU)
  return _internal_gpu();
}
inline void StartArgs::_internal_set_gpu(bool value) {
  
  gpu_ = value;
}
inline void StartArgs::set_gpu(bool value) {
  _internal_set_gpu(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.StartArgs.GPU)
}

// repeated int32 Groups = 9[json_name = "Groups"];
inline int StartArgs::_internal_groups_size() const {
  return groups_.size();
}
inline int StartArgs::groups_size() const {
  return _internal_groups_size();
}
inline void StartArgs::clear_groups() {
  groups_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartArgs::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartArgs::groups(int index) const {
  // @@protoc_insertion_point(field_get:cedana.services.task.StartArgs.Groups)
  return _internal_groups(index);
}
inline void StartArgs::set_groups(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  groups_.Set(index, value);
  // @@protoc_insertion_point(field_set:cedana.services.task.StartArgs.Groups)
}
inline void StartArgs::_internal_add_groups(::PROTOBUF_NAMESPACE_ID::int32 value) {
  groups_.Add(value);
}
inline void StartArgs::add_groups(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_groups(value);
  // @@protoc_insertion_point(field_add:cedana.services.task.StartArgs.Groups)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
StartArgs::_internal_groups() const {
  return groups_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
StartArgs::groups() const {
  // @@protoc_insertion_point(field_list:cedana.services.task.StartArgs.Groups)
  return _internal_groups();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
StartArgs::_internal_mutable_groups() {
  return &groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
StartArgs::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:cedana.services.task.StartArgs.Groups)
  return _internal_mutable_groups();
}

// -------------------------------------------------------------------

// StartResp

// string Message = 1[json_name = "Message"];
inline void StartResp::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartResp::message() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.StartResp.Message)
  return _internal_message();
}
inline void StartResp::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.StartResp.Message)
}
inline std::string* StartResp::mutable_message() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.StartResp.Message)
  return _internal_mutable_message();
}
inline const std::string& StartResp::_internal_message() const {
  return message_.Get();
}
inline void StartResp::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartResp::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.StartResp.Message)
}
inline void StartResp::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.StartResp.Message)
}
inline void StartResp::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.StartResp.Message)
}
inline std::string* StartResp::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartResp::release_message() {
  // @@protoc_insertion_point(field_release:cedana.services.task.StartResp.Message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartResp::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.StartResp.Message)
}
inline std::string* StartResp::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.StartResp.Message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartResp::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.StartResp.Message)
}

// int32 PID = 2[json_name = "PID"];
inline void StartResp::clear_pid() {
  pid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartResp::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartResp::pid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.StartResp.PID)
  return _internal_pid();
}
inline void StartResp::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pid_ = value;
}
inline void StartResp::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.StartResp.PID)
}

// string JID = 3[json_name = "JID"];
inline void StartResp::clear_jid() {
  jid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartResp::jid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.StartResp.JID)
  return _internal_jid();
}
inline void StartResp::set_jid(const std::string& value) {
  _internal_set_jid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.StartResp.JID)
}
inline std::string* StartResp::mutable_jid() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.StartResp.JID)
  return _internal_mutable_jid();
}
inline const std::string& StartResp::_internal_jid() const {
  return jid_.Get();
}
inline void StartResp::_internal_set_jid(const std::string& value) {
  
  jid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartResp::set_jid(std::string&& value) {
  
  jid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.StartResp.JID)
}
inline void StartResp::set_jid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  jid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.StartResp.JID)
}
inline void StartResp::set_jid(const char* value,
    size_t size) {
  
  jid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.StartResp.JID)
}
inline std::string* StartResp::_internal_mutable_jid() {
  
  return jid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartResp::release_jid() {
  // @@protoc_insertion_point(field_release:cedana.services.task.StartResp.JID)
  return jid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartResp::set_allocated_jid(std::string* jid) {
  if (jid != nullptr) {
    
  } else {
    
  }
  jid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.StartResp.JID)
}
inline std::string* StartResp::unsafe_arena_release_jid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.StartResp.JID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return jid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartResp::unsafe_arena_set_allocated_jid(
    std::string* jid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (jid != nullptr) {
    
  } else {
    
  }
  jid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      jid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.StartResp.JID)
}

// -------------------------------------------------------------------

// DumpArgs

// int32 PID = 1[json_name = "PID"];
inline void DumpArgs::clear_pid() {
  pid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DumpArgs::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DumpArgs::pid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.DumpArgs.PID)
  return _internal_pid();
}
inline void DumpArgs::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pid_ = value;
}
inline void DumpArgs::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.DumpArgs.PID)
}

// string Dir = 2[json_name = "Dir"];
inline void DumpArgs::clear_dir() {
  dir_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DumpArgs::dir() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.DumpArgs.Dir)
  return _internal_dir();
}
inline void DumpArgs::set_dir(const std::string& value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.DumpArgs.Dir)
}
inline std::string* DumpArgs::mutable_dir() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.DumpArgs.Dir)
  return _internal_mutable_dir();
}
inline const std::string& DumpArgs::_internal_dir() const {
  return dir_.Get();
}
inline void DumpArgs::_internal_set_dir(const std::string& value) {
  
  dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DumpArgs::set_dir(std::string&& value) {
  
  dir_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.DumpArgs.Dir)
}
inline void DumpArgs::set_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.DumpArgs.Dir)
}
inline void DumpArgs::set_dir(const char* value,
    size_t size) {
  
  dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.DumpArgs.Dir)
}
inline std::string* DumpArgs::_internal_mutable_dir() {
  
  return dir_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DumpArgs::release_dir() {
  // @@protoc_insertion_point(field_release:cedana.services.task.DumpArgs.Dir)
  return dir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DumpArgs::set_allocated_dir(std::string* dir) {
  if (dir != nullptr) {
    
  } else {
    
  }
  dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dir,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.DumpArgs.Dir)
}
inline std::string* DumpArgs::unsafe_arena_release_dir() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.DumpArgs.Dir)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dir_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DumpArgs::unsafe_arena_set_allocated_dir(
    std::string* dir) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dir != nullptr) {
    
  } else {
    
  }
  dir_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dir, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.DumpArgs.Dir)
}

// .cedana.services.task.CRType Type = 3[json_name = "Type"];
inline void DumpArgs::clear_type() {
  type_ = 0;
}
inline ::cedana::services::task::CRType DumpArgs::_internal_type() const {
  return static_cast< ::cedana::services::task::CRType >(type_);
}
inline ::cedana::services::task::CRType DumpArgs::type() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.DumpArgs.Type)
  return _internal_type();
}
inline void DumpArgs::_internal_set_type(::cedana::services::task::CRType value) {
  
  type_ = value;
}
inline void DumpArgs::set_type(::cedana::services::task::CRType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.DumpArgs.Type)
}

// string JID = 4[json_name = "JID"];
inline void DumpArgs::clear_jid() {
  jid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DumpArgs::jid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.DumpArgs.JID)
  return _internal_jid();
}
inline void DumpArgs::set_jid(const std::string& value) {
  _internal_set_jid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.DumpArgs.JID)
}
inline std::string* DumpArgs::mutable_jid() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.DumpArgs.JID)
  return _internal_mutable_jid();
}
inline const std::string& DumpArgs::_internal_jid() const {
  return jid_.Get();
}
inline void DumpArgs::_internal_set_jid(const std::string& value) {
  
  jid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DumpArgs::set_jid(std::string&& value) {
  
  jid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.DumpArgs.JID)
}
inline void DumpArgs::set_jid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  jid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.DumpArgs.JID)
}
inline void DumpArgs::set_jid(const char* value,
    size_t size) {
  
  jid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.DumpArgs.JID)
}
inline std::string* DumpArgs::_internal_mutable_jid() {
  
  return jid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DumpArgs::release_jid() {
  // @@protoc_insertion_point(field_release:cedana.services.task.DumpArgs.JID)
  return jid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DumpArgs::set_allocated_jid(std::string* jid) {
  if (jid != nullptr) {
    
  } else {
    
  }
  jid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.DumpArgs.JID)
}
inline std::string* DumpArgs::unsafe_arena_release_jid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.DumpArgs.JID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return jid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DumpArgs::unsafe_arena_set_allocated_jid(
    std::string* jid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (jid != nullptr) {
    
  } else {
    
  }
  jid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      jid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.DumpArgs.JID)
}

// bool GPU = 5[json_name = "GPU"];
inline void DumpArgs::clear_gpu() {
  gpu_ = false;
}
inline bool DumpArgs::_internal_gpu() const {
  return gpu_;
}
inline bool DumpArgs::gpu() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.DumpArgs.GPU)
  return _internal_gpu();
}
inline void DumpArgs::_internal_set_gpu(bool value) {
  
  gpu_ = value;
}
inline void DumpArgs::set_gpu(bool value) {
  _internal_set_gpu(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.DumpArgs.GPU)
}

// bool Stream = 6[json_name = "Stream"];
inline void DumpArgs::clear_stream() {
  stream_ = false;
}
inline bool DumpArgs::_internal_stream() const {
  return stream_;
}
inline bool DumpArgs::stream() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.DumpArgs.Stream)
  return _internal_stream();
}
inline void DumpArgs::_internal_set_stream(bool value) {
  
  stream_ = value;
}
inline void DumpArgs::set_stream(bool value) {
  _internal_set_stream(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.DumpArgs.Stream)
}

// .cedana.services.task.CriuOpts CriuOpts = 7[json_name = "CriuOpts"];
inline bool DumpArgs::_internal_has_criuopts() const {
  return this != internal_default_instance() && criuopts_ != nullptr;
}
inline bool DumpArgs::has_criuopts() const {
  return _internal_has_criuopts();
}
inline void DumpArgs::clear_criuopts() {
  if (GetArena() == nullptr && criuopts_ != nullptr) {
    delete criuopts_;
  }
  criuopts_ = nullptr;
}
inline const ::cedana::services::task::CriuOpts& DumpArgs::_internal_criuopts() const {
  const ::cedana::services::task::CriuOpts* p = criuopts_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cedana::services::task::CriuOpts*>(
      &::cedana::services::task::_CriuOpts_default_instance_);
}
inline const ::cedana::services::task::CriuOpts& DumpArgs::criuopts() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.DumpArgs.CriuOpts)
  return _internal_criuopts();
}
inline void DumpArgs::unsafe_arena_set_allocated_criuopts(
    ::cedana::services::task::CriuOpts* criuopts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(criuopts_);
  }
  criuopts_ = criuopts;
  if (criuopts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.DumpArgs.CriuOpts)
}
inline ::cedana::services::task::CriuOpts* DumpArgs::release_criuopts() {
  auto temp = unsafe_arena_release_criuopts();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cedana::services::task::CriuOpts* DumpArgs::unsafe_arena_release_criuopts() {
  // @@protoc_insertion_point(field_release:cedana.services.task.DumpArgs.CriuOpts)
  
  ::cedana::services::task::CriuOpts* temp = criuopts_;
  criuopts_ = nullptr;
  return temp;
}
inline ::cedana::services::task::CriuOpts* DumpArgs::_internal_mutable_criuopts() {
  
  if (criuopts_ == nullptr) {
    auto* p = CreateMaybeMessage<::cedana::services::task::CriuOpts>(GetArena());
    criuopts_ = p;
  }
  return criuopts_;
}
inline ::cedana::services::task::CriuOpts* DumpArgs::mutable_criuopts() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.DumpArgs.CriuOpts)
  return _internal_mutable_criuopts();
}
inline void DumpArgs::set_allocated_criuopts(::cedana::services::task::CriuOpts* criuopts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete criuopts_;
  }
  if (criuopts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(criuopts);
    if (message_arena != submessage_arena) {
      criuopts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, criuopts, submessage_arena);
    }
    
  } else {
    
  }
  criuopts_ = criuopts;
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.DumpArgs.CriuOpts)
}

// -------------------------------------------------------------------

// DumpResp

// string Message = 1[json_name = "Message"];
inline void DumpResp::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DumpResp::message() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.DumpResp.Message)
  return _internal_message();
}
inline void DumpResp::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.DumpResp.Message)
}
inline std::string* DumpResp::mutable_message() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.DumpResp.Message)
  return _internal_mutable_message();
}
inline const std::string& DumpResp::_internal_message() const {
  return message_.Get();
}
inline void DumpResp::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DumpResp::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.DumpResp.Message)
}
inline void DumpResp::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.DumpResp.Message)
}
inline void DumpResp::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.DumpResp.Message)
}
inline std::string* DumpResp::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DumpResp::release_message() {
  // @@protoc_insertion_point(field_release:cedana.services.task.DumpResp.Message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DumpResp::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.DumpResp.Message)
}
inline std::string* DumpResp::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.DumpResp.Message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DumpResp::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.DumpResp.Message)
}

// string CheckpointID = 2[json_name = "CheckpointID"];
inline void DumpResp::clear_checkpointid() {
  checkpointid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DumpResp::checkpointid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.DumpResp.CheckpointID)
  return _internal_checkpointid();
}
inline void DumpResp::set_checkpointid(const std::string& value) {
  _internal_set_checkpointid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.DumpResp.CheckpointID)
}
inline std::string* DumpResp::mutable_checkpointid() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.DumpResp.CheckpointID)
  return _internal_mutable_checkpointid();
}
inline const std::string& DumpResp::_internal_checkpointid() const {
  return checkpointid_.Get();
}
inline void DumpResp::_internal_set_checkpointid(const std::string& value) {
  
  checkpointid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DumpResp::set_checkpointid(std::string&& value) {
  
  checkpointid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.DumpResp.CheckpointID)
}
inline void DumpResp::set_checkpointid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  checkpointid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.DumpResp.CheckpointID)
}
inline void DumpResp::set_checkpointid(const char* value,
    size_t size) {
  
  checkpointid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.DumpResp.CheckpointID)
}
inline std::string* DumpResp::_internal_mutable_checkpointid() {
  
  return checkpointid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DumpResp::release_checkpointid() {
  // @@protoc_insertion_point(field_release:cedana.services.task.DumpResp.CheckpointID)
  return checkpointid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DumpResp::set_allocated_checkpointid(std::string* checkpointid) {
  if (checkpointid != nullptr) {
    
  } else {
    
  }
  checkpointid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), checkpointid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.DumpResp.CheckpointID)
}
inline std::string* DumpResp::unsafe_arena_release_checkpointid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.DumpResp.CheckpointID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return checkpointid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DumpResp::unsafe_arena_set_allocated_checkpointid(
    std::string* checkpointid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (checkpointid != nullptr) {
    
  } else {
    
  }
  checkpointid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      checkpointid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.DumpResp.CheckpointID)
}

// string UploadID = 3[json_name = "UploadID"];
inline void DumpResp::clear_uploadid() {
  uploadid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DumpResp::uploadid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.DumpResp.UploadID)
  return _internal_uploadid();
}
inline void DumpResp::set_uploadid(const std::string& value) {
  _internal_set_uploadid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.DumpResp.UploadID)
}
inline std::string* DumpResp::mutable_uploadid() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.DumpResp.UploadID)
  return _internal_mutable_uploadid();
}
inline const std::string& DumpResp::_internal_uploadid() const {
  return uploadid_.Get();
}
inline void DumpResp::_internal_set_uploadid(const std::string& value) {
  
  uploadid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DumpResp::set_uploadid(std::string&& value) {
  
  uploadid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.DumpResp.UploadID)
}
inline void DumpResp::set_uploadid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uploadid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.DumpResp.UploadID)
}
inline void DumpResp::set_uploadid(const char* value,
    size_t size) {
  
  uploadid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.DumpResp.UploadID)
}
inline std::string* DumpResp::_internal_mutable_uploadid() {
  
  return uploadid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DumpResp::release_uploadid() {
  // @@protoc_insertion_point(field_release:cedana.services.task.DumpResp.UploadID)
  return uploadid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DumpResp::set_allocated_uploadid(std::string* uploadid) {
  if (uploadid != nullptr) {
    
  } else {
    
  }
  uploadid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uploadid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.DumpResp.UploadID)
}
inline std::string* DumpResp::unsafe_arena_release_uploadid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.DumpResp.UploadID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return uploadid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DumpResp::unsafe_arena_set_allocated_uploadid(
    std::string* uploadid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uploadid != nullptr) {
    
  } else {
    
  }
  uploadid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uploadid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.DumpResp.UploadID)
}

// .cedana.services.task.ProcessState State = 4[json_name = "State"];
inline bool DumpResp::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool DumpResp::has_state() const {
  return _internal_has_state();
}
inline void DumpResp::clear_state() {
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::cedana::services::task::ProcessState& DumpResp::_internal_state() const {
  const ::cedana::services::task::ProcessState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cedana::services::task::ProcessState*>(
      &::cedana::services::task::_ProcessState_default_instance_);
}
inline const ::cedana::services::task::ProcessState& DumpResp::state() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.DumpResp.State)
  return _internal_state();
}
inline void DumpResp::unsafe_arena_set_allocated_state(
    ::cedana::services::task::ProcessState* state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.DumpResp.State)
}
inline ::cedana::services::task::ProcessState* DumpResp::release_state() {
  auto temp = unsafe_arena_release_state();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cedana::services::task::ProcessState* DumpResp::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:cedana.services.task.DumpResp.State)
  
  ::cedana::services::task::ProcessState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::cedana::services::task::ProcessState* DumpResp::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::cedana::services::task::ProcessState>(GetArena());
    state_ = p;
  }
  return state_;
}
inline ::cedana::services::task::ProcessState* DumpResp::mutable_state() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.DumpResp.State)
  return _internal_mutable_state();
}
inline void DumpResp::set_allocated_state(::cedana::services::task::ProcessState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.DumpResp.State)
}

// .cedana.services.task.DumpStats DumpStats = 5[json_name = "DumpStats"];
inline bool DumpResp::_internal_has_dumpstats() const {
  return this != internal_default_instance() && dumpstats_ != nullptr;
}
inline bool DumpResp::has_dumpstats() const {
  return _internal_has_dumpstats();
}
inline void DumpResp::clear_dumpstats() {
  if (GetArena() == nullptr && dumpstats_ != nullptr) {
    delete dumpstats_;
  }
  dumpstats_ = nullptr;
}
inline const ::cedana::services::task::DumpStats& DumpResp::_internal_dumpstats() const {
  const ::cedana::services::task::DumpStats* p = dumpstats_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cedana::services::task::DumpStats*>(
      &::cedana::services::task::_DumpStats_default_instance_);
}
inline const ::cedana::services::task::DumpStats& DumpResp::dumpstats() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.DumpResp.DumpStats)
  return _internal_dumpstats();
}
inline void DumpResp::unsafe_arena_set_allocated_dumpstats(
    ::cedana::services::task::DumpStats* dumpstats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dumpstats_);
  }
  dumpstats_ = dumpstats;
  if (dumpstats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.DumpResp.DumpStats)
}
inline ::cedana::services::task::DumpStats* DumpResp::release_dumpstats() {
  auto temp = unsafe_arena_release_dumpstats();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cedana::services::task::DumpStats* DumpResp::unsafe_arena_release_dumpstats() {
  // @@protoc_insertion_point(field_release:cedana.services.task.DumpResp.DumpStats)
  
  ::cedana::services::task::DumpStats* temp = dumpstats_;
  dumpstats_ = nullptr;
  return temp;
}
inline ::cedana::services::task::DumpStats* DumpResp::_internal_mutable_dumpstats() {
  
  if (dumpstats_ == nullptr) {
    auto* p = CreateMaybeMessage<::cedana::services::task::DumpStats>(GetArena());
    dumpstats_ = p;
  }
  return dumpstats_;
}
inline ::cedana::services::task::DumpStats* DumpResp::mutable_dumpstats() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.DumpResp.DumpStats)
  return _internal_mutable_dumpstats();
}
inline void DumpResp::set_allocated_dumpstats(::cedana::services::task::DumpStats* dumpstats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dumpstats_;
  }
  if (dumpstats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dumpstats);
    if (message_arena != submessage_arena) {
      dumpstats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dumpstats, submessage_arena);
    }
    
  } else {
    
  }
  dumpstats_ = dumpstats;
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.DumpResp.DumpStats)
}

// -------------------------------------------------------------------

// RestoreArgs

// .cedana.services.task.CRType Type = 1[json_name = "Type"];
inline void RestoreArgs::clear_type() {
  type_ = 0;
}
inline ::cedana::services::task::CRType RestoreArgs::_internal_type() const {
  return static_cast< ::cedana::services::task::CRType >(type_);
}
inline ::cedana::services::task::CRType RestoreArgs::type() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RestoreArgs.Type)
  return _internal_type();
}
inline void RestoreArgs::_internal_set_type(::cedana::services::task::CRType value) {
  
  type_ = value;
}
inline void RestoreArgs::set_type(::cedana::services::task::CRType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RestoreArgs.Type)
}

// string CheckpointID = 2[json_name = "CheckpointID"];
inline void RestoreArgs::clear_checkpointid() {
  checkpointid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RestoreArgs::checkpointid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RestoreArgs.CheckpointID)
  return _internal_checkpointid();
}
inline void RestoreArgs::set_checkpointid(const std::string& value) {
  _internal_set_checkpointid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RestoreArgs.CheckpointID)
}
inline std::string* RestoreArgs::mutable_checkpointid() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RestoreArgs.CheckpointID)
  return _internal_mutable_checkpointid();
}
inline const std::string& RestoreArgs::_internal_checkpointid() const {
  return checkpointid_.Get();
}
inline void RestoreArgs::_internal_set_checkpointid(const std::string& value) {
  
  checkpointid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RestoreArgs::set_checkpointid(std::string&& value) {
  
  checkpointid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RestoreArgs.CheckpointID)
}
inline void RestoreArgs::set_checkpointid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  checkpointid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RestoreArgs.CheckpointID)
}
inline void RestoreArgs::set_checkpointid(const char* value,
    size_t size) {
  
  checkpointid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RestoreArgs.CheckpointID)
}
inline std::string* RestoreArgs::_internal_mutable_checkpointid() {
  
  return checkpointid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RestoreArgs::release_checkpointid() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RestoreArgs.CheckpointID)
  return checkpointid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RestoreArgs::set_allocated_checkpointid(std::string* checkpointid) {
  if (checkpointid != nullptr) {
    
  } else {
    
  }
  checkpointid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), checkpointid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RestoreArgs.CheckpointID)
}
inline std::string* RestoreArgs::unsafe_arena_release_checkpointid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RestoreArgs.CheckpointID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return checkpointid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RestoreArgs::unsafe_arena_set_allocated_checkpointid(
    std::string* checkpointid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (checkpointid != nullptr) {
    
  } else {
    
  }
  checkpointid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      checkpointid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RestoreArgs.CheckpointID)
}

// string CheckpointPath = 3[json_name = "CheckpointPath"];
inline void RestoreArgs::clear_checkpointpath() {
  checkpointpath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RestoreArgs::checkpointpath() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RestoreArgs.CheckpointPath)
  return _internal_checkpointpath();
}
inline void RestoreArgs::set_checkpointpath(const std::string& value) {
  _internal_set_checkpointpath(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RestoreArgs.CheckpointPath)
}
inline std::string* RestoreArgs::mutable_checkpointpath() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RestoreArgs.CheckpointPath)
  return _internal_mutable_checkpointpath();
}
inline const std::string& RestoreArgs::_internal_checkpointpath() const {
  return checkpointpath_.Get();
}
inline void RestoreArgs::_internal_set_checkpointpath(const std::string& value) {
  
  checkpointpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RestoreArgs::set_checkpointpath(std::string&& value) {
  
  checkpointpath_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RestoreArgs.CheckpointPath)
}
inline void RestoreArgs::set_checkpointpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  checkpointpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RestoreArgs.CheckpointPath)
}
inline void RestoreArgs::set_checkpointpath(const char* value,
    size_t size) {
  
  checkpointpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RestoreArgs.CheckpointPath)
}
inline std::string* RestoreArgs::_internal_mutable_checkpointpath() {
  
  return checkpointpath_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RestoreArgs::release_checkpointpath() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RestoreArgs.CheckpointPath)
  return checkpointpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RestoreArgs::set_allocated_checkpointpath(std::string* checkpointpath) {
  if (checkpointpath != nullptr) {
    
  } else {
    
  }
  checkpointpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), checkpointpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RestoreArgs.CheckpointPath)
}
inline std::string* RestoreArgs::unsafe_arena_release_checkpointpath() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RestoreArgs.CheckpointPath)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return checkpointpath_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RestoreArgs::unsafe_arena_set_allocated_checkpointpath(
    std::string* checkpointpath) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (checkpointpath != nullptr) {
    
  } else {
    
  }
  checkpointpath_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      checkpointpath, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RestoreArgs.CheckpointPath)
}

// string JID = 4[json_name = "JID"];
inline void RestoreArgs::clear_jid() {
  jid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RestoreArgs::jid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RestoreArgs.JID)
  return _internal_jid();
}
inline void RestoreArgs::set_jid(const std::string& value) {
  _internal_set_jid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RestoreArgs.JID)
}
inline std::string* RestoreArgs::mutable_jid() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RestoreArgs.JID)
  return _internal_mutable_jid();
}
inline const std::string& RestoreArgs::_internal_jid() const {
  return jid_.Get();
}
inline void RestoreArgs::_internal_set_jid(const std::string& value) {
  
  jid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RestoreArgs::set_jid(std::string&& value) {
  
  jid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RestoreArgs.JID)
}
inline void RestoreArgs::set_jid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  jid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RestoreArgs.JID)
}
inline void RestoreArgs::set_jid(const char* value,
    size_t size) {
  
  jid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RestoreArgs.JID)
}
inline std::string* RestoreArgs::_internal_mutable_jid() {
  
  return jid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RestoreArgs::release_jid() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RestoreArgs.JID)
  return jid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RestoreArgs::set_allocated_jid(std::string* jid) {
  if (jid != nullptr) {
    
  } else {
    
  }
  jid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RestoreArgs.JID)
}
inline std::string* RestoreArgs::unsafe_arena_release_jid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RestoreArgs.JID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return jid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RestoreArgs::unsafe_arena_set_allocated_jid(
    std::string* jid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (jid != nullptr) {
    
  } else {
    
  }
  jid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      jid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RestoreArgs.JID)
}

// int32 UID = 5[json_name = "UID"];
inline void RestoreArgs::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RestoreArgs::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RestoreArgs::uid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RestoreArgs.UID)
  return _internal_uid();
}
inline void RestoreArgs::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void RestoreArgs::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RestoreArgs.UID)
}

// int32 GID = 6[json_name = "GID"];
inline void RestoreArgs::clear_gid() {
  gid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RestoreArgs::_internal_gid() const {
  return gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RestoreArgs::gid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RestoreArgs.GID)
  return _internal_gid();
}
inline void RestoreArgs::_internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gid_ = value;
}
inline void RestoreArgs::set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RestoreArgs.GID)
}

// repeated int32 Groups = 7[json_name = "Groups"];
inline int RestoreArgs::_internal_groups_size() const {
  return groups_.size();
}
inline int RestoreArgs::groups_size() const {
  return _internal_groups_size();
}
inline void RestoreArgs::clear_groups() {
  groups_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RestoreArgs::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RestoreArgs::groups(int index) const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RestoreArgs.Groups)
  return _internal_groups(index);
}
inline void RestoreArgs::set_groups(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  groups_.Set(index, value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RestoreArgs.Groups)
}
inline void RestoreArgs::_internal_add_groups(::PROTOBUF_NAMESPACE_ID::int32 value) {
  groups_.Add(value);
}
inline void RestoreArgs::add_groups(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_groups(value);
  // @@protoc_insertion_point(field_add:cedana.services.task.RestoreArgs.Groups)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RestoreArgs::_internal_groups() const {
  return groups_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RestoreArgs::groups() const {
  // @@protoc_insertion_point(field_list:cedana.services.task.RestoreArgs.Groups)
  return _internal_groups();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RestoreArgs::_internal_mutable_groups() {
  return &groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RestoreArgs::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:cedana.services.task.RestoreArgs.Groups)
  return _internal_mutable_groups();
}

// bool Stream = 8[json_name = "Stream"];
inline void RestoreArgs::clear_stream() {
  stream_ = false;
}
inline bool RestoreArgs::_internal_stream() const {
  return stream_;
}
inline bool RestoreArgs::stream() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RestoreArgs.Stream)
  return _internal_stream();
}
inline void RestoreArgs::_internal_set_stream(bool value) {
  
  stream_ = value;
}
inline void RestoreArgs::set_stream(bool value) {
  _internal_set_stream(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RestoreArgs.Stream)
}

// .cedana.services.task.CriuOpts CriuOpts = 9[json_name = "CriuOpts"];
inline bool RestoreArgs::_internal_has_criuopts() const {
  return this != internal_default_instance() && criuopts_ != nullptr;
}
inline bool RestoreArgs::has_criuopts() const {
  return _internal_has_criuopts();
}
inline void RestoreArgs::clear_criuopts() {
  if (GetArena() == nullptr && criuopts_ != nullptr) {
    delete criuopts_;
  }
  criuopts_ = nullptr;
}
inline const ::cedana::services::task::CriuOpts& RestoreArgs::_internal_criuopts() const {
  const ::cedana::services::task::CriuOpts* p = criuopts_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cedana::services::task::CriuOpts*>(
      &::cedana::services::task::_CriuOpts_default_instance_);
}
inline const ::cedana::services::task::CriuOpts& RestoreArgs::criuopts() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RestoreArgs.CriuOpts)
  return _internal_criuopts();
}
inline void RestoreArgs::unsafe_arena_set_allocated_criuopts(
    ::cedana::services::task::CriuOpts* criuopts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(criuopts_);
  }
  criuopts_ = criuopts;
  if (criuopts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RestoreArgs.CriuOpts)
}
inline ::cedana::services::task::CriuOpts* RestoreArgs::release_criuopts() {
  auto temp = unsafe_arena_release_criuopts();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cedana::services::task::CriuOpts* RestoreArgs::unsafe_arena_release_criuopts() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RestoreArgs.CriuOpts)
  
  ::cedana::services::task::CriuOpts* temp = criuopts_;
  criuopts_ = nullptr;
  return temp;
}
inline ::cedana::services::task::CriuOpts* RestoreArgs::_internal_mutable_criuopts() {
  
  if (criuopts_ == nullptr) {
    auto* p = CreateMaybeMessage<::cedana::services::task::CriuOpts>(GetArena());
    criuopts_ = p;
  }
  return criuopts_;
}
inline ::cedana::services::task::CriuOpts* RestoreArgs::mutable_criuopts() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RestoreArgs.CriuOpts)
  return _internal_mutable_criuopts();
}
inline void RestoreArgs::set_allocated_criuopts(::cedana::services::task::CriuOpts* criuopts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete criuopts_;
  }
  if (criuopts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(criuopts);
    if (message_arena != submessage_arena) {
      criuopts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, criuopts, submessage_arena);
    }
    
  } else {
    
  }
  criuopts_ = criuopts;
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RestoreArgs.CriuOpts)
}

// -------------------------------------------------------------------

// RestoreResp

// string Message = 1[json_name = "Message"];
inline void RestoreResp::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RestoreResp::message() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RestoreResp.Message)
  return _internal_message();
}
inline void RestoreResp::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RestoreResp.Message)
}
inline std::string* RestoreResp::mutable_message() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RestoreResp.Message)
  return _internal_mutable_message();
}
inline const std::string& RestoreResp::_internal_message() const {
  return message_.Get();
}
inline void RestoreResp::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RestoreResp::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RestoreResp.Message)
}
inline void RestoreResp::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RestoreResp.Message)
}
inline void RestoreResp::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RestoreResp.Message)
}
inline std::string* RestoreResp::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RestoreResp::release_message() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RestoreResp.Message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RestoreResp::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RestoreResp.Message)
}
inline std::string* RestoreResp::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RestoreResp.Message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RestoreResp::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RestoreResp.Message)
}

// int32 NewPID = 2[json_name = "NewPID"];
inline void RestoreResp::clear_newpid() {
  newpid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RestoreResp::_internal_newpid() const {
  return newpid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RestoreResp::newpid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RestoreResp.NewPID)
  return _internal_newpid();
}
inline void RestoreResp::_internal_set_newpid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  newpid_ = value;
}
inline void RestoreResp::set_newpid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_newpid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RestoreResp.NewPID)
}

// .cedana.services.task.ProcessState State = 3[json_name = "State"];
inline bool RestoreResp::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool RestoreResp::has_state() const {
  return _internal_has_state();
}
inline void RestoreResp::clear_state() {
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::cedana::services::task::ProcessState& RestoreResp::_internal_state() const {
  const ::cedana::services::task::ProcessState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cedana::services::task::ProcessState*>(
      &::cedana::services::task::_ProcessState_default_instance_);
}
inline const ::cedana::services::task::ProcessState& RestoreResp::state() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RestoreResp.State)
  return _internal_state();
}
inline void RestoreResp::unsafe_arena_set_allocated_state(
    ::cedana::services::task::ProcessState* state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RestoreResp.State)
}
inline ::cedana::services::task::ProcessState* RestoreResp::release_state() {
  auto temp = unsafe_arena_release_state();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cedana::services::task::ProcessState* RestoreResp::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RestoreResp.State)
  
  ::cedana::services::task::ProcessState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::cedana::services::task::ProcessState* RestoreResp::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::cedana::services::task::ProcessState>(GetArena());
    state_ = p;
  }
  return state_;
}
inline ::cedana::services::task::ProcessState* RestoreResp::mutable_state() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RestoreResp.State)
  return _internal_mutable_state();
}
inline void RestoreResp::set_allocated_state(::cedana::services::task::ProcessState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RestoreResp.State)
}

// .cedana.services.task.RestoreStats RestoreStats = 6[json_name = "RestoreStats"];
inline bool RestoreResp::_internal_has_restorestats() const {
  return this != internal_default_instance() && restorestats_ != nullptr;
}
inline bool RestoreResp::has_restorestats() const {
  return _internal_has_restorestats();
}
inline void RestoreResp::clear_restorestats() {
  if (GetArena() == nullptr && restorestats_ != nullptr) {
    delete restorestats_;
  }
  restorestats_ = nullptr;
}
inline const ::cedana::services::task::RestoreStats& RestoreResp::_internal_restorestats() const {
  const ::cedana::services::task::RestoreStats* p = restorestats_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cedana::services::task::RestoreStats*>(
      &::cedana::services::task::_RestoreStats_default_instance_);
}
inline const ::cedana::services::task::RestoreStats& RestoreResp::restorestats() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RestoreResp.RestoreStats)
  return _internal_restorestats();
}
inline void RestoreResp::unsafe_arena_set_allocated_restorestats(
    ::cedana::services::task::RestoreStats* restorestats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(restorestats_);
  }
  restorestats_ = restorestats;
  if (restorestats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RestoreResp.RestoreStats)
}
inline ::cedana::services::task::RestoreStats* RestoreResp::release_restorestats() {
  auto temp = unsafe_arena_release_restorestats();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cedana::services::task::RestoreStats* RestoreResp::unsafe_arena_release_restorestats() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RestoreResp.RestoreStats)
  
  ::cedana::services::task::RestoreStats* temp = restorestats_;
  restorestats_ = nullptr;
  return temp;
}
inline ::cedana::services::task::RestoreStats* RestoreResp::_internal_mutable_restorestats() {
  
  if (restorestats_ == nullptr) {
    auto* p = CreateMaybeMessage<::cedana::services::task::RestoreStats>(GetArena());
    restorestats_ = p;
  }
  return restorestats_;
}
inline ::cedana::services::task::RestoreStats* RestoreResp::mutable_restorestats() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RestoreResp.RestoreStats)
  return _internal_mutable_restorestats();
}
inline void RestoreResp::set_allocated_restorestats(::cedana::services::task::RestoreStats* restorestats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete restorestats_;
  }
  if (restorestats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(restorestats);
    if (message_arena != submessage_arena) {
      restorestats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, restorestats, submessage_arena);
    }
    
  } else {
    
  }
  restorestats_ = restorestats;
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RestoreResp.RestoreStats)
}

// -------------------------------------------------------------------

// QueryArgs

// repeated int32 PIDs = 1[json_name = "PIDs"];
inline int QueryArgs::_internal_pids_size() const {
  return pids_.size();
}
inline int QueryArgs::pids_size() const {
  return _internal_pids_size();
}
inline void QueryArgs::clear_pids() {
  pids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryArgs::_internal_pids(int index) const {
  return pids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryArgs::pids(int index) const {
  // @@protoc_insertion_point(field_get:cedana.services.task.QueryArgs.PIDs)
  return _internal_pids(index);
}
inline void QueryArgs::set_pids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  pids_.Set(index, value);
  // @@protoc_insertion_point(field_set:cedana.services.task.QueryArgs.PIDs)
}
inline void QueryArgs::_internal_add_pids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  pids_.Add(value);
}
inline void QueryArgs::add_pids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_pids(value);
  // @@protoc_insertion_point(field_add:cedana.services.task.QueryArgs.PIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
QueryArgs::_internal_pids() const {
  return pids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
QueryArgs::pids() const {
  // @@protoc_insertion_point(field_list:cedana.services.task.QueryArgs.PIDs)
  return _internal_pids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
QueryArgs::_internal_mutable_pids() {
  return &pids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
QueryArgs::mutable_pids() {
  // @@protoc_insertion_point(field_mutable_list:cedana.services.task.QueryArgs.PIDs)
  return _internal_mutable_pids();
}

// repeated string JIDs = 2[json_name = "JIDs"];
inline int QueryArgs::_internal_jids_size() const {
  return jids_.size();
}
inline int QueryArgs::jids_size() const {
  return _internal_jids_size();
}
inline void QueryArgs::clear_jids() {
  jids_.Clear();
}
inline std::string* QueryArgs::add_jids() {
  // @@protoc_insertion_point(field_add_mutable:cedana.services.task.QueryArgs.JIDs)
  return _internal_add_jids();
}
inline const std::string& QueryArgs::_internal_jids(int index) const {
  return jids_.Get(index);
}
inline const std::string& QueryArgs::jids(int index) const {
  // @@protoc_insertion_point(field_get:cedana.services.task.QueryArgs.JIDs)
  return _internal_jids(index);
}
inline std::string* QueryArgs::mutable_jids(int index) {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.QueryArgs.JIDs)
  return jids_.Mutable(index);
}
inline void QueryArgs::set_jids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:cedana.services.task.QueryArgs.JIDs)
  jids_.Mutable(index)->assign(value);
}
inline void QueryArgs::set_jids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:cedana.services.task.QueryArgs.JIDs)
  jids_.Mutable(index)->assign(std::move(value));
}
inline void QueryArgs::set_jids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  jids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cedana.services.task.QueryArgs.JIDs)
}
inline void QueryArgs::set_jids(int index, const char* value, size_t size) {
  jids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.QueryArgs.JIDs)
}
inline std::string* QueryArgs::_internal_add_jids() {
  return jids_.Add();
}
inline void QueryArgs::add_jids(const std::string& value) {
  jids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cedana.services.task.QueryArgs.JIDs)
}
inline void QueryArgs::add_jids(std::string&& value) {
  jids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cedana.services.task.QueryArgs.JIDs)
}
inline void QueryArgs::add_jids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  jids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cedana.services.task.QueryArgs.JIDs)
}
inline void QueryArgs::add_jids(const char* value, size_t size) {
  jids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cedana.services.task.QueryArgs.JIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueryArgs::jids() const {
  // @@protoc_insertion_point(field_list:cedana.services.task.QueryArgs.JIDs)
  return jids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QueryArgs::mutable_jids() {
  // @@protoc_insertion_point(field_mutable_list:cedana.services.task.QueryArgs.JIDs)
  return &jids_;
}

// -------------------------------------------------------------------

// QueryResp

// repeated .cedana.services.task.ProcessState Processes = 1[json_name = "Processes"];
inline int QueryResp::_internal_processes_size() const {
  return processes_.size();
}
inline int QueryResp::processes_size() const {
  return _internal_processes_size();
}
inline void QueryResp::clear_processes() {
  processes_.Clear();
}
inline ::cedana::services::task::ProcessState* QueryResp::mutable_processes(int index) {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.QueryResp.Processes)
  return processes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedana::services::task::ProcessState >*
QueryResp::mutable_processes() {
  // @@protoc_insertion_point(field_mutable_list:cedana.services.task.QueryResp.Processes)
  return &processes_;
}
inline const ::cedana::services::task::ProcessState& QueryResp::_internal_processes(int index) const {
  return processes_.Get(index);
}
inline const ::cedana::services::task::ProcessState& QueryResp::processes(int index) const {
  // @@protoc_insertion_point(field_get:cedana.services.task.QueryResp.Processes)
  return _internal_processes(index);
}
inline ::cedana::services::task::ProcessState* QueryResp::_internal_add_processes() {
  return processes_.Add();
}
inline ::cedana::services::task::ProcessState* QueryResp::add_processes() {
  // @@protoc_insertion_point(field_add:cedana.services.task.QueryResp.Processes)
  return _internal_add_processes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedana::services::task::ProcessState >&
QueryResp::processes() const {
  // @@protoc_insertion_point(field_list:cedana.services.task.QueryResp.Processes)
  return processes_;
}

// -------------------------------------------------------------------

// ContainerdDumpArgs

// .cedana.services.task.RuncDumpArgs RuncDumpArgs = 1[json_name = "RuncDumpArgs"];
inline bool ContainerdDumpArgs::_internal_has_runcdumpargs() const {
  return this != internal_default_instance() && runcdumpargs_ != nullptr;
}
inline bool ContainerdDumpArgs::has_runcdumpargs() const {
  return _internal_has_runcdumpargs();
}
inline void ContainerdDumpArgs::clear_runcdumpargs() {
  if (GetArena() == nullptr && runcdumpargs_ != nullptr) {
    delete runcdumpargs_;
  }
  runcdumpargs_ = nullptr;
}
inline const ::cedana::services::task::RuncDumpArgs& ContainerdDumpArgs::_internal_runcdumpargs() const {
  const ::cedana::services::task::RuncDumpArgs* p = runcdumpargs_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cedana::services::task::RuncDumpArgs*>(
      &::cedana::services::task::_RuncDumpArgs_default_instance_);
}
inline const ::cedana::services::task::RuncDumpArgs& ContainerdDumpArgs::runcdumpargs() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ContainerdDumpArgs.RuncDumpArgs)
  return _internal_runcdumpargs();
}
inline void ContainerdDumpArgs::unsafe_arena_set_allocated_runcdumpargs(
    ::cedana::services::task::RuncDumpArgs* runcdumpargs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runcdumpargs_);
  }
  runcdumpargs_ = runcdumpargs;
  if (runcdumpargs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ContainerdDumpArgs.RuncDumpArgs)
}
inline ::cedana::services::task::RuncDumpArgs* ContainerdDumpArgs::release_runcdumpargs() {
  auto temp = unsafe_arena_release_runcdumpargs();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cedana::services::task::RuncDumpArgs* ContainerdDumpArgs::unsafe_arena_release_runcdumpargs() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ContainerdDumpArgs.RuncDumpArgs)
  
  ::cedana::services::task::RuncDumpArgs* temp = runcdumpargs_;
  runcdumpargs_ = nullptr;
  return temp;
}
inline ::cedana::services::task::RuncDumpArgs* ContainerdDumpArgs::_internal_mutable_runcdumpargs() {
  
  if (runcdumpargs_ == nullptr) {
    auto* p = CreateMaybeMessage<::cedana::services::task::RuncDumpArgs>(GetArena());
    runcdumpargs_ = p;
  }
  return runcdumpargs_;
}
inline ::cedana::services::task::RuncDumpArgs* ContainerdDumpArgs::mutable_runcdumpargs() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ContainerdDumpArgs.RuncDumpArgs)
  return _internal_mutable_runcdumpargs();
}
inline void ContainerdDumpArgs::set_allocated_runcdumpargs(::cedana::services::task::RuncDumpArgs* runcdumpargs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete runcdumpargs_;
  }
  if (runcdumpargs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(runcdumpargs);
    if (message_arena != submessage_arena) {
      runcdumpargs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runcdumpargs, submessage_arena);
    }
    
  } else {
    
  }
  runcdumpargs_ = runcdumpargs;
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ContainerdDumpArgs.RuncDumpArgs)
}

// .cedana.services.task.ContainerdRootfsDumpArgs ContainerdRootfsDumpArgs = 2[json_name = "ContainerdRootfsDumpArgs"];
inline bool ContainerdDumpArgs::_internal_has_containerdrootfsdumpargs() const {
  return this != internal_default_instance() && containerdrootfsdumpargs_ != nullptr;
}
inline bool ContainerdDumpArgs::has_containerdrootfsdumpargs() const {
  return _internal_has_containerdrootfsdumpargs();
}
inline void ContainerdDumpArgs::clear_containerdrootfsdumpargs() {
  if (GetArena() == nullptr && containerdrootfsdumpargs_ != nullptr) {
    delete containerdrootfsdumpargs_;
  }
  containerdrootfsdumpargs_ = nullptr;
}
inline const ::cedana::services::task::ContainerdRootfsDumpArgs& ContainerdDumpArgs::_internal_containerdrootfsdumpargs() const {
  const ::cedana::services::task::ContainerdRootfsDumpArgs* p = containerdrootfsdumpargs_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cedana::services::task::ContainerdRootfsDumpArgs*>(
      &::cedana::services::task::_ContainerdRootfsDumpArgs_default_instance_);
}
inline const ::cedana::services::task::ContainerdRootfsDumpArgs& ContainerdDumpArgs::containerdrootfsdumpargs() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ContainerdDumpArgs.ContainerdRootfsDumpArgs)
  return _internal_containerdrootfsdumpargs();
}
inline void ContainerdDumpArgs::unsafe_arena_set_allocated_containerdrootfsdumpargs(
    ::cedana::services::task::ContainerdRootfsDumpArgs* containerdrootfsdumpargs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(containerdrootfsdumpargs_);
  }
  containerdrootfsdumpargs_ = containerdrootfsdumpargs;
  if (containerdrootfsdumpargs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ContainerdDumpArgs.ContainerdRootfsDumpArgs)
}
inline ::cedana::services::task::ContainerdRootfsDumpArgs* ContainerdDumpArgs::release_containerdrootfsdumpargs() {
  auto temp = unsafe_arena_release_containerdrootfsdumpargs();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cedana::services::task::ContainerdRootfsDumpArgs* ContainerdDumpArgs::unsafe_arena_release_containerdrootfsdumpargs() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ContainerdDumpArgs.ContainerdRootfsDumpArgs)
  
  ::cedana::services::task::ContainerdRootfsDumpArgs* temp = containerdrootfsdumpargs_;
  containerdrootfsdumpargs_ = nullptr;
  return temp;
}
inline ::cedana::services::task::ContainerdRootfsDumpArgs* ContainerdDumpArgs::_internal_mutable_containerdrootfsdumpargs() {
  
  if (containerdrootfsdumpargs_ == nullptr) {
    auto* p = CreateMaybeMessage<::cedana::services::task::ContainerdRootfsDumpArgs>(GetArena());
    containerdrootfsdumpargs_ = p;
  }
  return containerdrootfsdumpargs_;
}
inline ::cedana::services::task::ContainerdRootfsDumpArgs* ContainerdDumpArgs::mutable_containerdrootfsdumpargs() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ContainerdDumpArgs.ContainerdRootfsDumpArgs)
  return _internal_mutable_containerdrootfsdumpargs();
}
inline void ContainerdDumpArgs::set_allocated_containerdrootfsdumpargs(::cedana::services::task::ContainerdRootfsDumpArgs* containerdrootfsdumpargs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete containerdrootfsdumpargs_;
  }
  if (containerdrootfsdumpargs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(containerdrootfsdumpargs);
    if (message_arena != submessage_arena) {
      containerdrootfsdumpargs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, containerdrootfsdumpargs, submessage_arena);
    }
    
  } else {
    
  }
  containerdrootfsdumpargs_ = containerdrootfsdumpargs;
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ContainerdDumpArgs.ContainerdRootfsDumpArgs)
}

// -------------------------------------------------------------------

// ContainerdDumpResp

// string CheckpointPath = 1[json_name = "CheckpointPath"];
inline void ContainerdDumpResp::clear_checkpointpath() {
  checkpointpath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerdDumpResp::checkpointpath() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ContainerdDumpResp.CheckpointPath)
  return _internal_checkpointpath();
}
inline void ContainerdDumpResp::set_checkpointpath(const std::string& value) {
  _internal_set_checkpointpath(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ContainerdDumpResp.CheckpointPath)
}
inline std::string* ContainerdDumpResp::mutable_checkpointpath() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ContainerdDumpResp.CheckpointPath)
  return _internal_mutable_checkpointpath();
}
inline const std::string& ContainerdDumpResp::_internal_checkpointpath() const {
  return checkpointpath_.Get();
}
inline void ContainerdDumpResp::_internal_set_checkpointpath(const std::string& value) {
  
  checkpointpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerdDumpResp::set_checkpointpath(std::string&& value) {
  
  checkpointpath_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ContainerdDumpResp.CheckpointPath)
}
inline void ContainerdDumpResp::set_checkpointpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  checkpointpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ContainerdDumpResp.CheckpointPath)
}
inline void ContainerdDumpResp::set_checkpointpath(const char* value,
    size_t size) {
  
  checkpointpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ContainerdDumpResp.CheckpointPath)
}
inline std::string* ContainerdDumpResp::_internal_mutable_checkpointpath() {
  
  return checkpointpath_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerdDumpResp::release_checkpointpath() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ContainerdDumpResp.CheckpointPath)
  return checkpointpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerdDumpResp::set_allocated_checkpointpath(std::string* checkpointpath) {
  if (checkpointpath != nullptr) {
    
  } else {
    
  }
  checkpointpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), checkpointpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ContainerdDumpResp.CheckpointPath)
}
inline std::string* ContainerdDumpResp::unsafe_arena_release_checkpointpath() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ContainerdDumpResp.CheckpointPath)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return checkpointpath_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerdDumpResp::unsafe_arena_set_allocated_checkpointpath(
    std::string* checkpointpath) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (checkpointpath != nullptr) {
    
  } else {
    
  }
  checkpointpath_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      checkpointpath, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ContainerdDumpResp.CheckpointPath)
}

// string Message = 2[json_name = "Message"];
inline void ContainerdDumpResp::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerdDumpResp::message() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ContainerdDumpResp.Message)
  return _internal_message();
}
inline void ContainerdDumpResp::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ContainerdDumpResp.Message)
}
inline std::string* ContainerdDumpResp::mutable_message() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ContainerdDumpResp.Message)
  return _internal_mutable_message();
}
inline const std::string& ContainerdDumpResp::_internal_message() const {
  return message_.Get();
}
inline void ContainerdDumpResp::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerdDumpResp::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ContainerdDumpResp.Message)
}
inline void ContainerdDumpResp::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ContainerdDumpResp.Message)
}
inline void ContainerdDumpResp::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ContainerdDumpResp.Message)
}
inline std::string* ContainerdDumpResp::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerdDumpResp::release_message() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ContainerdDumpResp.Message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerdDumpResp::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ContainerdDumpResp.Message)
}
inline std::string* ContainerdDumpResp::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ContainerdDumpResp.Message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerdDumpResp::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ContainerdDumpResp.Message)
}

// -------------------------------------------------------------------

// ContainerdRestoreArgs

// string ImgPath = 1[json_name = "ImgPath"];
inline void ContainerdRestoreArgs::clear_imgpath() {
  imgpath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerdRestoreArgs::imgpath() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ContainerdRestoreArgs.ImgPath)
  return _internal_imgpath();
}
inline void ContainerdRestoreArgs::set_imgpath(const std::string& value) {
  _internal_set_imgpath(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ContainerdRestoreArgs.ImgPath)
}
inline std::string* ContainerdRestoreArgs::mutable_imgpath() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ContainerdRestoreArgs.ImgPath)
  return _internal_mutable_imgpath();
}
inline const std::string& ContainerdRestoreArgs::_internal_imgpath() const {
  return imgpath_.Get();
}
inline void ContainerdRestoreArgs::_internal_set_imgpath(const std::string& value) {
  
  imgpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerdRestoreArgs::set_imgpath(std::string&& value) {
  
  imgpath_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ContainerdRestoreArgs.ImgPath)
}
inline void ContainerdRestoreArgs::set_imgpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imgpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ContainerdRestoreArgs.ImgPath)
}
inline void ContainerdRestoreArgs::set_imgpath(const char* value,
    size_t size) {
  
  imgpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ContainerdRestoreArgs.ImgPath)
}
inline std::string* ContainerdRestoreArgs::_internal_mutable_imgpath() {
  
  return imgpath_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerdRestoreArgs::release_imgpath() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ContainerdRestoreArgs.ImgPath)
  return imgpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerdRestoreArgs::set_allocated_imgpath(std::string* imgpath) {
  if (imgpath != nullptr) {
    
  } else {
    
  }
  imgpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imgpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ContainerdRestoreArgs.ImgPath)
}
inline std::string* ContainerdRestoreArgs::unsafe_arena_release_imgpath() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ContainerdRestoreArgs.ImgPath)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return imgpath_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerdRestoreArgs::unsafe_arena_set_allocated_imgpath(
    std::string* imgpath) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (imgpath != nullptr) {
    
  } else {
    
  }
  imgpath_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      imgpath, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ContainerdRestoreArgs.ImgPath)
}

// string ContainerID = 2[json_name = "ContainerID"];
inline void ContainerdRestoreArgs::clear_containerid() {
  containerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerdRestoreArgs::containerid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ContainerdRestoreArgs.ContainerID)
  return _internal_containerid();
}
inline void ContainerdRestoreArgs::set_containerid(const std::string& value) {
  _internal_set_containerid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ContainerdRestoreArgs.ContainerID)
}
inline std::string* ContainerdRestoreArgs::mutable_containerid() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ContainerdRestoreArgs.ContainerID)
  return _internal_mutable_containerid();
}
inline const std::string& ContainerdRestoreArgs::_internal_containerid() const {
  return containerid_.Get();
}
inline void ContainerdRestoreArgs::_internal_set_containerid(const std::string& value) {
  
  containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerdRestoreArgs::set_containerid(std::string&& value) {
  
  containerid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ContainerdRestoreArgs.ContainerID)
}
inline void ContainerdRestoreArgs::set_containerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ContainerdRestoreArgs.ContainerID)
}
inline void ContainerdRestoreArgs::set_containerid(const char* value,
    size_t size) {
  
  containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ContainerdRestoreArgs.ContainerID)
}
inline std::string* ContainerdRestoreArgs::_internal_mutable_containerid() {
  
  return containerid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerdRestoreArgs::release_containerid() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ContainerdRestoreArgs.ContainerID)
  return containerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerdRestoreArgs::set_allocated_containerid(std::string* containerid) {
  if (containerid != nullptr) {
    
  } else {
    
  }
  containerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), containerid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ContainerdRestoreArgs.ContainerID)
}
inline std::string* ContainerdRestoreArgs::unsafe_arena_release_containerid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ContainerdRestoreArgs.ContainerID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return containerid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerdRestoreArgs::unsafe_arena_set_allocated_containerid(
    std::string* containerid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (containerid != nullptr) {
    
  } else {
    
  }
  containerid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      containerid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ContainerdRestoreArgs.ContainerID)
}

// -------------------------------------------------------------------

// ContainerdRestoreResp

// string Message = 1[json_name = "Message"];
inline void ContainerdRestoreResp::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerdRestoreResp::message() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ContainerdRestoreResp.Message)
  return _internal_message();
}
inline void ContainerdRestoreResp::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ContainerdRestoreResp.Message)
}
inline std::string* ContainerdRestoreResp::mutable_message() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ContainerdRestoreResp.Message)
  return _internal_mutable_message();
}
inline const std::string& ContainerdRestoreResp::_internal_message() const {
  return message_.Get();
}
inline void ContainerdRestoreResp::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerdRestoreResp::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ContainerdRestoreResp.Message)
}
inline void ContainerdRestoreResp::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ContainerdRestoreResp.Message)
}
inline void ContainerdRestoreResp::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ContainerdRestoreResp.Message)
}
inline std::string* ContainerdRestoreResp::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerdRestoreResp::release_message() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ContainerdRestoreResp.Message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerdRestoreResp::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ContainerdRestoreResp.Message)
}
inline std::string* ContainerdRestoreResp::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ContainerdRestoreResp.Message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerdRestoreResp::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ContainerdRestoreResp.Message)
}

// -------------------------------------------------------------------

// ContainerdQueryArgs

// string Root = 1[json_name = "Root"];
inline void ContainerdQueryArgs::clear_root() {
  root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerdQueryArgs::root() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ContainerdQueryArgs.Root)
  return _internal_root();
}
inline void ContainerdQueryArgs::set_root(const std::string& value) {
  _internal_set_root(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ContainerdQueryArgs.Root)
}
inline std::string* ContainerdQueryArgs::mutable_root() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ContainerdQueryArgs.Root)
  return _internal_mutable_root();
}
inline const std::string& ContainerdQueryArgs::_internal_root() const {
  return root_.Get();
}
inline void ContainerdQueryArgs::_internal_set_root(const std::string& value) {
  
  root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerdQueryArgs::set_root(std::string&& value) {
  
  root_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ContainerdQueryArgs.Root)
}
inline void ContainerdQueryArgs::set_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ContainerdQueryArgs.Root)
}
inline void ContainerdQueryArgs::set_root(const char* value,
    size_t size) {
  
  root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ContainerdQueryArgs.Root)
}
inline std::string* ContainerdQueryArgs::_internal_mutable_root() {
  
  return root_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerdQueryArgs::release_root() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ContainerdQueryArgs.Root)
  return root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerdQueryArgs::set_allocated_root(std::string* root) {
  if (root != nullptr) {
    
  } else {
    
  }
  root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ContainerdQueryArgs.Root)
}
inline std::string* ContainerdQueryArgs::unsafe_arena_release_root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ContainerdQueryArgs.Root)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return root_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerdQueryArgs::unsafe_arena_set_allocated_root(
    std::string* root) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (root != nullptr) {
    
  } else {
    
  }
  root_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      root, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ContainerdQueryArgs.Root)
}

// string Namespace = 2[json_name = "Namespace"];
inline void ContainerdQueryArgs::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerdQueryArgs::namespace_() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ContainerdQueryArgs.Namespace)
  return _internal_namespace_();
}
inline void ContainerdQueryArgs::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ContainerdQueryArgs.Namespace)
}
inline std::string* ContainerdQueryArgs::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ContainerdQueryArgs.Namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& ContainerdQueryArgs::_internal_namespace_() const {
  return namespace__.Get();
}
inline void ContainerdQueryArgs::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerdQueryArgs::set_namespace_(std::string&& value) {
  
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ContainerdQueryArgs.Namespace)
}
inline void ContainerdQueryArgs::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ContainerdQueryArgs.Namespace)
}
inline void ContainerdQueryArgs::set_namespace_(const char* value,
    size_t size) {
  
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ContainerdQueryArgs.Namespace)
}
inline std::string* ContainerdQueryArgs::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerdQueryArgs::release_namespace_() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ContainerdQueryArgs.Namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerdQueryArgs::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ContainerdQueryArgs.Namespace)
}
inline std::string* ContainerdQueryArgs::unsafe_arena_release_namespace_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ContainerdQueryArgs.Namespace)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return namespace__.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerdQueryArgs::unsafe_arena_set_allocated_namespace_(
    std::string* namespace_) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      namespace_, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ContainerdQueryArgs.Namespace)
}

// -------------------------------------------------------------------

// ContainerdQueryResp

// repeated .cedana.services.task.ContainerdContainer Containers = 1[json_name = "Containers"];
inline int ContainerdQueryResp::_internal_containers_size() const {
  return containers_.size();
}
inline int ContainerdQueryResp::containers_size() const {
  return _internal_containers_size();
}
inline void ContainerdQueryResp::clear_containers() {
  containers_.Clear();
}
inline ::cedana::services::task::ContainerdContainer* ContainerdQueryResp::mutable_containers(int index) {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ContainerdQueryResp.Containers)
  return containers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedana::services::task::ContainerdContainer >*
ContainerdQueryResp::mutable_containers() {
  // @@protoc_insertion_point(field_mutable_list:cedana.services.task.ContainerdQueryResp.Containers)
  return &containers_;
}
inline const ::cedana::services::task::ContainerdContainer& ContainerdQueryResp::_internal_containers(int index) const {
  return containers_.Get(index);
}
inline const ::cedana::services::task::ContainerdContainer& ContainerdQueryResp::containers(int index) const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ContainerdQueryResp.Containers)
  return _internal_containers(index);
}
inline ::cedana::services::task::ContainerdContainer* ContainerdQueryResp::_internal_add_containers() {
  return containers_.Add();
}
inline ::cedana::services::task::ContainerdContainer* ContainerdQueryResp::add_containers() {
  // @@protoc_insertion_point(field_add:cedana.services.task.ContainerdQueryResp.Containers)
  return _internal_add_containers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedana::services::task::ContainerdContainer >&
ContainerdQueryResp::containers() const {
  // @@protoc_insertion_point(field_list:cedana.services.task.ContainerdQueryResp.Containers)
  return containers_;
}

// -------------------------------------------------------------------

// ContainerdContainer

// string ContainerName = 1[json_name = "ContainerName"];
inline void ContainerdContainer::clear_containername() {
  containername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerdContainer::containername() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ContainerdContainer.ContainerName)
  return _internal_containername();
}
inline void ContainerdContainer::set_containername(const std::string& value) {
  _internal_set_containername(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ContainerdContainer.ContainerName)
}
inline std::string* ContainerdContainer::mutable_containername() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ContainerdContainer.ContainerName)
  return _internal_mutable_containername();
}
inline const std::string& ContainerdContainer::_internal_containername() const {
  return containername_.Get();
}
inline void ContainerdContainer::_internal_set_containername(const std::string& value) {
  
  containername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerdContainer::set_containername(std::string&& value) {
  
  containername_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ContainerdContainer.ContainerName)
}
inline void ContainerdContainer::set_containername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  containername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ContainerdContainer.ContainerName)
}
inline void ContainerdContainer::set_containername(const char* value,
    size_t size) {
  
  containername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ContainerdContainer.ContainerName)
}
inline std::string* ContainerdContainer::_internal_mutable_containername() {
  
  return containername_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerdContainer::release_containername() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ContainerdContainer.ContainerName)
  return containername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerdContainer::set_allocated_containername(std::string* containername) {
  if (containername != nullptr) {
    
  } else {
    
  }
  containername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), containername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ContainerdContainer.ContainerName)
}
inline std::string* ContainerdContainer::unsafe_arena_release_containername() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ContainerdContainer.ContainerName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return containername_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerdContainer::unsafe_arena_set_allocated_containername(
    std::string* containername) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (containername != nullptr) {
    
  } else {
    
  }
  containername_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      containername, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ContainerdContainer.ContainerName)
}

// string ImageName = 2[json_name = "ImageName"];
inline void ContainerdContainer::clear_imagename() {
  imagename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerdContainer::imagename() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ContainerdContainer.ImageName)
  return _internal_imagename();
}
inline void ContainerdContainer::set_imagename(const std::string& value) {
  _internal_set_imagename(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ContainerdContainer.ImageName)
}
inline std::string* ContainerdContainer::mutable_imagename() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ContainerdContainer.ImageName)
  return _internal_mutable_imagename();
}
inline const std::string& ContainerdContainer::_internal_imagename() const {
  return imagename_.Get();
}
inline void ContainerdContainer::_internal_set_imagename(const std::string& value) {
  
  imagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerdContainer::set_imagename(std::string&& value) {
  
  imagename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ContainerdContainer.ImageName)
}
inline void ContainerdContainer::set_imagename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ContainerdContainer.ImageName)
}
inline void ContainerdContainer::set_imagename(const char* value,
    size_t size) {
  
  imagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ContainerdContainer.ImageName)
}
inline std::string* ContainerdContainer::_internal_mutable_imagename() {
  
  return imagename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerdContainer::release_imagename() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ContainerdContainer.ImageName)
  return imagename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerdContainer::set_allocated_imagename(std::string* imagename) {
  if (imagename != nullptr) {
    
  } else {
    
  }
  imagename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imagename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ContainerdContainer.ImageName)
}
inline std::string* ContainerdContainer::unsafe_arena_release_imagename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ContainerdContainer.ImageName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return imagename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerdContainer::unsafe_arena_set_allocated_imagename(
    std::string* imagename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (imagename != nullptr) {
    
  } else {
    
  }
  imagename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      imagename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ContainerdContainer.ImageName)
}

// string SandboxId = 3[json_name = "SandboxId"];
inline void ContainerdContainer::clear_sandboxid() {
  sandboxid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerdContainer::sandboxid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ContainerdContainer.SandboxId)
  return _internal_sandboxid();
}
inline void ContainerdContainer::set_sandboxid(const std::string& value) {
  _internal_set_sandboxid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ContainerdContainer.SandboxId)
}
inline std::string* ContainerdContainer::mutable_sandboxid() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ContainerdContainer.SandboxId)
  return _internal_mutable_sandboxid();
}
inline const std::string& ContainerdContainer::_internal_sandboxid() const {
  return sandboxid_.Get();
}
inline void ContainerdContainer::_internal_set_sandboxid(const std::string& value) {
  
  sandboxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerdContainer::set_sandboxid(std::string&& value) {
  
  sandboxid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ContainerdContainer.SandboxId)
}
inline void ContainerdContainer::set_sandboxid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sandboxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ContainerdContainer.SandboxId)
}
inline void ContainerdContainer::set_sandboxid(const char* value,
    size_t size) {
  
  sandboxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ContainerdContainer.SandboxId)
}
inline std::string* ContainerdContainer::_internal_mutable_sandboxid() {
  
  return sandboxid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerdContainer::release_sandboxid() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ContainerdContainer.SandboxId)
  return sandboxid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerdContainer::set_allocated_sandboxid(std::string* sandboxid) {
  if (sandboxid != nullptr) {
    
  } else {
    
  }
  sandboxid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sandboxid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ContainerdContainer.SandboxId)
}
inline std::string* ContainerdContainer::unsafe_arena_release_sandboxid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ContainerdContainer.SandboxId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sandboxid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerdContainer::unsafe_arena_set_allocated_sandboxid(
    std::string* sandboxid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sandboxid != nullptr) {
    
  } else {
    
  }
  sandboxid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sandboxid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ContainerdContainer.SandboxId)
}

// string SandboxName = 4[json_name = "SandboxName"];
inline void ContainerdContainer::clear_sandboxname() {
  sandboxname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerdContainer::sandboxname() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ContainerdContainer.SandboxName)
  return _internal_sandboxname();
}
inline void ContainerdContainer::set_sandboxname(const std::string& value) {
  _internal_set_sandboxname(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ContainerdContainer.SandboxName)
}
inline std::string* ContainerdContainer::mutable_sandboxname() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ContainerdContainer.SandboxName)
  return _internal_mutable_sandboxname();
}
inline const std::string& ContainerdContainer::_internal_sandboxname() const {
  return sandboxname_.Get();
}
inline void ContainerdContainer::_internal_set_sandboxname(const std::string& value) {
  
  sandboxname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerdContainer::set_sandboxname(std::string&& value) {
  
  sandboxname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ContainerdContainer.SandboxName)
}
inline void ContainerdContainer::set_sandboxname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sandboxname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ContainerdContainer.SandboxName)
}
inline void ContainerdContainer::set_sandboxname(const char* value,
    size_t size) {
  
  sandboxname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ContainerdContainer.SandboxName)
}
inline std::string* ContainerdContainer::_internal_mutable_sandboxname() {
  
  return sandboxname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerdContainer::release_sandboxname() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ContainerdContainer.SandboxName)
  return sandboxname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerdContainer::set_allocated_sandboxname(std::string* sandboxname) {
  if (sandboxname != nullptr) {
    
  } else {
    
  }
  sandboxname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sandboxname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ContainerdContainer.SandboxName)
}
inline std::string* ContainerdContainer::unsafe_arena_release_sandboxname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ContainerdContainer.SandboxName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sandboxname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerdContainer::unsafe_arena_set_allocated_sandboxname(
    std::string* sandboxname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sandboxname != nullptr) {
    
  } else {
    
  }
  sandboxname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sandboxname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ContainerdContainer.SandboxName)
}

// string SandboxNamespace = 5[json_name = "SandboxNamespace"];
inline void ContainerdContainer::clear_sandboxnamespace() {
  sandboxnamespace_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerdContainer::sandboxnamespace() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ContainerdContainer.SandboxNamespace)
  return _internal_sandboxnamespace();
}
inline void ContainerdContainer::set_sandboxnamespace(const std::string& value) {
  _internal_set_sandboxnamespace(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ContainerdContainer.SandboxNamespace)
}
inline std::string* ContainerdContainer::mutable_sandboxnamespace() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ContainerdContainer.SandboxNamespace)
  return _internal_mutable_sandboxnamespace();
}
inline const std::string& ContainerdContainer::_internal_sandboxnamespace() const {
  return sandboxnamespace_.Get();
}
inline void ContainerdContainer::_internal_set_sandboxnamespace(const std::string& value) {
  
  sandboxnamespace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerdContainer::set_sandboxnamespace(std::string&& value) {
  
  sandboxnamespace_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ContainerdContainer.SandboxNamespace)
}
inline void ContainerdContainer::set_sandboxnamespace(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sandboxnamespace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ContainerdContainer.SandboxNamespace)
}
inline void ContainerdContainer::set_sandboxnamespace(const char* value,
    size_t size) {
  
  sandboxnamespace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ContainerdContainer.SandboxNamespace)
}
inline std::string* ContainerdContainer::_internal_mutable_sandboxnamespace() {
  
  return sandboxnamespace_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerdContainer::release_sandboxnamespace() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ContainerdContainer.SandboxNamespace)
  return sandboxnamespace_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerdContainer::set_allocated_sandboxnamespace(std::string* sandboxnamespace) {
  if (sandboxnamespace != nullptr) {
    
  } else {
    
  }
  sandboxnamespace_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sandboxnamespace,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ContainerdContainer.SandboxNamespace)
}
inline std::string* ContainerdContainer::unsafe_arena_release_sandboxnamespace() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ContainerdContainer.SandboxNamespace)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sandboxnamespace_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerdContainer::unsafe_arena_set_allocated_sandboxnamespace(
    std::string* sandboxnamespace) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sandboxnamespace != nullptr) {
    
  } else {
    
  }
  sandboxnamespace_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sandboxnamespace, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ContainerdContainer.SandboxNamespace)
}

// string SandboxUid = 6[json_name = "SandboxUid"];
inline void ContainerdContainer::clear_sandboxuid() {
  sandboxuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerdContainer::sandboxuid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ContainerdContainer.SandboxUid)
  return _internal_sandboxuid();
}
inline void ContainerdContainer::set_sandboxuid(const std::string& value) {
  _internal_set_sandboxuid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ContainerdContainer.SandboxUid)
}
inline std::string* ContainerdContainer::mutable_sandboxuid() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ContainerdContainer.SandboxUid)
  return _internal_mutable_sandboxuid();
}
inline const std::string& ContainerdContainer::_internal_sandboxuid() const {
  return sandboxuid_.Get();
}
inline void ContainerdContainer::_internal_set_sandboxuid(const std::string& value) {
  
  sandboxuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerdContainer::set_sandboxuid(std::string&& value) {
  
  sandboxuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ContainerdContainer.SandboxUid)
}
inline void ContainerdContainer::set_sandboxuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sandboxuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ContainerdContainer.SandboxUid)
}
inline void ContainerdContainer::set_sandboxuid(const char* value,
    size_t size) {
  
  sandboxuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ContainerdContainer.SandboxUid)
}
inline std::string* ContainerdContainer::_internal_mutable_sandboxuid() {
  
  return sandboxuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerdContainer::release_sandboxuid() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ContainerdContainer.SandboxUid)
  return sandboxuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerdContainer::set_allocated_sandboxuid(std::string* sandboxuid) {
  if (sandboxuid != nullptr) {
    
  } else {
    
  }
  sandboxuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sandboxuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ContainerdContainer.SandboxUid)
}
inline std::string* ContainerdContainer::unsafe_arena_release_sandboxuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ContainerdContainer.SandboxUid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sandboxuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerdContainer::unsafe_arena_set_allocated_sandboxuid(
    std::string* sandboxuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sandboxuid != nullptr) {
    
  } else {
    
  }
  sandboxuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sandboxuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ContainerdContainer.SandboxUid)
}

// -------------------------------------------------------------------

// ContainerdRootfsDumpArgs

// string ContainerID = 1[json_name = "ContainerID"];
inline void ContainerdRootfsDumpArgs::clear_containerid() {
  containerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerdRootfsDumpArgs::containerid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ContainerdRootfsDumpArgs.ContainerID)
  return _internal_containerid();
}
inline void ContainerdRootfsDumpArgs::set_containerid(const std::string& value) {
  _internal_set_containerid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ContainerdRootfsDumpArgs.ContainerID)
}
inline std::string* ContainerdRootfsDumpArgs::mutable_containerid() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ContainerdRootfsDumpArgs.ContainerID)
  return _internal_mutable_containerid();
}
inline const std::string& ContainerdRootfsDumpArgs::_internal_containerid() const {
  return containerid_.Get();
}
inline void ContainerdRootfsDumpArgs::_internal_set_containerid(const std::string& value) {
  
  containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerdRootfsDumpArgs::set_containerid(std::string&& value) {
  
  containerid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ContainerdRootfsDumpArgs.ContainerID)
}
inline void ContainerdRootfsDumpArgs::set_containerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ContainerdRootfsDumpArgs.ContainerID)
}
inline void ContainerdRootfsDumpArgs::set_containerid(const char* value,
    size_t size) {
  
  containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ContainerdRootfsDumpArgs.ContainerID)
}
inline std::string* ContainerdRootfsDumpArgs::_internal_mutable_containerid() {
  
  return containerid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerdRootfsDumpArgs::release_containerid() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ContainerdRootfsDumpArgs.ContainerID)
  return containerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerdRootfsDumpArgs::set_allocated_containerid(std::string* containerid) {
  if (containerid != nullptr) {
    
  } else {
    
  }
  containerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), containerid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ContainerdRootfsDumpArgs.ContainerID)
}
inline std::string* ContainerdRootfsDumpArgs::unsafe_arena_release_containerid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ContainerdRootfsDumpArgs.ContainerID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return containerid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerdRootfsDumpArgs::unsafe_arena_set_allocated_containerid(
    std::string* containerid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (containerid != nullptr) {
    
  } else {
    
  }
  containerid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      containerid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ContainerdRootfsDumpArgs.ContainerID)
}

// string ImageRef = 2[json_name = "ImageRef"];
inline void ContainerdRootfsDumpArgs::clear_imageref() {
  imageref_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerdRootfsDumpArgs::imageref() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ContainerdRootfsDumpArgs.ImageRef)
  return _internal_imageref();
}
inline void ContainerdRootfsDumpArgs::set_imageref(const std::string& value) {
  _internal_set_imageref(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ContainerdRootfsDumpArgs.ImageRef)
}
inline std::string* ContainerdRootfsDumpArgs::mutable_imageref() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ContainerdRootfsDumpArgs.ImageRef)
  return _internal_mutable_imageref();
}
inline const std::string& ContainerdRootfsDumpArgs::_internal_imageref() const {
  return imageref_.Get();
}
inline void ContainerdRootfsDumpArgs::_internal_set_imageref(const std::string& value) {
  
  imageref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerdRootfsDumpArgs::set_imageref(std::string&& value) {
  
  imageref_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ContainerdRootfsDumpArgs.ImageRef)
}
inline void ContainerdRootfsDumpArgs::set_imageref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imageref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ContainerdRootfsDumpArgs.ImageRef)
}
inline void ContainerdRootfsDumpArgs::set_imageref(const char* value,
    size_t size) {
  
  imageref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ContainerdRootfsDumpArgs.ImageRef)
}
inline std::string* ContainerdRootfsDumpArgs::_internal_mutable_imageref() {
  
  return imageref_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerdRootfsDumpArgs::release_imageref() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ContainerdRootfsDumpArgs.ImageRef)
  return imageref_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerdRootfsDumpArgs::set_allocated_imageref(std::string* imageref) {
  if (imageref != nullptr) {
    
  } else {
    
  }
  imageref_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imageref,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ContainerdRootfsDumpArgs.ImageRef)
}
inline std::string* ContainerdRootfsDumpArgs::unsafe_arena_release_imageref() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ContainerdRootfsDumpArgs.ImageRef)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return imageref_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerdRootfsDumpArgs::unsafe_arena_set_allocated_imageref(
    std::string* imageref) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (imageref != nullptr) {
    
  } else {
    
  }
  imageref_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      imageref, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ContainerdRootfsDumpArgs.ImageRef)
}

// string Address = 3[json_name = "Address"];
inline void ContainerdRootfsDumpArgs::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerdRootfsDumpArgs::address() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ContainerdRootfsDumpArgs.Address)
  return _internal_address();
}
inline void ContainerdRootfsDumpArgs::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ContainerdRootfsDumpArgs.Address)
}
inline std::string* ContainerdRootfsDumpArgs::mutable_address() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ContainerdRootfsDumpArgs.Address)
  return _internal_mutable_address();
}
inline const std::string& ContainerdRootfsDumpArgs::_internal_address() const {
  return address_.Get();
}
inline void ContainerdRootfsDumpArgs::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerdRootfsDumpArgs::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ContainerdRootfsDumpArgs.Address)
}
inline void ContainerdRootfsDumpArgs::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ContainerdRootfsDumpArgs.Address)
}
inline void ContainerdRootfsDumpArgs::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ContainerdRootfsDumpArgs.Address)
}
inline std::string* ContainerdRootfsDumpArgs::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerdRootfsDumpArgs::release_address() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ContainerdRootfsDumpArgs.Address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerdRootfsDumpArgs::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ContainerdRootfsDumpArgs.Address)
}
inline std::string* ContainerdRootfsDumpArgs::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ContainerdRootfsDumpArgs.Address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerdRootfsDumpArgs::unsafe_arena_set_allocated_address(
    std::string* address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (address != nullptr) {
    
  } else {
    
  }
  address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ContainerdRootfsDumpArgs.Address)
}

// string Namespace = 4[json_name = "Namespace"];
inline void ContainerdRootfsDumpArgs::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerdRootfsDumpArgs::namespace_() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ContainerdRootfsDumpArgs.Namespace)
  return _internal_namespace_();
}
inline void ContainerdRootfsDumpArgs::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ContainerdRootfsDumpArgs.Namespace)
}
inline std::string* ContainerdRootfsDumpArgs::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ContainerdRootfsDumpArgs.Namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& ContainerdRootfsDumpArgs::_internal_namespace_() const {
  return namespace__.Get();
}
inline void ContainerdRootfsDumpArgs::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerdRootfsDumpArgs::set_namespace_(std::string&& value) {
  
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ContainerdRootfsDumpArgs.Namespace)
}
inline void ContainerdRootfsDumpArgs::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ContainerdRootfsDumpArgs.Namespace)
}
inline void ContainerdRootfsDumpArgs::set_namespace_(const char* value,
    size_t size) {
  
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ContainerdRootfsDumpArgs.Namespace)
}
inline std::string* ContainerdRootfsDumpArgs::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerdRootfsDumpArgs::release_namespace_() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ContainerdRootfsDumpArgs.Namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerdRootfsDumpArgs::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ContainerdRootfsDumpArgs.Namespace)
}
inline std::string* ContainerdRootfsDumpArgs::unsafe_arena_release_namespace_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ContainerdRootfsDumpArgs.Namespace)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return namespace__.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerdRootfsDumpArgs::unsafe_arena_set_allocated_namespace_(
    std::string* namespace_) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      namespace_, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ContainerdRootfsDumpArgs.Namespace)
}

// -------------------------------------------------------------------

// ContainerdRootfsDumpResp

// string ImageRef = 1[json_name = "ImageRef"];
inline void ContainerdRootfsDumpResp::clear_imageref() {
  imageref_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerdRootfsDumpResp::imageref() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ContainerdRootfsDumpResp.ImageRef)
  return _internal_imageref();
}
inline void ContainerdRootfsDumpResp::set_imageref(const std::string& value) {
  _internal_set_imageref(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ContainerdRootfsDumpResp.ImageRef)
}
inline std::string* ContainerdRootfsDumpResp::mutable_imageref() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ContainerdRootfsDumpResp.ImageRef)
  return _internal_mutable_imageref();
}
inline const std::string& ContainerdRootfsDumpResp::_internal_imageref() const {
  return imageref_.Get();
}
inline void ContainerdRootfsDumpResp::_internal_set_imageref(const std::string& value) {
  
  imageref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerdRootfsDumpResp::set_imageref(std::string&& value) {
  
  imageref_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ContainerdRootfsDumpResp.ImageRef)
}
inline void ContainerdRootfsDumpResp::set_imageref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imageref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ContainerdRootfsDumpResp.ImageRef)
}
inline void ContainerdRootfsDumpResp::set_imageref(const char* value,
    size_t size) {
  
  imageref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ContainerdRootfsDumpResp.ImageRef)
}
inline std::string* ContainerdRootfsDumpResp::_internal_mutable_imageref() {
  
  return imageref_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerdRootfsDumpResp::release_imageref() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ContainerdRootfsDumpResp.ImageRef)
  return imageref_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerdRootfsDumpResp::set_allocated_imageref(std::string* imageref) {
  if (imageref != nullptr) {
    
  } else {
    
  }
  imageref_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imageref,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ContainerdRootfsDumpResp.ImageRef)
}
inline std::string* ContainerdRootfsDumpResp::unsafe_arena_release_imageref() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ContainerdRootfsDumpResp.ImageRef)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return imageref_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerdRootfsDumpResp::unsafe_arena_set_allocated_imageref(
    std::string* imageref) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (imageref != nullptr) {
    
  } else {
    
  }
  imageref_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      imageref, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ContainerdRootfsDumpResp.ImageRef)
}

// -------------------------------------------------------------------

// ContainerdRootfsRestoreArgs

// string ContainerID = 1[json_name = "ContainerID"];
inline void ContainerdRootfsRestoreArgs::clear_containerid() {
  containerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerdRootfsRestoreArgs::containerid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ContainerdRootfsRestoreArgs.ContainerID)
  return _internal_containerid();
}
inline void ContainerdRootfsRestoreArgs::set_containerid(const std::string& value) {
  _internal_set_containerid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ContainerdRootfsRestoreArgs.ContainerID)
}
inline std::string* ContainerdRootfsRestoreArgs::mutable_containerid() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ContainerdRootfsRestoreArgs.ContainerID)
  return _internal_mutable_containerid();
}
inline const std::string& ContainerdRootfsRestoreArgs::_internal_containerid() const {
  return containerid_.Get();
}
inline void ContainerdRootfsRestoreArgs::_internal_set_containerid(const std::string& value) {
  
  containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerdRootfsRestoreArgs::set_containerid(std::string&& value) {
  
  containerid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ContainerdRootfsRestoreArgs.ContainerID)
}
inline void ContainerdRootfsRestoreArgs::set_containerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ContainerdRootfsRestoreArgs.ContainerID)
}
inline void ContainerdRootfsRestoreArgs::set_containerid(const char* value,
    size_t size) {
  
  containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ContainerdRootfsRestoreArgs.ContainerID)
}
inline std::string* ContainerdRootfsRestoreArgs::_internal_mutable_containerid() {
  
  return containerid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerdRootfsRestoreArgs::release_containerid() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ContainerdRootfsRestoreArgs.ContainerID)
  return containerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerdRootfsRestoreArgs::set_allocated_containerid(std::string* containerid) {
  if (containerid != nullptr) {
    
  } else {
    
  }
  containerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), containerid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ContainerdRootfsRestoreArgs.ContainerID)
}
inline std::string* ContainerdRootfsRestoreArgs::unsafe_arena_release_containerid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ContainerdRootfsRestoreArgs.ContainerID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return containerid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerdRootfsRestoreArgs::unsafe_arena_set_allocated_containerid(
    std::string* containerid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (containerid != nullptr) {
    
  } else {
    
  }
  containerid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      containerid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ContainerdRootfsRestoreArgs.ContainerID)
}

// string ImageRef = 2[json_name = "ImageRef"];
inline void ContainerdRootfsRestoreArgs::clear_imageref() {
  imageref_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerdRootfsRestoreArgs::imageref() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ContainerdRootfsRestoreArgs.ImageRef)
  return _internal_imageref();
}
inline void ContainerdRootfsRestoreArgs::set_imageref(const std::string& value) {
  _internal_set_imageref(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ContainerdRootfsRestoreArgs.ImageRef)
}
inline std::string* ContainerdRootfsRestoreArgs::mutable_imageref() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ContainerdRootfsRestoreArgs.ImageRef)
  return _internal_mutable_imageref();
}
inline const std::string& ContainerdRootfsRestoreArgs::_internal_imageref() const {
  return imageref_.Get();
}
inline void ContainerdRootfsRestoreArgs::_internal_set_imageref(const std::string& value) {
  
  imageref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerdRootfsRestoreArgs::set_imageref(std::string&& value) {
  
  imageref_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ContainerdRootfsRestoreArgs.ImageRef)
}
inline void ContainerdRootfsRestoreArgs::set_imageref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imageref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ContainerdRootfsRestoreArgs.ImageRef)
}
inline void ContainerdRootfsRestoreArgs::set_imageref(const char* value,
    size_t size) {
  
  imageref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ContainerdRootfsRestoreArgs.ImageRef)
}
inline std::string* ContainerdRootfsRestoreArgs::_internal_mutable_imageref() {
  
  return imageref_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerdRootfsRestoreArgs::release_imageref() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ContainerdRootfsRestoreArgs.ImageRef)
  return imageref_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerdRootfsRestoreArgs::set_allocated_imageref(std::string* imageref) {
  if (imageref != nullptr) {
    
  } else {
    
  }
  imageref_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imageref,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ContainerdRootfsRestoreArgs.ImageRef)
}
inline std::string* ContainerdRootfsRestoreArgs::unsafe_arena_release_imageref() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ContainerdRootfsRestoreArgs.ImageRef)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return imageref_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerdRootfsRestoreArgs::unsafe_arena_set_allocated_imageref(
    std::string* imageref) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (imageref != nullptr) {
    
  } else {
    
  }
  imageref_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      imageref, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ContainerdRootfsRestoreArgs.ImageRef)
}

// string Address = 3[json_name = "Address"];
inline void ContainerdRootfsRestoreArgs::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerdRootfsRestoreArgs::address() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ContainerdRootfsRestoreArgs.Address)
  return _internal_address();
}
inline void ContainerdRootfsRestoreArgs::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ContainerdRootfsRestoreArgs.Address)
}
inline std::string* ContainerdRootfsRestoreArgs::mutable_address() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ContainerdRootfsRestoreArgs.Address)
  return _internal_mutable_address();
}
inline const std::string& ContainerdRootfsRestoreArgs::_internal_address() const {
  return address_.Get();
}
inline void ContainerdRootfsRestoreArgs::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerdRootfsRestoreArgs::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ContainerdRootfsRestoreArgs.Address)
}
inline void ContainerdRootfsRestoreArgs::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ContainerdRootfsRestoreArgs.Address)
}
inline void ContainerdRootfsRestoreArgs::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ContainerdRootfsRestoreArgs.Address)
}
inline std::string* ContainerdRootfsRestoreArgs::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerdRootfsRestoreArgs::release_address() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ContainerdRootfsRestoreArgs.Address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerdRootfsRestoreArgs::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ContainerdRootfsRestoreArgs.Address)
}
inline std::string* ContainerdRootfsRestoreArgs::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ContainerdRootfsRestoreArgs.Address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerdRootfsRestoreArgs::unsafe_arena_set_allocated_address(
    std::string* address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (address != nullptr) {
    
  } else {
    
  }
  address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ContainerdRootfsRestoreArgs.Address)
}

// string Namespace = 4[json_name = "Namespace"];
inline void ContainerdRootfsRestoreArgs::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerdRootfsRestoreArgs::namespace_() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ContainerdRootfsRestoreArgs.Namespace)
  return _internal_namespace_();
}
inline void ContainerdRootfsRestoreArgs::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ContainerdRootfsRestoreArgs.Namespace)
}
inline std::string* ContainerdRootfsRestoreArgs::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ContainerdRootfsRestoreArgs.Namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& ContainerdRootfsRestoreArgs::_internal_namespace_() const {
  return namespace__.Get();
}
inline void ContainerdRootfsRestoreArgs::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerdRootfsRestoreArgs::set_namespace_(std::string&& value) {
  
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ContainerdRootfsRestoreArgs.Namespace)
}
inline void ContainerdRootfsRestoreArgs::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ContainerdRootfsRestoreArgs.Namespace)
}
inline void ContainerdRootfsRestoreArgs::set_namespace_(const char* value,
    size_t size) {
  
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ContainerdRootfsRestoreArgs.Namespace)
}
inline std::string* ContainerdRootfsRestoreArgs::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerdRootfsRestoreArgs::release_namespace_() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ContainerdRootfsRestoreArgs.Namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerdRootfsRestoreArgs::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ContainerdRootfsRestoreArgs.Namespace)
}
inline std::string* ContainerdRootfsRestoreArgs::unsafe_arena_release_namespace_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ContainerdRootfsRestoreArgs.Namespace)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return namespace__.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerdRootfsRestoreArgs::unsafe_arena_set_allocated_namespace_(
    std::string* namespace_) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      namespace_, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ContainerdRootfsRestoreArgs.Namespace)
}

// -------------------------------------------------------------------

// ContainerdRootfsRestoreResp

// string ImageRef = 1[json_name = "ImageRef"];
inline void ContainerdRootfsRestoreResp::clear_imageref() {
  imageref_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContainerdRootfsRestoreResp::imageref() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ContainerdRootfsRestoreResp.ImageRef)
  return _internal_imageref();
}
inline void ContainerdRootfsRestoreResp::set_imageref(const std::string& value) {
  _internal_set_imageref(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ContainerdRootfsRestoreResp.ImageRef)
}
inline std::string* ContainerdRootfsRestoreResp::mutable_imageref() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ContainerdRootfsRestoreResp.ImageRef)
  return _internal_mutable_imageref();
}
inline const std::string& ContainerdRootfsRestoreResp::_internal_imageref() const {
  return imageref_.Get();
}
inline void ContainerdRootfsRestoreResp::_internal_set_imageref(const std::string& value) {
  
  imageref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContainerdRootfsRestoreResp::set_imageref(std::string&& value) {
  
  imageref_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ContainerdRootfsRestoreResp.ImageRef)
}
inline void ContainerdRootfsRestoreResp::set_imageref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imageref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ContainerdRootfsRestoreResp.ImageRef)
}
inline void ContainerdRootfsRestoreResp::set_imageref(const char* value,
    size_t size) {
  
  imageref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ContainerdRootfsRestoreResp.ImageRef)
}
inline std::string* ContainerdRootfsRestoreResp::_internal_mutable_imageref() {
  
  return imageref_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContainerdRootfsRestoreResp::release_imageref() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ContainerdRootfsRestoreResp.ImageRef)
  return imageref_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContainerdRootfsRestoreResp::set_allocated_imageref(std::string* imageref) {
  if (imageref != nullptr) {
    
  } else {
    
  }
  imageref_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imageref,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ContainerdRootfsRestoreResp.ImageRef)
}
inline std::string* ContainerdRootfsRestoreResp::unsafe_arena_release_imageref() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ContainerdRootfsRestoreResp.ImageRef)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return imageref_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContainerdRootfsRestoreResp::unsafe_arena_set_allocated_imageref(
    std::string* imageref) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (imageref != nullptr) {
    
  } else {
    
  }
  imageref_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      imageref, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ContainerdRootfsRestoreResp.ImageRef)
}

// -------------------------------------------------------------------

// RuncDumpArgs

// string Root = 1[json_name = "Root"];
inline void RuncDumpArgs::clear_root() {
  root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuncDumpArgs::root() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncDumpArgs.Root)
  return _internal_root();
}
inline void RuncDumpArgs::set_root(const std::string& value) {
  _internal_set_root(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncDumpArgs.Root)
}
inline std::string* RuncDumpArgs::mutable_root() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncDumpArgs.Root)
  return _internal_mutable_root();
}
inline const std::string& RuncDumpArgs::_internal_root() const {
  return root_.Get();
}
inline void RuncDumpArgs::_internal_set_root(const std::string& value) {
  
  root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuncDumpArgs::set_root(std::string&& value) {
  
  root_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RuncDumpArgs.Root)
}
inline void RuncDumpArgs::set_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RuncDumpArgs.Root)
}
inline void RuncDumpArgs::set_root(const char* value,
    size_t size) {
  
  root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RuncDumpArgs.Root)
}
inline std::string* RuncDumpArgs::_internal_mutable_root() {
  
  return root_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuncDumpArgs::release_root() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncDumpArgs.Root)
  return root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuncDumpArgs::set_allocated_root(std::string* root) {
  if (root != nullptr) {
    
  } else {
    
  }
  root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncDumpArgs.Root)
}
inline std::string* RuncDumpArgs::unsafe_arena_release_root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RuncDumpArgs.Root)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return root_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RuncDumpArgs::unsafe_arena_set_allocated_root(
    std::string* root) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (root != nullptr) {
    
  } else {
    
  }
  root_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      root, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncDumpArgs.Root)
}

// string CheckpointPath = 2[json_name = "CheckpointPath"];
inline void RuncDumpArgs::clear_checkpointpath() {
  checkpointpath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuncDumpArgs::checkpointpath() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncDumpArgs.CheckpointPath)
  return _internal_checkpointpath();
}
inline void RuncDumpArgs::set_checkpointpath(const std::string& value) {
  _internal_set_checkpointpath(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncDumpArgs.CheckpointPath)
}
inline std::string* RuncDumpArgs::mutable_checkpointpath() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncDumpArgs.CheckpointPath)
  return _internal_mutable_checkpointpath();
}
inline const std::string& RuncDumpArgs::_internal_checkpointpath() const {
  return checkpointpath_.Get();
}
inline void RuncDumpArgs::_internal_set_checkpointpath(const std::string& value) {
  
  checkpointpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuncDumpArgs::set_checkpointpath(std::string&& value) {
  
  checkpointpath_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RuncDumpArgs.CheckpointPath)
}
inline void RuncDumpArgs::set_checkpointpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  checkpointpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RuncDumpArgs.CheckpointPath)
}
inline void RuncDumpArgs::set_checkpointpath(const char* value,
    size_t size) {
  
  checkpointpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RuncDumpArgs.CheckpointPath)
}
inline std::string* RuncDumpArgs::_internal_mutable_checkpointpath() {
  
  return checkpointpath_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuncDumpArgs::release_checkpointpath() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncDumpArgs.CheckpointPath)
  return checkpointpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuncDumpArgs::set_allocated_checkpointpath(std::string* checkpointpath) {
  if (checkpointpath != nullptr) {
    
  } else {
    
  }
  checkpointpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), checkpointpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncDumpArgs.CheckpointPath)
}
inline std::string* RuncDumpArgs::unsafe_arena_release_checkpointpath() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RuncDumpArgs.CheckpointPath)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return checkpointpath_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RuncDumpArgs::unsafe_arena_set_allocated_checkpointpath(
    std::string* checkpointpath) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (checkpointpath != nullptr) {
    
  } else {
    
  }
  checkpointpath_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      checkpointpath, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncDumpArgs.CheckpointPath)
}

// string ContainerID = 3[json_name = "ContainerID"];
inline void RuncDumpArgs::clear_containerid() {
  containerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuncDumpArgs::containerid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncDumpArgs.ContainerID)
  return _internal_containerid();
}
inline void RuncDumpArgs::set_containerid(const std::string& value) {
  _internal_set_containerid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncDumpArgs.ContainerID)
}
inline std::string* RuncDumpArgs::mutable_containerid() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncDumpArgs.ContainerID)
  return _internal_mutable_containerid();
}
inline const std::string& RuncDumpArgs::_internal_containerid() const {
  return containerid_.Get();
}
inline void RuncDumpArgs::_internal_set_containerid(const std::string& value) {
  
  containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuncDumpArgs::set_containerid(std::string&& value) {
  
  containerid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RuncDumpArgs.ContainerID)
}
inline void RuncDumpArgs::set_containerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RuncDumpArgs.ContainerID)
}
inline void RuncDumpArgs::set_containerid(const char* value,
    size_t size) {
  
  containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RuncDumpArgs.ContainerID)
}
inline std::string* RuncDumpArgs::_internal_mutable_containerid() {
  
  return containerid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuncDumpArgs::release_containerid() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncDumpArgs.ContainerID)
  return containerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuncDumpArgs::set_allocated_containerid(std::string* containerid) {
  if (containerid != nullptr) {
    
  } else {
    
  }
  containerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), containerid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncDumpArgs.ContainerID)
}
inline std::string* RuncDumpArgs::unsafe_arena_release_containerid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RuncDumpArgs.ContainerID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return containerid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RuncDumpArgs::unsafe_arena_set_allocated_containerid(
    std::string* containerid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (containerid != nullptr) {
    
  } else {
    
  }
  containerid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      containerid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncDumpArgs.ContainerID)
}

// .cedana.services.task.CriuOpts CriuOpts = 4[json_name = "CriuOpts"];
inline bool RuncDumpArgs::_internal_has_criuopts() const {
  return this != internal_default_instance() && criuopts_ != nullptr;
}
inline bool RuncDumpArgs::has_criuopts() const {
  return _internal_has_criuopts();
}
inline void RuncDumpArgs::clear_criuopts() {
  if (GetArena() == nullptr && criuopts_ != nullptr) {
    delete criuopts_;
  }
  criuopts_ = nullptr;
}
inline const ::cedana::services::task::CriuOpts& RuncDumpArgs::_internal_criuopts() const {
  const ::cedana::services::task::CriuOpts* p = criuopts_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cedana::services::task::CriuOpts*>(
      &::cedana::services::task::_CriuOpts_default_instance_);
}
inline const ::cedana::services::task::CriuOpts& RuncDumpArgs::criuopts() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncDumpArgs.CriuOpts)
  return _internal_criuopts();
}
inline void RuncDumpArgs::unsafe_arena_set_allocated_criuopts(
    ::cedana::services::task::CriuOpts* criuopts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(criuopts_);
  }
  criuopts_ = criuopts;
  if (criuopts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncDumpArgs.CriuOpts)
}
inline ::cedana::services::task::CriuOpts* RuncDumpArgs::release_criuopts() {
  auto temp = unsafe_arena_release_criuopts();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cedana::services::task::CriuOpts* RuncDumpArgs::unsafe_arena_release_criuopts() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncDumpArgs.CriuOpts)
  
  ::cedana::services::task::CriuOpts* temp = criuopts_;
  criuopts_ = nullptr;
  return temp;
}
inline ::cedana::services::task::CriuOpts* RuncDumpArgs::_internal_mutable_criuopts() {
  
  if (criuopts_ == nullptr) {
    auto* p = CreateMaybeMessage<::cedana::services::task::CriuOpts>(GetArena());
    criuopts_ = p;
  }
  return criuopts_;
}
inline ::cedana::services::task::CriuOpts* RuncDumpArgs::mutable_criuopts() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncDumpArgs.CriuOpts)
  return _internal_mutable_criuopts();
}
inline void RuncDumpArgs::set_allocated_criuopts(::cedana::services::task::CriuOpts* criuopts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete criuopts_;
  }
  if (criuopts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(criuopts);
    if (message_arena != submessage_arena) {
      criuopts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, criuopts, submessage_arena);
    }
    
  } else {
    
  }
  criuopts_ = criuopts;
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncDumpArgs.CriuOpts)
}

// .cedana.services.task.CRType Type = 5[json_name = "Type"];
inline void RuncDumpArgs::clear_type() {
  type_ = 0;
}
inline ::cedana::services::task::CRType RuncDumpArgs::_internal_type() const {
  return static_cast< ::cedana::services::task::CRType >(type_);
}
inline ::cedana::services::task::CRType RuncDumpArgs::type() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncDumpArgs.Type)
  return _internal_type();
}
inline void RuncDumpArgs::_internal_set_type(::cedana::services::task::CRType value) {
  
  type_ = value;
}
inline void RuncDumpArgs::set_type(::cedana::services::task::CRType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncDumpArgs.Type)
}

// .cedana.services.task.ProcessState state = 6[json_name = "state"];
inline bool RuncDumpArgs::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool RuncDumpArgs::has_state() const {
  return _internal_has_state();
}
inline void RuncDumpArgs::clear_state() {
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::cedana::services::task::ProcessState& RuncDumpArgs::_internal_state() const {
  const ::cedana::services::task::ProcessState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cedana::services::task::ProcessState*>(
      &::cedana::services::task::_ProcessState_default_instance_);
}
inline const ::cedana::services::task::ProcessState& RuncDumpArgs::state() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncDumpArgs.state)
  return _internal_state();
}
inline void RuncDumpArgs::unsafe_arena_set_allocated_state(
    ::cedana::services::task::ProcessState* state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncDumpArgs.state)
}
inline ::cedana::services::task::ProcessState* RuncDumpArgs::release_state() {
  auto temp = unsafe_arena_release_state();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cedana::services::task::ProcessState* RuncDumpArgs::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncDumpArgs.state)
  
  ::cedana::services::task::ProcessState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::cedana::services::task::ProcessState* RuncDumpArgs::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::cedana::services::task::ProcessState>(GetArena());
    state_ = p;
  }
  return state_;
}
inline ::cedana::services::task::ProcessState* RuncDumpArgs::mutable_state() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncDumpArgs.state)
  return _internal_mutable_state();
}
inline void RuncDumpArgs::set_allocated_state(::cedana::services::task::ProcessState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncDumpArgs.state)
}

// bool GPU = 7[json_name = "GPU"];
inline void RuncDumpArgs::clear_gpu() {
  gpu_ = false;
}
inline bool RuncDumpArgs::_internal_gpu() const {
  return gpu_;
}
inline bool RuncDumpArgs::gpu() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncDumpArgs.GPU)
  return _internal_gpu();
}
inline void RuncDumpArgs::_internal_set_gpu(bool value) {
  
  gpu_ = value;
}
inline void RuncDumpArgs::set_gpu(bool value) {
  _internal_set_gpu(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncDumpArgs.GPU)
}

// int32 pid = 8[json_name = "pid"];
inline void RuncDumpArgs::clear_pid() {
  pid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RuncDumpArgs::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RuncDumpArgs::pid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncDumpArgs.pid)
  return _internal_pid();
}
inline void RuncDumpArgs::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pid_ = value;
}
inline void RuncDumpArgs::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncDumpArgs.pid)
}

// -------------------------------------------------------------------

// RuncDumpResp

// string Message = 1[json_name = "Message"];
inline void RuncDumpResp::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuncDumpResp::message() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncDumpResp.Message)
  return _internal_message();
}
inline void RuncDumpResp::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncDumpResp.Message)
}
inline std::string* RuncDumpResp::mutable_message() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncDumpResp.Message)
  return _internal_mutable_message();
}
inline const std::string& RuncDumpResp::_internal_message() const {
  return message_.Get();
}
inline void RuncDumpResp::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuncDumpResp::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RuncDumpResp.Message)
}
inline void RuncDumpResp::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RuncDumpResp.Message)
}
inline void RuncDumpResp::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RuncDumpResp.Message)
}
inline std::string* RuncDumpResp::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuncDumpResp::release_message() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncDumpResp.Message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuncDumpResp::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncDumpResp.Message)
}
inline std::string* RuncDumpResp::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RuncDumpResp.Message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RuncDumpResp::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncDumpResp.Message)
}

// string CheckpointID = 2[json_name = "CheckpointID"];
inline void RuncDumpResp::clear_checkpointid() {
  checkpointid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuncDumpResp::checkpointid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncDumpResp.CheckpointID)
  return _internal_checkpointid();
}
inline void RuncDumpResp::set_checkpointid(const std::string& value) {
  _internal_set_checkpointid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncDumpResp.CheckpointID)
}
inline std::string* RuncDumpResp::mutable_checkpointid() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncDumpResp.CheckpointID)
  return _internal_mutable_checkpointid();
}
inline const std::string& RuncDumpResp::_internal_checkpointid() const {
  return checkpointid_.Get();
}
inline void RuncDumpResp::_internal_set_checkpointid(const std::string& value) {
  
  checkpointid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuncDumpResp::set_checkpointid(std::string&& value) {
  
  checkpointid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RuncDumpResp.CheckpointID)
}
inline void RuncDumpResp::set_checkpointid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  checkpointid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RuncDumpResp.CheckpointID)
}
inline void RuncDumpResp::set_checkpointid(const char* value,
    size_t size) {
  
  checkpointid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RuncDumpResp.CheckpointID)
}
inline std::string* RuncDumpResp::_internal_mutable_checkpointid() {
  
  return checkpointid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuncDumpResp::release_checkpointid() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncDumpResp.CheckpointID)
  return checkpointid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuncDumpResp::set_allocated_checkpointid(std::string* checkpointid) {
  if (checkpointid != nullptr) {
    
  } else {
    
  }
  checkpointid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), checkpointid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncDumpResp.CheckpointID)
}
inline std::string* RuncDumpResp::unsafe_arena_release_checkpointid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RuncDumpResp.CheckpointID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return checkpointid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RuncDumpResp::unsafe_arena_set_allocated_checkpointid(
    std::string* checkpointid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (checkpointid != nullptr) {
    
  } else {
    
  }
  checkpointid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      checkpointid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncDumpResp.CheckpointID)
}

// string UploadID = 3[json_name = "UploadID"];
inline void RuncDumpResp::clear_uploadid() {
  uploadid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuncDumpResp::uploadid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncDumpResp.UploadID)
  return _internal_uploadid();
}
inline void RuncDumpResp::set_uploadid(const std::string& value) {
  _internal_set_uploadid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncDumpResp.UploadID)
}
inline std::string* RuncDumpResp::mutable_uploadid() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncDumpResp.UploadID)
  return _internal_mutable_uploadid();
}
inline const std::string& RuncDumpResp::_internal_uploadid() const {
  return uploadid_.Get();
}
inline void RuncDumpResp::_internal_set_uploadid(const std::string& value) {
  
  uploadid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuncDumpResp::set_uploadid(std::string&& value) {
  
  uploadid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RuncDumpResp.UploadID)
}
inline void RuncDumpResp::set_uploadid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uploadid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RuncDumpResp.UploadID)
}
inline void RuncDumpResp::set_uploadid(const char* value,
    size_t size) {
  
  uploadid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RuncDumpResp.UploadID)
}
inline std::string* RuncDumpResp::_internal_mutable_uploadid() {
  
  return uploadid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuncDumpResp::release_uploadid() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncDumpResp.UploadID)
  return uploadid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuncDumpResp::set_allocated_uploadid(std::string* uploadid) {
  if (uploadid != nullptr) {
    
  } else {
    
  }
  uploadid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uploadid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncDumpResp.UploadID)
}
inline std::string* RuncDumpResp::unsafe_arena_release_uploadid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RuncDumpResp.UploadID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return uploadid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RuncDumpResp::unsafe_arena_set_allocated_uploadid(
    std::string* uploadid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uploadid != nullptr) {
    
  } else {
    
  }
  uploadid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uploadid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncDumpResp.UploadID)
}

// .cedana.services.task.ProcessState State = 4[json_name = "State"];
inline bool RuncDumpResp::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool RuncDumpResp::has_state() const {
  return _internal_has_state();
}
inline void RuncDumpResp::clear_state() {
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::cedana::services::task::ProcessState& RuncDumpResp::_internal_state() const {
  const ::cedana::services::task::ProcessState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cedana::services::task::ProcessState*>(
      &::cedana::services::task::_ProcessState_default_instance_);
}
inline const ::cedana::services::task::ProcessState& RuncDumpResp::state() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncDumpResp.State)
  return _internal_state();
}
inline void RuncDumpResp::unsafe_arena_set_allocated_state(
    ::cedana::services::task::ProcessState* state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncDumpResp.State)
}
inline ::cedana::services::task::ProcessState* RuncDumpResp::release_state() {
  auto temp = unsafe_arena_release_state();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cedana::services::task::ProcessState* RuncDumpResp::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncDumpResp.State)
  
  ::cedana::services::task::ProcessState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::cedana::services::task::ProcessState* RuncDumpResp::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::cedana::services::task::ProcessState>(GetArena());
    state_ = p;
  }
  return state_;
}
inline ::cedana::services::task::ProcessState* RuncDumpResp::mutable_state() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncDumpResp.State)
  return _internal_mutable_state();
}
inline void RuncDumpResp::set_allocated_state(::cedana::services::task::ProcessState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncDumpResp.State)
}

// .cedana.services.task.DumpStats DumpStats = 5[json_name = "DumpStats"];
inline bool RuncDumpResp::_internal_has_dumpstats() const {
  return this != internal_default_instance() && dumpstats_ != nullptr;
}
inline bool RuncDumpResp::has_dumpstats() const {
  return _internal_has_dumpstats();
}
inline void RuncDumpResp::clear_dumpstats() {
  if (GetArena() == nullptr && dumpstats_ != nullptr) {
    delete dumpstats_;
  }
  dumpstats_ = nullptr;
}
inline const ::cedana::services::task::DumpStats& RuncDumpResp::_internal_dumpstats() const {
  const ::cedana::services::task::DumpStats* p = dumpstats_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cedana::services::task::DumpStats*>(
      &::cedana::services::task::_DumpStats_default_instance_);
}
inline const ::cedana::services::task::DumpStats& RuncDumpResp::dumpstats() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncDumpResp.DumpStats)
  return _internal_dumpstats();
}
inline void RuncDumpResp::unsafe_arena_set_allocated_dumpstats(
    ::cedana::services::task::DumpStats* dumpstats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dumpstats_);
  }
  dumpstats_ = dumpstats;
  if (dumpstats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncDumpResp.DumpStats)
}
inline ::cedana::services::task::DumpStats* RuncDumpResp::release_dumpstats() {
  auto temp = unsafe_arena_release_dumpstats();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cedana::services::task::DumpStats* RuncDumpResp::unsafe_arena_release_dumpstats() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncDumpResp.DumpStats)
  
  ::cedana::services::task::DumpStats* temp = dumpstats_;
  dumpstats_ = nullptr;
  return temp;
}
inline ::cedana::services::task::DumpStats* RuncDumpResp::_internal_mutable_dumpstats() {
  
  if (dumpstats_ == nullptr) {
    auto* p = CreateMaybeMessage<::cedana::services::task::DumpStats>(GetArena());
    dumpstats_ = p;
  }
  return dumpstats_;
}
inline ::cedana::services::task::DumpStats* RuncDumpResp::mutable_dumpstats() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncDumpResp.DumpStats)
  return _internal_mutable_dumpstats();
}
inline void RuncDumpResp::set_allocated_dumpstats(::cedana::services::task::DumpStats* dumpstats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dumpstats_;
  }
  if (dumpstats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dumpstats);
    if (message_arena != submessage_arena) {
      dumpstats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dumpstats, submessage_arena);
    }
    
  } else {
    
  }
  dumpstats_ = dumpstats;
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncDumpResp.DumpStats)
}

// -------------------------------------------------------------------

// CriuOpts

// string ImagesDirectory = 1[json_name = "ImagesDirectory"];
inline void CriuOpts::clear_imagesdirectory() {
  imagesdirectory_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CriuOpts::imagesdirectory() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CriuOpts.ImagesDirectory)
  return _internal_imagesdirectory();
}
inline void CriuOpts::set_imagesdirectory(const std::string& value) {
  _internal_set_imagesdirectory(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CriuOpts.ImagesDirectory)
}
inline std::string* CriuOpts::mutable_imagesdirectory() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.CriuOpts.ImagesDirectory)
  return _internal_mutable_imagesdirectory();
}
inline const std::string& CriuOpts::_internal_imagesdirectory() const {
  return imagesdirectory_.Get();
}
inline void CriuOpts::_internal_set_imagesdirectory(const std::string& value) {
  
  imagesdirectory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CriuOpts::set_imagesdirectory(std::string&& value) {
  
  imagesdirectory_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.CriuOpts.ImagesDirectory)
}
inline void CriuOpts::set_imagesdirectory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imagesdirectory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.CriuOpts.ImagesDirectory)
}
inline void CriuOpts::set_imagesdirectory(const char* value,
    size_t size) {
  
  imagesdirectory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.CriuOpts.ImagesDirectory)
}
inline std::string* CriuOpts::_internal_mutable_imagesdirectory() {
  
  return imagesdirectory_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CriuOpts::release_imagesdirectory() {
  // @@protoc_insertion_point(field_release:cedana.services.task.CriuOpts.ImagesDirectory)
  return imagesdirectory_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CriuOpts::set_allocated_imagesdirectory(std::string* imagesdirectory) {
  if (imagesdirectory != nullptr) {
    
  } else {
    
  }
  imagesdirectory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imagesdirectory,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.CriuOpts.ImagesDirectory)
}
inline std::string* CriuOpts::unsafe_arena_release_imagesdirectory() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.CriuOpts.ImagesDirectory)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return imagesdirectory_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CriuOpts::unsafe_arena_set_allocated_imagesdirectory(
    std::string* imagesdirectory) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (imagesdirectory != nullptr) {
    
  } else {
    
  }
  imagesdirectory_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      imagesdirectory, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.CriuOpts.ImagesDirectory)
}

// string WorkDirectory = 2[json_name = "WorkDirectory"];
inline void CriuOpts::clear_workdirectory() {
  workdirectory_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CriuOpts::workdirectory() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CriuOpts.WorkDirectory)
  return _internal_workdirectory();
}
inline void CriuOpts::set_workdirectory(const std::string& value) {
  _internal_set_workdirectory(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CriuOpts.WorkDirectory)
}
inline std::string* CriuOpts::mutable_workdirectory() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.CriuOpts.WorkDirectory)
  return _internal_mutable_workdirectory();
}
inline const std::string& CriuOpts::_internal_workdirectory() const {
  return workdirectory_.Get();
}
inline void CriuOpts::_internal_set_workdirectory(const std::string& value) {
  
  workdirectory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CriuOpts::set_workdirectory(std::string&& value) {
  
  workdirectory_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.CriuOpts.WorkDirectory)
}
inline void CriuOpts::set_workdirectory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workdirectory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.CriuOpts.WorkDirectory)
}
inline void CriuOpts::set_workdirectory(const char* value,
    size_t size) {
  
  workdirectory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.CriuOpts.WorkDirectory)
}
inline std::string* CriuOpts::_internal_mutable_workdirectory() {
  
  return workdirectory_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CriuOpts::release_workdirectory() {
  // @@protoc_insertion_point(field_release:cedana.services.task.CriuOpts.WorkDirectory)
  return workdirectory_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CriuOpts::set_allocated_workdirectory(std::string* workdirectory) {
  if (workdirectory != nullptr) {
    
  } else {
    
  }
  workdirectory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workdirectory,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.CriuOpts.WorkDirectory)
}
inline std::string* CriuOpts::unsafe_arena_release_workdirectory() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.CriuOpts.WorkDirectory)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return workdirectory_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CriuOpts::unsafe_arena_set_allocated_workdirectory(
    std::string* workdirectory) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (workdirectory != nullptr) {
    
  } else {
    
  }
  workdirectory_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      workdirectory, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.CriuOpts.WorkDirectory)
}

// string ParentImage = 3[json_name = "ParentImage"];
inline void CriuOpts::clear_parentimage() {
  parentimage_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CriuOpts::parentimage() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CriuOpts.ParentImage)
  return _internal_parentimage();
}
inline void CriuOpts::set_parentimage(const std::string& value) {
  _internal_set_parentimage(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CriuOpts.ParentImage)
}
inline std::string* CriuOpts::mutable_parentimage() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.CriuOpts.ParentImage)
  return _internal_mutable_parentimage();
}
inline const std::string& CriuOpts::_internal_parentimage() const {
  return parentimage_.Get();
}
inline void CriuOpts::_internal_set_parentimage(const std::string& value) {
  
  parentimage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CriuOpts::set_parentimage(std::string&& value) {
  
  parentimage_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.CriuOpts.ParentImage)
}
inline void CriuOpts::set_parentimage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parentimage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.CriuOpts.ParentImage)
}
inline void CriuOpts::set_parentimage(const char* value,
    size_t size) {
  
  parentimage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.CriuOpts.ParentImage)
}
inline std::string* CriuOpts::_internal_mutable_parentimage() {
  
  return parentimage_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CriuOpts::release_parentimage() {
  // @@protoc_insertion_point(field_release:cedana.services.task.CriuOpts.ParentImage)
  return parentimage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CriuOpts::set_allocated_parentimage(std::string* parentimage) {
  if (parentimage != nullptr) {
    
  } else {
    
  }
  parentimage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parentimage,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.CriuOpts.ParentImage)
}
inline std::string* CriuOpts::unsafe_arena_release_parentimage() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.CriuOpts.ParentImage)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return parentimage_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CriuOpts::unsafe_arena_set_allocated_parentimage(
    std::string* parentimage) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (parentimage != nullptr) {
    
  } else {
    
  }
  parentimage_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      parentimage, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.CriuOpts.ParentImage)
}

// bool LeaveRunning = 4[json_name = "LeaveRunning"];
inline void CriuOpts::clear_leaverunning() {
  leaverunning_ = false;
}
inline bool CriuOpts::_internal_leaverunning() const {
  return leaverunning_;
}
inline bool CriuOpts::leaverunning() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CriuOpts.LeaveRunning)
  return _internal_leaverunning();
}
inline void CriuOpts::_internal_set_leaverunning(bool value) {
  
  leaverunning_ = value;
}
inline void CriuOpts::set_leaverunning(bool value) {
  _internal_set_leaverunning(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CriuOpts.LeaveRunning)
}

// bool TcpEstablished = 5[json_name = "TcpEstablished"];
inline void CriuOpts::clear_tcpestablished() {
  tcpestablished_ = false;
}
inline bool CriuOpts::_internal_tcpestablished() const {
  return tcpestablished_;
}
inline bool CriuOpts::tcpestablished() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CriuOpts.TcpEstablished)
  return _internal_tcpestablished();
}
inline void CriuOpts::_internal_set_tcpestablished(bool value) {
  
  tcpestablished_ = value;
}
inline void CriuOpts::set_tcpestablished(bool value) {
  _internal_set_tcpestablished(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CriuOpts.TcpEstablished)
}

// bool ExternalUnixConnections = 6[json_name = "ExternalUnixConnections"];
inline void CriuOpts::clear_externalunixconnections() {
  externalunixconnections_ = false;
}
inline bool CriuOpts::_internal_externalunixconnections() const {
  return externalunixconnections_;
}
inline bool CriuOpts::externalunixconnections() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CriuOpts.ExternalUnixConnections)
  return _internal_externalunixconnections();
}
inline void CriuOpts::_internal_set_externalunixconnections(bool value) {
  
  externalunixconnections_ = value;
}
inline void CriuOpts::set_externalunixconnections(bool value) {
  _internal_set_externalunixconnections(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CriuOpts.ExternalUnixConnections)
}

// bool ShellJob = 7[json_name = "ShellJob"];
inline void CriuOpts::clear_shelljob() {
  shelljob_ = false;
}
inline bool CriuOpts::_internal_shelljob() const {
  return shelljob_;
}
inline bool CriuOpts::shelljob() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CriuOpts.ShellJob)
  return _internal_shelljob();
}
inline void CriuOpts::_internal_set_shelljob(bool value) {
  
  shelljob_ = value;
}
inline void CriuOpts::set_shelljob(bool value) {
  _internal_set_shelljob(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CriuOpts.ShellJob)
}

// bool FileLocks = 8[json_name = "FileLocks"];
inline void CriuOpts::clear_filelocks() {
  filelocks_ = false;
}
inline bool CriuOpts::_internal_filelocks() const {
  return filelocks_;
}
inline bool CriuOpts::filelocks() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CriuOpts.FileLocks)
  return _internal_filelocks();
}
inline void CriuOpts::_internal_set_filelocks(bool value) {
  
  filelocks_ = value;
}
inline void CriuOpts::set_filelocks(bool value) {
  _internal_set_filelocks(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CriuOpts.FileLocks)
}

// bool PreDump = 9[json_name = "PreDump"];
inline void CriuOpts::clear_predump() {
  predump_ = false;
}
inline bool CriuOpts::_internal_predump() const {
  return predump_;
}
inline bool CriuOpts::predump() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CriuOpts.PreDump)
  return _internal_predump();
}
inline void CriuOpts::_internal_set_predump(bool value) {
  
  predump_ = value;
}
inline void CriuOpts::set_predump(bool value) {
  _internal_set_predump(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CriuOpts.PreDump)
}

// bool Stream = 10[json_name = "Stream"];
inline void CriuOpts::clear_stream() {
  stream_ = false;
}
inline bool CriuOpts::_internal_stream() const {
  return stream_;
}
inline bool CriuOpts::stream() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CriuOpts.Stream)
  return _internal_stream();
}
inline void CriuOpts::_internal_set_stream(bool value) {
  
  stream_ = value;
}
inline void CriuOpts::set_stream(bool value) {
  _internal_set_stream(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CriuOpts.Stream)
}

// int32 EmptyNs = 12[json_name = "EmptyNs"];
inline void CriuOpts::clear_emptyns() {
  emptyns_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CriuOpts::_internal_emptyns() const {
  return emptyns_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CriuOpts::emptyns() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CriuOpts.EmptyNs)
  return _internal_emptyns();
}
inline void CriuOpts::_internal_set_emptyns(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  emptyns_ = value;
}
inline void CriuOpts::set_emptyns(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_emptyns(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CriuOpts.EmptyNs)
}

// bool AutoDedup = 13[json_name = "AutoDedup"];
inline void CriuOpts::clear_autodedup() {
  autodedup_ = false;
}
inline bool CriuOpts::_internal_autodedup() const {
  return autodedup_;
}
inline bool CriuOpts::autodedup() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CriuOpts.AutoDedup)
  return _internal_autodedup();
}
inline void CriuOpts::_internal_set_autodedup(bool value) {
  
  autodedup_ = value;
}
inline void CriuOpts::set_autodedup(bool value) {
  _internal_set_autodedup(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CriuOpts.AutoDedup)
}

// bool LazyPages = 14[json_name = "LazyPages"];
inline void CriuOpts::clear_lazypages() {
  lazypages_ = false;
}
inline bool CriuOpts::_internal_lazypages() const {
  return lazypages_;
}
inline bool CriuOpts::lazypages() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CriuOpts.LazyPages)
  return _internal_lazypages();
}
inline void CriuOpts::_internal_set_lazypages(bool value) {
  
  lazypages_ = value;
}
inline void CriuOpts::set_lazypages(bool value) {
  _internal_set_lazypages(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CriuOpts.LazyPages)
}

// int32 StatusFd = 15[json_name = "StatusFd"];
inline void CriuOpts::clear_statusfd() {
  statusfd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CriuOpts::_internal_statusfd() const {
  return statusfd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CriuOpts::statusfd() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CriuOpts.StatusFd)
  return _internal_statusfd();
}
inline void CriuOpts::_internal_set_statusfd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  statusfd_ = value;
}
inline void CriuOpts::set_statusfd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_statusfd(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CriuOpts.StatusFd)
}

// string LsmProfile = 16[json_name = "LsmProfile"];
inline void CriuOpts::clear_lsmprofile() {
  lsmprofile_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CriuOpts::lsmprofile() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CriuOpts.LsmProfile)
  return _internal_lsmprofile();
}
inline void CriuOpts::set_lsmprofile(const std::string& value) {
  _internal_set_lsmprofile(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CriuOpts.LsmProfile)
}
inline std::string* CriuOpts::mutable_lsmprofile() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.CriuOpts.LsmProfile)
  return _internal_mutable_lsmprofile();
}
inline const std::string& CriuOpts::_internal_lsmprofile() const {
  return lsmprofile_.Get();
}
inline void CriuOpts::_internal_set_lsmprofile(const std::string& value) {
  
  lsmprofile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CriuOpts::set_lsmprofile(std::string&& value) {
  
  lsmprofile_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.CriuOpts.LsmProfile)
}
inline void CriuOpts::set_lsmprofile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lsmprofile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.CriuOpts.LsmProfile)
}
inline void CriuOpts::set_lsmprofile(const char* value,
    size_t size) {
  
  lsmprofile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.CriuOpts.LsmProfile)
}
inline std::string* CriuOpts::_internal_mutable_lsmprofile() {
  
  return lsmprofile_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CriuOpts::release_lsmprofile() {
  // @@protoc_insertion_point(field_release:cedana.services.task.CriuOpts.LsmProfile)
  return lsmprofile_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CriuOpts::set_allocated_lsmprofile(std::string* lsmprofile) {
  if (lsmprofile != nullptr) {
    
  } else {
    
  }
  lsmprofile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lsmprofile,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.CriuOpts.LsmProfile)
}
inline std::string* CriuOpts::unsafe_arena_release_lsmprofile() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.CriuOpts.LsmProfile)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return lsmprofile_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CriuOpts::unsafe_arena_set_allocated_lsmprofile(
    std::string* lsmprofile) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (lsmprofile != nullptr) {
    
  } else {
    
  }
  lsmprofile_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      lsmprofile, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.CriuOpts.LsmProfile)
}

// string LsmMountContext = 17[json_name = "LsmMountContext"];
inline void CriuOpts::clear_lsmmountcontext() {
  lsmmountcontext_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CriuOpts::lsmmountcontext() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CriuOpts.LsmMountContext)
  return _internal_lsmmountcontext();
}
inline void CriuOpts::set_lsmmountcontext(const std::string& value) {
  _internal_set_lsmmountcontext(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CriuOpts.LsmMountContext)
}
inline std::string* CriuOpts::mutable_lsmmountcontext() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.CriuOpts.LsmMountContext)
  return _internal_mutable_lsmmountcontext();
}
inline const std::string& CriuOpts::_internal_lsmmountcontext() const {
  return lsmmountcontext_.Get();
}
inline void CriuOpts::_internal_set_lsmmountcontext(const std::string& value) {
  
  lsmmountcontext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CriuOpts::set_lsmmountcontext(std::string&& value) {
  
  lsmmountcontext_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.CriuOpts.LsmMountContext)
}
inline void CriuOpts::set_lsmmountcontext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lsmmountcontext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.CriuOpts.LsmMountContext)
}
inline void CriuOpts::set_lsmmountcontext(const char* value,
    size_t size) {
  
  lsmmountcontext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.CriuOpts.LsmMountContext)
}
inline std::string* CriuOpts::_internal_mutable_lsmmountcontext() {
  
  return lsmmountcontext_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CriuOpts::release_lsmmountcontext() {
  // @@protoc_insertion_point(field_release:cedana.services.task.CriuOpts.LsmMountContext)
  return lsmmountcontext_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CriuOpts::set_allocated_lsmmountcontext(std::string* lsmmountcontext) {
  if (lsmmountcontext != nullptr) {
    
  } else {
    
  }
  lsmmountcontext_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lsmmountcontext,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.CriuOpts.LsmMountContext)
}
inline std::string* CriuOpts::unsafe_arena_release_lsmmountcontext() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.CriuOpts.LsmMountContext)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return lsmmountcontext_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CriuOpts::unsafe_arena_set_allocated_lsmmountcontext(
    std::string* lsmmountcontext) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (lsmmountcontext != nullptr) {
    
  } else {
    
  }
  lsmmountcontext_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      lsmmountcontext, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.CriuOpts.LsmMountContext)
}

// repeated string External = 18[json_name = "External"];
inline int CriuOpts::_internal_external_size() const {
  return external_.size();
}
inline int CriuOpts::external_size() const {
  return _internal_external_size();
}
inline void CriuOpts::clear_external() {
  external_.Clear();
}
inline std::string* CriuOpts::add_external() {
  // @@protoc_insertion_point(field_add_mutable:cedana.services.task.CriuOpts.External)
  return _internal_add_external();
}
inline const std::string& CriuOpts::_internal_external(int index) const {
  return external_.Get(index);
}
inline const std::string& CriuOpts::external(int index) const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CriuOpts.External)
  return _internal_external(index);
}
inline std::string* CriuOpts::mutable_external(int index) {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.CriuOpts.External)
  return external_.Mutable(index);
}
inline void CriuOpts::set_external(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:cedana.services.task.CriuOpts.External)
  external_.Mutable(index)->assign(value);
}
inline void CriuOpts::set_external(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:cedana.services.task.CriuOpts.External)
  external_.Mutable(index)->assign(std::move(value));
}
inline void CriuOpts::set_external(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  external_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cedana.services.task.CriuOpts.External)
}
inline void CriuOpts::set_external(int index, const char* value, size_t size) {
  external_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.CriuOpts.External)
}
inline std::string* CriuOpts::_internal_add_external() {
  return external_.Add();
}
inline void CriuOpts::add_external(const std::string& value) {
  external_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cedana.services.task.CriuOpts.External)
}
inline void CriuOpts::add_external(std::string&& value) {
  external_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cedana.services.task.CriuOpts.External)
}
inline void CriuOpts::add_external(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  external_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cedana.services.task.CriuOpts.External)
}
inline void CriuOpts::add_external(const char* value, size_t size) {
  external_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cedana.services.task.CriuOpts.External)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CriuOpts::external() const {
  // @@protoc_insertion_point(field_list:cedana.services.task.CriuOpts.External)
  return external_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CriuOpts::mutable_external() {
  // @@protoc_insertion_point(field_mutable_list:cedana.services.task.CriuOpts.External)
  return &external_;
}

// -------------------------------------------------------------------

// RuncRestoreArgs

// string ContainerID = 1[json_name = "ContainerID"];
inline void RuncRestoreArgs::clear_containerid() {
  containerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuncRestoreArgs::containerid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncRestoreArgs.ContainerID)
  return _internal_containerid();
}
inline void RuncRestoreArgs::set_containerid(const std::string& value) {
  _internal_set_containerid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncRestoreArgs.ContainerID)
}
inline std::string* RuncRestoreArgs::mutable_containerid() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncRestoreArgs.ContainerID)
  return _internal_mutable_containerid();
}
inline const std::string& RuncRestoreArgs::_internal_containerid() const {
  return containerid_.Get();
}
inline void RuncRestoreArgs::_internal_set_containerid(const std::string& value) {
  
  containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuncRestoreArgs::set_containerid(std::string&& value) {
  
  containerid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RuncRestoreArgs.ContainerID)
}
inline void RuncRestoreArgs::set_containerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RuncRestoreArgs.ContainerID)
}
inline void RuncRestoreArgs::set_containerid(const char* value,
    size_t size) {
  
  containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RuncRestoreArgs.ContainerID)
}
inline std::string* RuncRestoreArgs::_internal_mutable_containerid() {
  
  return containerid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuncRestoreArgs::release_containerid() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncRestoreArgs.ContainerID)
  return containerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuncRestoreArgs::set_allocated_containerid(std::string* containerid) {
  if (containerid != nullptr) {
    
  } else {
    
  }
  containerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), containerid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncRestoreArgs.ContainerID)
}
inline std::string* RuncRestoreArgs::unsafe_arena_release_containerid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RuncRestoreArgs.ContainerID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return containerid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RuncRestoreArgs::unsafe_arena_set_allocated_containerid(
    std::string* containerid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (containerid != nullptr) {
    
  } else {
    
  }
  containerid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      containerid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncRestoreArgs.ContainerID)
}

// string ImagePath = 2[json_name = "ImagePath"];
inline void RuncRestoreArgs::clear_imagepath() {
  imagepath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuncRestoreArgs::imagepath() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncRestoreArgs.ImagePath)
  return _internal_imagepath();
}
inline void RuncRestoreArgs::set_imagepath(const std::string& value) {
  _internal_set_imagepath(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncRestoreArgs.ImagePath)
}
inline std::string* RuncRestoreArgs::mutable_imagepath() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncRestoreArgs.ImagePath)
  return _internal_mutable_imagepath();
}
inline const std::string& RuncRestoreArgs::_internal_imagepath() const {
  return imagepath_.Get();
}
inline void RuncRestoreArgs::_internal_set_imagepath(const std::string& value) {
  
  imagepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuncRestoreArgs::set_imagepath(std::string&& value) {
  
  imagepath_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RuncRestoreArgs.ImagePath)
}
inline void RuncRestoreArgs::set_imagepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imagepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RuncRestoreArgs.ImagePath)
}
inline void RuncRestoreArgs::set_imagepath(const char* value,
    size_t size) {
  
  imagepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RuncRestoreArgs.ImagePath)
}
inline std::string* RuncRestoreArgs::_internal_mutable_imagepath() {
  
  return imagepath_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuncRestoreArgs::release_imagepath() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncRestoreArgs.ImagePath)
  return imagepath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuncRestoreArgs::set_allocated_imagepath(std::string* imagepath) {
  if (imagepath != nullptr) {
    
  } else {
    
  }
  imagepath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imagepath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncRestoreArgs.ImagePath)
}
inline std::string* RuncRestoreArgs::unsafe_arena_release_imagepath() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RuncRestoreArgs.ImagePath)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return imagepath_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RuncRestoreArgs::unsafe_arena_set_allocated_imagepath(
    std::string* imagepath) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (imagepath != nullptr) {
    
  } else {
    
  }
  imagepath_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      imagepath, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncRestoreArgs.ImagePath)
}

// .cedana.services.task.RuncOpts Opts = 3[json_name = "Opts"];
inline bool RuncRestoreArgs::_internal_has_opts() const {
  return this != internal_default_instance() && opts_ != nullptr;
}
inline bool RuncRestoreArgs::has_opts() const {
  return _internal_has_opts();
}
inline void RuncRestoreArgs::clear_opts() {
  if (GetArena() == nullptr && opts_ != nullptr) {
    delete opts_;
  }
  opts_ = nullptr;
}
inline const ::cedana::services::task::RuncOpts& RuncRestoreArgs::_internal_opts() const {
  const ::cedana::services::task::RuncOpts* p = opts_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cedana::services::task::RuncOpts*>(
      &::cedana::services::task::_RuncOpts_default_instance_);
}
inline const ::cedana::services::task::RuncOpts& RuncRestoreArgs::opts() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncRestoreArgs.Opts)
  return _internal_opts();
}
inline void RuncRestoreArgs::unsafe_arena_set_allocated_opts(
    ::cedana::services::task::RuncOpts* opts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(opts_);
  }
  opts_ = opts;
  if (opts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncRestoreArgs.Opts)
}
inline ::cedana::services::task::RuncOpts* RuncRestoreArgs::release_opts() {
  auto temp = unsafe_arena_release_opts();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cedana::services::task::RuncOpts* RuncRestoreArgs::unsafe_arena_release_opts() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncRestoreArgs.Opts)
  
  ::cedana::services::task::RuncOpts* temp = opts_;
  opts_ = nullptr;
  return temp;
}
inline ::cedana::services::task::RuncOpts* RuncRestoreArgs::_internal_mutable_opts() {
  
  if (opts_ == nullptr) {
    auto* p = CreateMaybeMessage<::cedana::services::task::RuncOpts>(GetArena());
    opts_ = p;
  }
  return opts_;
}
inline ::cedana::services::task::RuncOpts* RuncRestoreArgs::mutable_opts() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncRestoreArgs.Opts)
  return _internal_mutable_opts();
}
inline void RuncRestoreArgs::set_allocated_opts(::cedana::services::task::RuncOpts* opts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete opts_;
  }
  if (opts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(opts);
    if (message_arena != submessage_arena) {
      opts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, opts, submessage_arena);
    }
    
  } else {
    
  }
  opts_ = opts;
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncRestoreArgs.Opts)
}

// .cedana.services.task.CRType Type = 4[json_name = "Type"];
inline void RuncRestoreArgs::clear_type() {
  type_ = 0;
}
inline ::cedana::services::task::CRType RuncRestoreArgs::_internal_type() const {
  return static_cast< ::cedana::services::task::CRType >(type_);
}
inline ::cedana::services::task::CRType RuncRestoreArgs::type() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncRestoreArgs.Type)
  return _internal_type();
}
inline void RuncRestoreArgs::_internal_set_type(::cedana::services::task::CRType value) {
  
  type_ = value;
}
inline void RuncRestoreArgs::set_type(::cedana::services::task::CRType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncRestoreArgs.Type)
}

// string CheckpointID = 5[json_name = "CheckpointID"];
inline void RuncRestoreArgs::clear_checkpointid() {
  checkpointid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuncRestoreArgs::checkpointid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncRestoreArgs.CheckpointID)
  return _internal_checkpointid();
}
inline void RuncRestoreArgs::set_checkpointid(const std::string& value) {
  _internal_set_checkpointid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncRestoreArgs.CheckpointID)
}
inline std::string* RuncRestoreArgs::mutable_checkpointid() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncRestoreArgs.CheckpointID)
  return _internal_mutable_checkpointid();
}
inline const std::string& RuncRestoreArgs::_internal_checkpointid() const {
  return checkpointid_.Get();
}
inline void RuncRestoreArgs::_internal_set_checkpointid(const std::string& value) {
  
  checkpointid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuncRestoreArgs::set_checkpointid(std::string&& value) {
  
  checkpointid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RuncRestoreArgs.CheckpointID)
}
inline void RuncRestoreArgs::set_checkpointid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  checkpointid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RuncRestoreArgs.CheckpointID)
}
inline void RuncRestoreArgs::set_checkpointid(const char* value,
    size_t size) {
  
  checkpointid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RuncRestoreArgs.CheckpointID)
}
inline std::string* RuncRestoreArgs::_internal_mutable_checkpointid() {
  
  return checkpointid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuncRestoreArgs::release_checkpointid() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncRestoreArgs.CheckpointID)
  return checkpointid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuncRestoreArgs::set_allocated_checkpointid(std::string* checkpointid) {
  if (checkpointid != nullptr) {
    
  } else {
    
  }
  checkpointid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), checkpointid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncRestoreArgs.CheckpointID)
}
inline std::string* RuncRestoreArgs::unsafe_arena_release_checkpointid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RuncRestoreArgs.CheckpointID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return checkpointid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RuncRestoreArgs::unsafe_arena_set_allocated_checkpointid(
    std::string* checkpointid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (checkpointid != nullptr) {
    
  } else {
    
  }
  checkpointid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      checkpointid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncRestoreArgs.CheckpointID)
}

// .cedana.services.task.CriuOpts CriuOpts = 6[json_name = "CriuOpts"];
inline bool RuncRestoreArgs::_internal_has_criuopts() const {
  return this != internal_default_instance() && criuopts_ != nullptr;
}
inline bool RuncRestoreArgs::has_criuopts() const {
  return _internal_has_criuopts();
}
inline void RuncRestoreArgs::clear_criuopts() {
  if (GetArena() == nullptr && criuopts_ != nullptr) {
    delete criuopts_;
  }
  criuopts_ = nullptr;
}
inline const ::cedana::services::task::CriuOpts& RuncRestoreArgs::_internal_criuopts() const {
  const ::cedana::services::task::CriuOpts* p = criuopts_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cedana::services::task::CriuOpts*>(
      &::cedana::services::task::_CriuOpts_default_instance_);
}
inline const ::cedana::services::task::CriuOpts& RuncRestoreArgs::criuopts() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncRestoreArgs.CriuOpts)
  return _internal_criuopts();
}
inline void RuncRestoreArgs::unsafe_arena_set_allocated_criuopts(
    ::cedana::services::task::CriuOpts* criuopts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(criuopts_);
  }
  criuopts_ = criuopts;
  if (criuopts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncRestoreArgs.CriuOpts)
}
inline ::cedana::services::task::CriuOpts* RuncRestoreArgs::release_criuopts() {
  auto temp = unsafe_arena_release_criuopts();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cedana::services::task::CriuOpts* RuncRestoreArgs::unsafe_arena_release_criuopts() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncRestoreArgs.CriuOpts)
  
  ::cedana::services::task::CriuOpts* temp = criuopts_;
  criuopts_ = nullptr;
  return temp;
}
inline ::cedana::services::task::CriuOpts* RuncRestoreArgs::_internal_mutable_criuopts() {
  
  if (criuopts_ == nullptr) {
    auto* p = CreateMaybeMessage<::cedana::services::task::CriuOpts>(GetArena());
    criuopts_ = p;
  }
  return criuopts_;
}
inline ::cedana::services::task::CriuOpts* RuncRestoreArgs::mutable_criuopts() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncRestoreArgs.CriuOpts)
  return _internal_mutable_criuopts();
}
inline void RuncRestoreArgs::set_allocated_criuopts(::cedana::services::task::CriuOpts* criuopts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete criuopts_;
  }
  if (criuopts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(criuopts);
    if (message_arena != submessage_arena) {
      criuopts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, criuopts, submessage_arena);
    }
    
  } else {
    
  }
  criuopts_ = criuopts;
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncRestoreArgs.CriuOpts)
}

// -------------------------------------------------------------------

// RuncRestoreResp

// string Message = 1[json_name = "Message"];
inline void RuncRestoreResp::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuncRestoreResp::message() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncRestoreResp.Message)
  return _internal_message();
}
inline void RuncRestoreResp::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncRestoreResp.Message)
}
inline std::string* RuncRestoreResp::mutable_message() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncRestoreResp.Message)
  return _internal_mutable_message();
}
inline const std::string& RuncRestoreResp::_internal_message() const {
  return message_.Get();
}
inline void RuncRestoreResp::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuncRestoreResp::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RuncRestoreResp.Message)
}
inline void RuncRestoreResp::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RuncRestoreResp.Message)
}
inline void RuncRestoreResp::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RuncRestoreResp.Message)
}
inline std::string* RuncRestoreResp::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuncRestoreResp::release_message() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncRestoreResp.Message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuncRestoreResp::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncRestoreResp.Message)
}
inline std::string* RuncRestoreResp::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RuncRestoreResp.Message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RuncRestoreResp::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncRestoreResp.Message)
}

// .cedana.services.task.ProcessState State = 2[json_name = "State"];
inline bool RuncRestoreResp::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool RuncRestoreResp::has_state() const {
  return _internal_has_state();
}
inline void RuncRestoreResp::clear_state() {
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::cedana::services::task::ProcessState& RuncRestoreResp::_internal_state() const {
  const ::cedana::services::task::ProcessState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cedana::services::task::ProcessState*>(
      &::cedana::services::task::_ProcessState_default_instance_);
}
inline const ::cedana::services::task::ProcessState& RuncRestoreResp::state() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncRestoreResp.State)
  return _internal_state();
}
inline void RuncRestoreResp::unsafe_arena_set_allocated_state(
    ::cedana::services::task::ProcessState* state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncRestoreResp.State)
}
inline ::cedana::services::task::ProcessState* RuncRestoreResp::release_state() {
  auto temp = unsafe_arena_release_state();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cedana::services::task::ProcessState* RuncRestoreResp::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncRestoreResp.State)
  
  ::cedana::services::task::ProcessState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::cedana::services::task::ProcessState* RuncRestoreResp::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::cedana::services::task::ProcessState>(GetArena());
    state_ = p;
  }
  return state_;
}
inline ::cedana::services::task::ProcessState* RuncRestoreResp::mutable_state() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncRestoreResp.State)
  return _internal_mutable_state();
}
inline void RuncRestoreResp::set_allocated_state(::cedana::services::task::ProcessState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncRestoreResp.State)
}

// .cedana.services.task.RestoreStats RestoreStats = 3[json_name = "RestoreStats"];
inline bool RuncRestoreResp::_internal_has_restorestats() const {
  return this != internal_default_instance() && restorestats_ != nullptr;
}
inline bool RuncRestoreResp::has_restorestats() const {
  return _internal_has_restorestats();
}
inline void RuncRestoreResp::clear_restorestats() {
  if (GetArena() == nullptr && restorestats_ != nullptr) {
    delete restorestats_;
  }
  restorestats_ = nullptr;
}
inline const ::cedana::services::task::RestoreStats& RuncRestoreResp::_internal_restorestats() const {
  const ::cedana::services::task::RestoreStats* p = restorestats_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cedana::services::task::RestoreStats*>(
      &::cedana::services::task::_RestoreStats_default_instance_);
}
inline const ::cedana::services::task::RestoreStats& RuncRestoreResp::restorestats() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncRestoreResp.RestoreStats)
  return _internal_restorestats();
}
inline void RuncRestoreResp::unsafe_arena_set_allocated_restorestats(
    ::cedana::services::task::RestoreStats* restorestats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(restorestats_);
  }
  restorestats_ = restorestats;
  if (restorestats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncRestoreResp.RestoreStats)
}
inline ::cedana::services::task::RestoreStats* RuncRestoreResp::release_restorestats() {
  auto temp = unsafe_arena_release_restorestats();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cedana::services::task::RestoreStats* RuncRestoreResp::unsafe_arena_release_restorestats() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncRestoreResp.RestoreStats)
  
  ::cedana::services::task::RestoreStats* temp = restorestats_;
  restorestats_ = nullptr;
  return temp;
}
inline ::cedana::services::task::RestoreStats* RuncRestoreResp::_internal_mutable_restorestats() {
  
  if (restorestats_ == nullptr) {
    auto* p = CreateMaybeMessage<::cedana::services::task::RestoreStats>(GetArena());
    restorestats_ = p;
  }
  return restorestats_;
}
inline ::cedana::services::task::RestoreStats* RuncRestoreResp::mutable_restorestats() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncRestoreResp.RestoreStats)
  return _internal_mutable_restorestats();
}
inline void RuncRestoreResp::set_allocated_restorestats(::cedana::services::task::RestoreStats* restorestats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete restorestats_;
  }
  if (restorestats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(restorestats);
    if (message_arena != submessage_arena) {
      restorestats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, restorestats, submessage_arena);
    }
    
  } else {
    
  }
  restorestats_ = restorestats;
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncRestoreResp.RestoreStats)
}

// -------------------------------------------------------------------

// RuncOpts

// string Root = 1[json_name = "Root"];
inline void RuncOpts::clear_root() {
  root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuncOpts::root() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncOpts.Root)
  return _internal_root();
}
inline void RuncOpts::set_root(const std::string& value) {
  _internal_set_root(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncOpts.Root)
}
inline std::string* RuncOpts::mutable_root() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncOpts.Root)
  return _internal_mutable_root();
}
inline const std::string& RuncOpts::_internal_root() const {
  return root_.Get();
}
inline void RuncOpts::_internal_set_root(const std::string& value) {
  
  root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuncOpts::set_root(std::string&& value) {
  
  root_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RuncOpts.Root)
}
inline void RuncOpts::set_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RuncOpts.Root)
}
inline void RuncOpts::set_root(const char* value,
    size_t size) {
  
  root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RuncOpts.Root)
}
inline std::string* RuncOpts::_internal_mutable_root() {
  
  return root_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuncOpts::release_root() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncOpts.Root)
  return root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuncOpts::set_allocated_root(std::string* root) {
  if (root != nullptr) {
    
  } else {
    
  }
  root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncOpts.Root)
}
inline std::string* RuncOpts::unsafe_arena_release_root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RuncOpts.Root)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return root_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RuncOpts::unsafe_arena_set_allocated_root(
    std::string* root) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (root != nullptr) {
    
  } else {
    
  }
  root_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      root, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncOpts.Root)
}

// string ContainerID = 2[json_name = "ContainerID"];
inline void RuncOpts::clear_containerid() {
  containerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuncOpts::containerid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncOpts.ContainerID)
  return _internal_containerid();
}
inline void RuncOpts::set_containerid(const std::string& value) {
  _internal_set_containerid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncOpts.ContainerID)
}
inline std::string* RuncOpts::mutable_containerid() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncOpts.ContainerID)
  return _internal_mutable_containerid();
}
inline const std::string& RuncOpts::_internal_containerid() const {
  return containerid_.Get();
}
inline void RuncOpts::_internal_set_containerid(const std::string& value) {
  
  containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuncOpts::set_containerid(std::string&& value) {
  
  containerid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RuncOpts.ContainerID)
}
inline void RuncOpts::set_containerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RuncOpts.ContainerID)
}
inline void RuncOpts::set_containerid(const char* value,
    size_t size) {
  
  containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RuncOpts.ContainerID)
}
inline std::string* RuncOpts::_internal_mutable_containerid() {
  
  return containerid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuncOpts::release_containerid() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncOpts.ContainerID)
  return containerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuncOpts::set_allocated_containerid(std::string* containerid) {
  if (containerid != nullptr) {
    
  } else {
    
  }
  containerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), containerid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncOpts.ContainerID)
}
inline std::string* RuncOpts::unsafe_arena_release_containerid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RuncOpts.ContainerID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return containerid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RuncOpts::unsafe_arena_set_allocated_containerid(
    std::string* containerid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (containerid != nullptr) {
    
  } else {
    
  }
  containerid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      containerid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncOpts.ContainerID)
}

// string Bundle = 3[json_name = "Bundle"];
inline void RuncOpts::clear_bundle() {
  bundle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuncOpts::bundle() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncOpts.Bundle)
  return _internal_bundle();
}
inline void RuncOpts::set_bundle(const std::string& value) {
  _internal_set_bundle(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncOpts.Bundle)
}
inline std::string* RuncOpts::mutable_bundle() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncOpts.Bundle)
  return _internal_mutable_bundle();
}
inline const std::string& RuncOpts::_internal_bundle() const {
  return bundle_.Get();
}
inline void RuncOpts::_internal_set_bundle(const std::string& value) {
  
  bundle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuncOpts::set_bundle(std::string&& value) {
  
  bundle_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RuncOpts.Bundle)
}
inline void RuncOpts::set_bundle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bundle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RuncOpts.Bundle)
}
inline void RuncOpts::set_bundle(const char* value,
    size_t size) {
  
  bundle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RuncOpts.Bundle)
}
inline std::string* RuncOpts::_internal_mutable_bundle() {
  
  return bundle_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuncOpts::release_bundle() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncOpts.Bundle)
  return bundle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuncOpts::set_allocated_bundle(std::string* bundle) {
  if (bundle != nullptr) {
    
  } else {
    
  }
  bundle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bundle,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncOpts.Bundle)
}
inline std::string* RuncOpts::unsafe_arena_release_bundle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RuncOpts.Bundle)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return bundle_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RuncOpts::unsafe_arena_set_allocated_bundle(
    std::string* bundle) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bundle != nullptr) {
    
  } else {
    
  }
  bundle_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bundle, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncOpts.Bundle)
}

// bool SystemdCgroup = 4[json_name = "SystemdCgroup"];
inline void RuncOpts::clear_systemdcgroup() {
  systemdcgroup_ = false;
}
inline bool RuncOpts::_internal_systemdcgroup() const {
  return systemdcgroup_;
}
inline bool RuncOpts::systemdcgroup() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncOpts.SystemdCgroup)
  return _internal_systemdcgroup();
}
inline void RuncOpts::_internal_set_systemdcgroup(bool value) {
  
  systemdcgroup_ = value;
}
inline void RuncOpts::set_systemdcgroup(bool value) {
  _internal_set_systemdcgroup(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncOpts.SystemdCgroup)
}

// bool NoPivot = 5[json_name = "NoPivot"];
inline void RuncOpts::clear_nopivot() {
  nopivot_ = false;
}
inline bool RuncOpts::_internal_nopivot() const {
  return nopivot_;
}
inline bool RuncOpts::nopivot() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncOpts.NoPivot)
  return _internal_nopivot();
}
inline void RuncOpts::_internal_set_nopivot(bool value) {
  
  nopivot_ = value;
}
inline void RuncOpts::set_nopivot(bool value) {
  _internal_set_nopivot(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncOpts.NoPivot)
}

// bool NoMountFallback = 6[json_name = "NoMountFallback"];
inline void RuncOpts::clear_nomountfallback() {
  nomountfallback_ = false;
}
inline bool RuncOpts::_internal_nomountfallback() const {
  return nomountfallback_;
}
inline bool RuncOpts::nomountfallback() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncOpts.NoMountFallback)
  return _internal_nomountfallback();
}
inline void RuncOpts::_internal_set_nomountfallback(bool value) {
  
  nomountfallback_ = value;
}
inline void RuncOpts::set_nomountfallback(bool value) {
  _internal_set_nomountfallback(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncOpts.NoMountFallback)
}

// bool NoNewKeyring = 7[json_name = "NoNewKeyring"];
inline void RuncOpts::clear_nonewkeyring() {
  nonewkeyring_ = false;
}
inline bool RuncOpts::_internal_nonewkeyring() const {
  return nonewkeyring_;
}
inline bool RuncOpts::nonewkeyring() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncOpts.NoNewKeyring)
  return _internal_nonewkeyring();
}
inline void RuncOpts::_internal_set_nonewkeyring(bool value) {
  
  nonewkeyring_ = value;
}
inline void RuncOpts::set_nonewkeyring(bool value) {
  _internal_set_nonewkeyring(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncOpts.NoNewKeyring)
}

// string Rootless = 8[json_name = "Rootless"];
inline void RuncOpts::clear_rootless() {
  rootless_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuncOpts::rootless() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncOpts.Rootless)
  return _internal_rootless();
}
inline void RuncOpts::set_rootless(const std::string& value) {
  _internal_set_rootless(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncOpts.Rootless)
}
inline std::string* RuncOpts::mutable_rootless() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncOpts.Rootless)
  return _internal_mutable_rootless();
}
inline const std::string& RuncOpts::_internal_rootless() const {
  return rootless_.Get();
}
inline void RuncOpts::_internal_set_rootless(const std::string& value) {
  
  rootless_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuncOpts::set_rootless(std::string&& value) {
  
  rootless_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RuncOpts.Rootless)
}
inline void RuncOpts::set_rootless(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rootless_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RuncOpts.Rootless)
}
inline void RuncOpts::set_rootless(const char* value,
    size_t size) {
  
  rootless_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RuncOpts.Rootless)
}
inline std::string* RuncOpts::_internal_mutable_rootless() {
  
  return rootless_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuncOpts::release_rootless() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncOpts.Rootless)
  return rootless_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuncOpts::set_allocated_rootless(std::string* rootless) {
  if (rootless != nullptr) {
    
  } else {
    
  }
  rootless_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rootless,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncOpts.Rootless)
}
inline std::string* RuncOpts::unsafe_arena_release_rootless() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RuncOpts.Rootless)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return rootless_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RuncOpts::unsafe_arena_set_allocated_rootless(
    std::string* rootless) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (rootless != nullptr) {
    
  } else {
    
  }
  rootless_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rootless, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncOpts.Rootless)
}

// bool NoSubreaper = 9[json_name = "NoSubreaper"];
inline void RuncOpts::clear_nosubreaper() {
  nosubreaper_ = false;
}
inline bool RuncOpts::_internal_nosubreaper() const {
  return nosubreaper_;
}
inline bool RuncOpts::nosubreaper() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncOpts.NoSubreaper)
  return _internal_nosubreaper();
}
inline void RuncOpts::_internal_set_nosubreaper(bool value) {
  
  nosubreaper_ = value;
}
inline void RuncOpts::set_nosubreaper(bool value) {
  _internal_set_nosubreaper(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncOpts.NoSubreaper)
}

// bool Keep = 10[json_name = "Keep"];
inline void RuncOpts::clear_keep() {
  keep_ = false;
}
inline bool RuncOpts::_internal_keep() const {
  return keep_;
}
inline bool RuncOpts::keep() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncOpts.Keep)
  return _internal_keep();
}
inline void RuncOpts::_internal_set_keep(bool value) {
  
  keep_ = value;
}
inline void RuncOpts::set_keep(bool value) {
  _internal_set_keep(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncOpts.Keep)
}

// string ConsoleSocket = 11[json_name = "ConsoleSocket"];
inline void RuncOpts::clear_consolesocket() {
  consolesocket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuncOpts::consolesocket() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncOpts.ConsoleSocket)
  return _internal_consolesocket();
}
inline void RuncOpts::set_consolesocket(const std::string& value) {
  _internal_set_consolesocket(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncOpts.ConsoleSocket)
}
inline std::string* RuncOpts::mutable_consolesocket() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncOpts.ConsoleSocket)
  return _internal_mutable_consolesocket();
}
inline const std::string& RuncOpts::_internal_consolesocket() const {
  return consolesocket_.Get();
}
inline void RuncOpts::_internal_set_consolesocket(const std::string& value) {
  
  consolesocket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuncOpts::set_consolesocket(std::string&& value) {
  
  consolesocket_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RuncOpts.ConsoleSocket)
}
inline void RuncOpts::set_consolesocket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  consolesocket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RuncOpts.ConsoleSocket)
}
inline void RuncOpts::set_consolesocket(const char* value,
    size_t size) {
  
  consolesocket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RuncOpts.ConsoleSocket)
}
inline std::string* RuncOpts::_internal_mutable_consolesocket() {
  
  return consolesocket_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuncOpts::release_consolesocket() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncOpts.ConsoleSocket)
  return consolesocket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuncOpts::set_allocated_consolesocket(std::string* consolesocket) {
  if (consolesocket != nullptr) {
    
  } else {
    
  }
  consolesocket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), consolesocket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncOpts.ConsoleSocket)
}
inline std::string* RuncOpts::unsafe_arena_release_consolesocket() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RuncOpts.ConsoleSocket)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return consolesocket_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RuncOpts::unsafe_arena_set_allocated_consolesocket(
    std::string* consolesocket) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (consolesocket != nullptr) {
    
  } else {
    
  }
  consolesocket_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      consolesocket, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncOpts.ConsoleSocket)
}

// bool Detach = 12[json_name = "Detach"];
inline void RuncOpts::clear_detach() {
  detach_ = false;
}
inline bool RuncOpts::_internal_detach() const {
  return detach_;
}
inline bool RuncOpts::detach() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncOpts.Detach)
  return _internal_detach();
}
inline void RuncOpts::_internal_set_detach(bool value) {
  
  detach_ = value;
}
inline void RuncOpts::set_detach(bool value) {
  _internal_set_detach(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncOpts.Detach)
}

// string PidFile = 13[json_name = "PidFile"];
inline void RuncOpts::clear_pidfile() {
  pidfile_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuncOpts::pidfile() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncOpts.PidFile)
  return _internal_pidfile();
}
inline void RuncOpts::set_pidfile(const std::string& value) {
  _internal_set_pidfile(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncOpts.PidFile)
}
inline std::string* RuncOpts::mutable_pidfile() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncOpts.PidFile)
  return _internal_mutable_pidfile();
}
inline const std::string& RuncOpts::_internal_pidfile() const {
  return pidfile_.Get();
}
inline void RuncOpts::_internal_set_pidfile(const std::string& value) {
  
  pidfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuncOpts::set_pidfile(std::string&& value) {
  
  pidfile_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RuncOpts.PidFile)
}
inline void RuncOpts::set_pidfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pidfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RuncOpts.PidFile)
}
inline void RuncOpts::set_pidfile(const char* value,
    size_t size) {
  
  pidfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RuncOpts.PidFile)
}
inline std::string* RuncOpts::_internal_mutable_pidfile() {
  
  return pidfile_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuncOpts::release_pidfile() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncOpts.PidFile)
  return pidfile_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuncOpts::set_allocated_pidfile(std::string* pidfile) {
  if (pidfile != nullptr) {
    
  } else {
    
  }
  pidfile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pidfile,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncOpts.PidFile)
}
inline std::string* RuncOpts::unsafe_arena_release_pidfile() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RuncOpts.PidFile)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pidfile_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RuncOpts::unsafe_arena_set_allocated_pidfile(
    std::string* pidfile) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pidfile != nullptr) {
    
  } else {
    
  }
  pidfile_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pidfile, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncOpts.PidFile)
}

// int32 PreserveFds = 14[json_name = "PreserveFds"];
inline void RuncOpts::clear_preservefds() {
  preservefds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RuncOpts::_internal_preservefds() const {
  return preservefds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RuncOpts::preservefds() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncOpts.PreserveFds)
  return _internal_preservefds();
}
inline void RuncOpts::_internal_set_preservefds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  preservefds_ = value;
}
inline void RuncOpts::set_preservefds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_preservefds(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncOpts.PreserveFds)
}

// int32 NetPid = 15[json_name = "NetPid"];
inline void RuncOpts::clear_netpid() {
  netpid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RuncOpts::_internal_netpid() const {
  return netpid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RuncOpts::netpid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncOpts.NetPid)
  return _internal_netpid();
}
inline void RuncOpts::_internal_set_netpid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  netpid_ = value;
}
inline void RuncOpts::set_netpid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_netpid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncOpts.NetPid)
}

// -------------------------------------------------------------------

// RuncQueryArgs

// string Root = 1[json_name = "Root"];
inline void RuncQueryArgs::clear_root() {
  root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuncQueryArgs::root() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncQueryArgs.Root)
  return _internal_root();
}
inline void RuncQueryArgs::set_root(const std::string& value) {
  _internal_set_root(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncQueryArgs.Root)
}
inline std::string* RuncQueryArgs::mutable_root() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncQueryArgs.Root)
  return _internal_mutable_root();
}
inline const std::string& RuncQueryArgs::_internal_root() const {
  return root_.Get();
}
inline void RuncQueryArgs::_internal_set_root(const std::string& value) {
  
  root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuncQueryArgs::set_root(std::string&& value) {
  
  root_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RuncQueryArgs.Root)
}
inline void RuncQueryArgs::set_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RuncQueryArgs.Root)
}
inline void RuncQueryArgs::set_root(const char* value,
    size_t size) {
  
  root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RuncQueryArgs.Root)
}
inline std::string* RuncQueryArgs::_internal_mutable_root() {
  
  return root_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuncQueryArgs::release_root() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncQueryArgs.Root)
  return root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuncQueryArgs::set_allocated_root(std::string* root) {
  if (root != nullptr) {
    
  } else {
    
  }
  root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncQueryArgs.Root)
}
inline std::string* RuncQueryArgs::unsafe_arena_release_root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RuncQueryArgs.Root)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return root_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RuncQueryArgs::unsafe_arena_set_allocated_root(
    std::string* root) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (root != nullptr) {
    
  } else {
    
  }
  root_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      root, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncQueryArgs.Root)
}

// string Namespace = 2[json_name = "Namespace"];
inline void RuncQueryArgs::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuncQueryArgs::namespace_() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncQueryArgs.Namespace)
  return _internal_namespace_();
}
inline void RuncQueryArgs::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncQueryArgs.Namespace)
}
inline std::string* RuncQueryArgs::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncQueryArgs.Namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& RuncQueryArgs::_internal_namespace_() const {
  return namespace__.Get();
}
inline void RuncQueryArgs::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuncQueryArgs::set_namespace_(std::string&& value) {
  
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RuncQueryArgs.Namespace)
}
inline void RuncQueryArgs::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RuncQueryArgs.Namespace)
}
inline void RuncQueryArgs::set_namespace_(const char* value,
    size_t size) {
  
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RuncQueryArgs.Namespace)
}
inline std::string* RuncQueryArgs::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuncQueryArgs::release_namespace_() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncQueryArgs.Namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuncQueryArgs::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncQueryArgs.Namespace)
}
inline std::string* RuncQueryArgs::unsafe_arena_release_namespace_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RuncQueryArgs.Namespace)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return namespace__.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RuncQueryArgs::unsafe_arena_set_allocated_namespace_(
    std::string* namespace_) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      namespace_, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncQueryArgs.Namespace)
}

// repeated string ContainerNames = 3[json_name = "ContainerNames"];
inline int RuncQueryArgs::_internal_containernames_size() const {
  return containernames_.size();
}
inline int RuncQueryArgs::containernames_size() const {
  return _internal_containernames_size();
}
inline void RuncQueryArgs::clear_containernames() {
  containernames_.Clear();
}
inline std::string* RuncQueryArgs::add_containernames() {
  // @@protoc_insertion_point(field_add_mutable:cedana.services.task.RuncQueryArgs.ContainerNames)
  return _internal_add_containernames();
}
inline const std::string& RuncQueryArgs::_internal_containernames(int index) const {
  return containernames_.Get(index);
}
inline const std::string& RuncQueryArgs::containernames(int index) const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncQueryArgs.ContainerNames)
  return _internal_containernames(index);
}
inline std::string* RuncQueryArgs::mutable_containernames(int index) {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncQueryArgs.ContainerNames)
  return containernames_.Mutable(index);
}
inline void RuncQueryArgs::set_containernames(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncQueryArgs.ContainerNames)
  containernames_.Mutable(index)->assign(value);
}
inline void RuncQueryArgs::set_containernames(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncQueryArgs.ContainerNames)
  containernames_.Mutable(index)->assign(std::move(value));
}
inline void RuncQueryArgs::set_containernames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  containernames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RuncQueryArgs.ContainerNames)
}
inline void RuncQueryArgs::set_containernames(int index, const char* value, size_t size) {
  containernames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RuncQueryArgs.ContainerNames)
}
inline std::string* RuncQueryArgs::_internal_add_containernames() {
  return containernames_.Add();
}
inline void RuncQueryArgs::add_containernames(const std::string& value) {
  containernames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cedana.services.task.RuncQueryArgs.ContainerNames)
}
inline void RuncQueryArgs::add_containernames(std::string&& value) {
  containernames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cedana.services.task.RuncQueryArgs.ContainerNames)
}
inline void RuncQueryArgs::add_containernames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  containernames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cedana.services.task.RuncQueryArgs.ContainerNames)
}
inline void RuncQueryArgs::add_containernames(const char* value, size_t size) {
  containernames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cedana.services.task.RuncQueryArgs.ContainerNames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RuncQueryArgs::containernames() const {
  // @@protoc_insertion_point(field_list:cedana.services.task.RuncQueryArgs.ContainerNames)
  return containernames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RuncQueryArgs::mutable_containernames() {
  // @@protoc_insertion_point(field_mutable_list:cedana.services.task.RuncQueryArgs.ContainerNames)
  return &containernames_;
}

// repeated string SandboxNames = 4[json_name = "SandboxNames"];
inline int RuncQueryArgs::_internal_sandboxnames_size() const {
  return sandboxnames_.size();
}
inline int RuncQueryArgs::sandboxnames_size() const {
  return _internal_sandboxnames_size();
}
inline void RuncQueryArgs::clear_sandboxnames() {
  sandboxnames_.Clear();
}
inline std::string* RuncQueryArgs::add_sandboxnames() {
  // @@protoc_insertion_point(field_add_mutable:cedana.services.task.RuncQueryArgs.SandboxNames)
  return _internal_add_sandboxnames();
}
inline const std::string& RuncQueryArgs::_internal_sandboxnames(int index) const {
  return sandboxnames_.Get(index);
}
inline const std::string& RuncQueryArgs::sandboxnames(int index) const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncQueryArgs.SandboxNames)
  return _internal_sandboxnames(index);
}
inline std::string* RuncQueryArgs::mutable_sandboxnames(int index) {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncQueryArgs.SandboxNames)
  return sandboxnames_.Mutable(index);
}
inline void RuncQueryArgs::set_sandboxnames(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncQueryArgs.SandboxNames)
  sandboxnames_.Mutable(index)->assign(value);
}
inline void RuncQueryArgs::set_sandboxnames(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncQueryArgs.SandboxNames)
  sandboxnames_.Mutable(index)->assign(std::move(value));
}
inline void RuncQueryArgs::set_sandboxnames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sandboxnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RuncQueryArgs.SandboxNames)
}
inline void RuncQueryArgs::set_sandboxnames(int index, const char* value, size_t size) {
  sandboxnames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RuncQueryArgs.SandboxNames)
}
inline std::string* RuncQueryArgs::_internal_add_sandboxnames() {
  return sandboxnames_.Add();
}
inline void RuncQueryArgs::add_sandboxnames(const std::string& value) {
  sandboxnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cedana.services.task.RuncQueryArgs.SandboxNames)
}
inline void RuncQueryArgs::add_sandboxnames(std::string&& value) {
  sandboxnames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cedana.services.task.RuncQueryArgs.SandboxNames)
}
inline void RuncQueryArgs::add_sandboxnames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sandboxnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cedana.services.task.RuncQueryArgs.SandboxNames)
}
inline void RuncQueryArgs::add_sandboxnames(const char* value, size_t size) {
  sandboxnames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cedana.services.task.RuncQueryArgs.SandboxNames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RuncQueryArgs::sandboxnames() const {
  // @@protoc_insertion_point(field_list:cedana.services.task.RuncQueryArgs.SandboxNames)
  return sandboxnames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RuncQueryArgs::mutable_sandboxnames() {
  // @@protoc_insertion_point(field_mutable_list:cedana.services.task.RuncQueryArgs.SandboxNames)
  return &sandboxnames_;
}

// -------------------------------------------------------------------

// RuncQueryResp

// repeated .cedana.services.task.RuncContainer Containers = 1[json_name = "Containers"];
inline int RuncQueryResp::_internal_containers_size() const {
  return containers_.size();
}
inline int RuncQueryResp::containers_size() const {
  return _internal_containers_size();
}
inline void RuncQueryResp::clear_containers() {
  containers_.Clear();
}
inline ::cedana::services::task::RuncContainer* RuncQueryResp::mutable_containers(int index) {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncQueryResp.Containers)
  return containers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedana::services::task::RuncContainer >*
RuncQueryResp::mutable_containers() {
  // @@protoc_insertion_point(field_mutable_list:cedana.services.task.RuncQueryResp.Containers)
  return &containers_;
}
inline const ::cedana::services::task::RuncContainer& RuncQueryResp::_internal_containers(int index) const {
  return containers_.Get(index);
}
inline const ::cedana::services::task::RuncContainer& RuncQueryResp::containers(int index) const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncQueryResp.Containers)
  return _internal_containers(index);
}
inline ::cedana::services::task::RuncContainer* RuncQueryResp::_internal_add_containers() {
  return containers_.Add();
}
inline ::cedana::services::task::RuncContainer* RuncQueryResp::add_containers() {
  // @@protoc_insertion_point(field_add:cedana.services.task.RuncQueryResp.Containers)
  return _internal_add_containers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedana::services::task::RuncContainer >&
RuncQueryResp::containers() const {
  // @@protoc_insertion_point(field_list:cedana.services.task.RuncQueryResp.Containers)
  return containers_;
}

// -------------------------------------------------------------------

// RuncContainer

// string ID = 1[json_name = "ID"];
inline void RuncContainer::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuncContainer::id() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncContainer.ID)
  return _internal_id();
}
inline void RuncContainer::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncContainer.ID)
}
inline std::string* RuncContainer::mutable_id() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncContainer.ID)
  return _internal_mutable_id();
}
inline const std::string& RuncContainer::_internal_id() const {
  return id_.Get();
}
inline void RuncContainer::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuncContainer::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RuncContainer.ID)
}
inline void RuncContainer::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RuncContainer.ID)
}
inline void RuncContainer::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RuncContainer.ID)
}
inline std::string* RuncContainer::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuncContainer::release_id() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncContainer.ID)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuncContainer::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncContainer.ID)
}
inline std::string* RuncContainer::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RuncContainer.ID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RuncContainer::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncContainer.ID)
}

// string BundlePath = 2[json_name = "BundlePath"];
inline void RuncContainer::clear_bundlepath() {
  bundlepath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuncContainer::bundlepath() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncContainer.BundlePath)
  return _internal_bundlepath();
}
inline void RuncContainer::set_bundlepath(const std::string& value) {
  _internal_set_bundlepath(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncContainer.BundlePath)
}
inline std::string* RuncContainer::mutable_bundlepath() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncContainer.BundlePath)
  return _internal_mutable_bundlepath();
}
inline const std::string& RuncContainer::_internal_bundlepath() const {
  return bundlepath_.Get();
}
inline void RuncContainer::_internal_set_bundlepath(const std::string& value) {
  
  bundlepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuncContainer::set_bundlepath(std::string&& value) {
  
  bundlepath_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RuncContainer.BundlePath)
}
inline void RuncContainer::set_bundlepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bundlepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RuncContainer.BundlePath)
}
inline void RuncContainer::set_bundlepath(const char* value,
    size_t size) {
  
  bundlepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RuncContainer.BundlePath)
}
inline std::string* RuncContainer::_internal_mutable_bundlepath() {
  
  return bundlepath_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuncContainer::release_bundlepath() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncContainer.BundlePath)
  return bundlepath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuncContainer::set_allocated_bundlepath(std::string* bundlepath) {
  if (bundlepath != nullptr) {
    
  } else {
    
  }
  bundlepath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bundlepath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncContainer.BundlePath)
}
inline std::string* RuncContainer::unsafe_arena_release_bundlepath() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RuncContainer.BundlePath)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return bundlepath_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RuncContainer::unsafe_arena_set_allocated_bundlepath(
    std::string* bundlepath) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bundlepath != nullptr) {
    
  } else {
    
  }
  bundlepath_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bundlepath, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncContainer.BundlePath)
}

// string ContainerName = 3[json_name = "ContainerName"];
inline void RuncContainer::clear_containername() {
  containername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuncContainer::containername() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncContainer.ContainerName)
  return _internal_containername();
}
inline void RuncContainer::set_containername(const std::string& value) {
  _internal_set_containername(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncContainer.ContainerName)
}
inline std::string* RuncContainer::mutable_containername() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncContainer.ContainerName)
  return _internal_mutable_containername();
}
inline const std::string& RuncContainer::_internal_containername() const {
  return containername_.Get();
}
inline void RuncContainer::_internal_set_containername(const std::string& value) {
  
  containername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuncContainer::set_containername(std::string&& value) {
  
  containername_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RuncContainer.ContainerName)
}
inline void RuncContainer::set_containername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  containername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RuncContainer.ContainerName)
}
inline void RuncContainer::set_containername(const char* value,
    size_t size) {
  
  containername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RuncContainer.ContainerName)
}
inline std::string* RuncContainer::_internal_mutable_containername() {
  
  return containername_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuncContainer::release_containername() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncContainer.ContainerName)
  return containername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuncContainer::set_allocated_containername(std::string* containername) {
  if (containername != nullptr) {
    
  } else {
    
  }
  containername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), containername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncContainer.ContainerName)
}
inline std::string* RuncContainer::unsafe_arena_release_containername() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RuncContainer.ContainerName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return containername_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RuncContainer::unsafe_arena_set_allocated_containername(
    std::string* containername) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (containername != nullptr) {
    
  } else {
    
  }
  containername_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      containername, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncContainer.ContainerName)
}

// string ImageName = 4[json_name = "ImageName"];
inline void RuncContainer::clear_imagename() {
  imagename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuncContainer::imagename() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncContainer.ImageName)
  return _internal_imagename();
}
inline void RuncContainer::set_imagename(const std::string& value) {
  _internal_set_imagename(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncContainer.ImageName)
}
inline std::string* RuncContainer::mutable_imagename() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncContainer.ImageName)
  return _internal_mutable_imagename();
}
inline const std::string& RuncContainer::_internal_imagename() const {
  return imagename_.Get();
}
inline void RuncContainer::_internal_set_imagename(const std::string& value) {
  
  imagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuncContainer::set_imagename(std::string&& value) {
  
  imagename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RuncContainer.ImageName)
}
inline void RuncContainer::set_imagename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RuncContainer.ImageName)
}
inline void RuncContainer::set_imagename(const char* value,
    size_t size) {
  
  imagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RuncContainer.ImageName)
}
inline std::string* RuncContainer::_internal_mutable_imagename() {
  
  return imagename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuncContainer::release_imagename() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncContainer.ImageName)
  return imagename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuncContainer::set_allocated_imagename(std::string* imagename) {
  if (imagename != nullptr) {
    
  } else {
    
  }
  imagename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imagename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncContainer.ImageName)
}
inline std::string* RuncContainer::unsafe_arena_release_imagename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RuncContainer.ImageName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return imagename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RuncContainer::unsafe_arena_set_allocated_imagename(
    std::string* imagename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (imagename != nullptr) {
    
  } else {
    
  }
  imagename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      imagename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncContainer.ImageName)
}

// string SandboxId = 5[json_name = "SandboxId"];
inline void RuncContainer::clear_sandboxid() {
  sandboxid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuncContainer::sandboxid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncContainer.SandboxId)
  return _internal_sandboxid();
}
inline void RuncContainer::set_sandboxid(const std::string& value) {
  _internal_set_sandboxid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncContainer.SandboxId)
}
inline std::string* RuncContainer::mutable_sandboxid() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncContainer.SandboxId)
  return _internal_mutable_sandboxid();
}
inline const std::string& RuncContainer::_internal_sandboxid() const {
  return sandboxid_.Get();
}
inline void RuncContainer::_internal_set_sandboxid(const std::string& value) {
  
  sandboxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuncContainer::set_sandboxid(std::string&& value) {
  
  sandboxid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RuncContainer.SandboxId)
}
inline void RuncContainer::set_sandboxid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sandboxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RuncContainer.SandboxId)
}
inline void RuncContainer::set_sandboxid(const char* value,
    size_t size) {
  
  sandboxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RuncContainer.SandboxId)
}
inline std::string* RuncContainer::_internal_mutable_sandboxid() {
  
  return sandboxid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuncContainer::release_sandboxid() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncContainer.SandboxId)
  return sandboxid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuncContainer::set_allocated_sandboxid(std::string* sandboxid) {
  if (sandboxid != nullptr) {
    
  } else {
    
  }
  sandboxid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sandboxid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncContainer.SandboxId)
}
inline std::string* RuncContainer::unsafe_arena_release_sandboxid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RuncContainer.SandboxId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sandboxid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RuncContainer::unsafe_arena_set_allocated_sandboxid(
    std::string* sandboxid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sandboxid != nullptr) {
    
  } else {
    
  }
  sandboxid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sandboxid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncContainer.SandboxId)
}

// string SandboxName = 6[json_name = "SandboxName"];
inline void RuncContainer::clear_sandboxname() {
  sandboxname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuncContainer::sandboxname() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncContainer.SandboxName)
  return _internal_sandboxname();
}
inline void RuncContainer::set_sandboxname(const std::string& value) {
  _internal_set_sandboxname(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncContainer.SandboxName)
}
inline std::string* RuncContainer::mutable_sandboxname() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncContainer.SandboxName)
  return _internal_mutable_sandboxname();
}
inline const std::string& RuncContainer::_internal_sandboxname() const {
  return sandboxname_.Get();
}
inline void RuncContainer::_internal_set_sandboxname(const std::string& value) {
  
  sandboxname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuncContainer::set_sandboxname(std::string&& value) {
  
  sandboxname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RuncContainer.SandboxName)
}
inline void RuncContainer::set_sandboxname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sandboxname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RuncContainer.SandboxName)
}
inline void RuncContainer::set_sandboxname(const char* value,
    size_t size) {
  
  sandboxname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RuncContainer.SandboxName)
}
inline std::string* RuncContainer::_internal_mutable_sandboxname() {
  
  return sandboxname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuncContainer::release_sandboxname() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncContainer.SandboxName)
  return sandboxname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuncContainer::set_allocated_sandboxname(std::string* sandboxname) {
  if (sandboxname != nullptr) {
    
  } else {
    
  }
  sandboxname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sandboxname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncContainer.SandboxName)
}
inline std::string* RuncContainer::unsafe_arena_release_sandboxname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RuncContainer.SandboxName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sandboxname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RuncContainer::unsafe_arena_set_allocated_sandboxname(
    std::string* sandboxname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sandboxname != nullptr) {
    
  } else {
    
  }
  sandboxname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sandboxname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncContainer.SandboxName)
}

// string SandboxUid = 7[json_name = "SandboxUid"];
inline void RuncContainer::clear_sandboxuid() {
  sandboxuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuncContainer::sandboxuid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncContainer.SandboxUid)
  return _internal_sandboxuid();
}
inline void RuncContainer::set_sandboxuid(const std::string& value) {
  _internal_set_sandboxuid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncContainer.SandboxUid)
}
inline std::string* RuncContainer::mutable_sandboxuid() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncContainer.SandboxUid)
  return _internal_mutable_sandboxuid();
}
inline const std::string& RuncContainer::_internal_sandboxuid() const {
  return sandboxuid_.Get();
}
inline void RuncContainer::_internal_set_sandboxuid(const std::string& value) {
  
  sandboxuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuncContainer::set_sandboxuid(std::string&& value) {
  
  sandboxuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RuncContainer.SandboxUid)
}
inline void RuncContainer::set_sandboxuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sandboxuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RuncContainer.SandboxUid)
}
inline void RuncContainer::set_sandboxuid(const char* value,
    size_t size) {
  
  sandboxuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RuncContainer.SandboxUid)
}
inline std::string* RuncContainer::_internal_mutable_sandboxuid() {
  
  return sandboxuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuncContainer::release_sandboxuid() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncContainer.SandboxUid)
  return sandboxuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuncContainer::set_allocated_sandboxuid(std::string* sandboxuid) {
  if (sandboxuid != nullptr) {
    
  } else {
    
  }
  sandboxuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sandboxuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncContainer.SandboxUid)
}
inline std::string* RuncContainer::unsafe_arena_release_sandboxuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RuncContainer.SandboxUid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sandboxuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RuncContainer::unsafe_arena_set_allocated_sandboxuid(
    std::string* sandboxuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sandboxuid != nullptr) {
    
  } else {
    
  }
  sandboxuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sandboxuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncContainer.SandboxUid)
}

// -------------------------------------------------------------------

// RuncGetPausePidArgs

// string BundlePath = 1[json_name = "BundlePath"];
inline void RuncGetPausePidArgs::clear_bundlepath() {
  bundlepath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuncGetPausePidArgs::bundlepath() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncGetPausePidArgs.BundlePath)
  return _internal_bundlepath();
}
inline void RuncGetPausePidArgs::set_bundlepath(const std::string& value) {
  _internal_set_bundlepath(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncGetPausePidArgs.BundlePath)
}
inline std::string* RuncGetPausePidArgs::mutable_bundlepath() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RuncGetPausePidArgs.BundlePath)
  return _internal_mutable_bundlepath();
}
inline const std::string& RuncGetPausePidArgs::_internal_bundlepath() const {
  return bundlepath_.Get();
}
inline void RuncGetPausePidArgs::_internal_set_bundlepath(const std::string& value) {
  
  bundlepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuncGetPausePidArgs::set_bundlepath(std::string&& value) {
  
  bundlepath_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RuncGetPausePidArgs.BundlePath)
}
inline void RuncGetPausePidArgs::set_bundlepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bundlepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RuncGetPausePidArgs.BundlePath)
}
inline void RuncGetPausePidArgs::set_bundlepath(const char* value,
    size_t size) {
  
  bundlepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RuncGetPausePidArgs.BundlePath)
}
inline std::string* RuncGetPausePidArgs::_internal_mutable_bundlepath() {
  
  return bundlepath_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuncGetPausePidArgs::release_bundlepath() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RuncGetPausePidArgs.BundlePath)
  return bundlepath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuncGetPausePidArgs::set_allocated_bundlepath(std::string* bundlepath) {
  if (bundlepath != nullptr) {
    
  } else {
    
  }
  bundlepath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bundlepath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RuncGetPausePidArgs.BundlePath)
}
inline std::string* RuncGetPausePidArgs::unsafe_arena_release_bundlepath() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RuncGetPausePidArgs.BundlePath)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return bundlepath_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RuncGetPausePidArgs::unsafe_arena_set_allocated_bundlepath(
    std::string* bundlepath) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bundlepath != nullptr) {
    
  } else {
    
  }
  bundlepath_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bundlepath, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RuncGetPausePidArgs.BundlePath)
}

// -------------------------------------------------------------------

// RuncGetPausePidResp

// int64 PausePid = 1[json_name = "PausePid"];
inline void RuncGetPausePidResp::clear_pausepid() {
  pausepid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RuncGetPausePidResp::_internal_pausepid() const {
  return pausepid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RuncGetPausePidResp::pausepid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RuncGetPausePidResp.PausePid)
  return _internal_pausepid();
}
inline void RuncGetPausePidResp::_internal_set_pausepid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  pausepid_ = value;
}
inline void RuncGetPausePidResp::set_pausepid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_pausepid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RuncGetPausePidResp.PausePid)
}

// -------------------------------------------------------------------

// LogStreamingArgs

// string Timestamp = 1[json_name = "Timestamp"];
inline void LogStreamingArgs::clear_timestamp() {
  timestamp_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogStreamingArgs::timestamp() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.LogStreamingArgs.Timestamp)
  return _internal_timestamp();
}
inline void LogStreamingArgs::set_timestamp(const std::string& value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.LogStreamingArgs.Timestamp)
}
inline std::string* LogStreamingArgs::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.LogStreamingArgs.Timestamp)
  return _internal_mutable_timestamp();
}
inline const std::string& LogStreamingArgs::_internal_timestamp() const {
  return timestamp_.Get();
}
inline void LogStreamingArgs::_internal_set_timestamp(const std::string& value) {
  
  timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogStreamingArgs::set_timestamp(std::string&& value) {
  
  timestamp_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.LogStreamingArgs.Timestamp)
}
inline void LogStreamingArgs::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.LogStreamingArgs.Timestamp)
}
inline void LogStreamingArgs::set_timestamp(const char* value,
    size_t size) {
  
  timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.LogStreamingArgs.Timestamp)
}
inline std::string* LogStreamingArgs::_internal_mutable_timestamp() {
  
  return timestamp_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogStreamingArgs::release_timestamp() {
  // @@protoc_insertion_point(field_release:cedana.services.task.LogStreamingArgs.Timestamp)
  return timestamp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogStreamingArgs::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.LogStreamingArgs.Timestamp)
}
inline std::string* LogStreamingArgs::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.LogStreamingArgs.Timestamp)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return timestamp_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogStreamingArgs::unsafe_arena_set_allocated_timestamp(
    std::string* timestamp) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      timestamp, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.LogStreamingArgs.Timestamp)
}

// string Source = 2[json_name = "Source"];
inline void LogStreamingArgs::clear_source() {
  source_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogStreamingArgs::source() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.LogStreamingArgs.Source)
  return _internal_source();
}
inline void LogStreamingArgs::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.LogStreamingArgs.Source)
}
inline std::string* LogStreamingArgs::mutable_source() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.LogStreamingArgs.Source)
  return _internal_mutable_source();
}
inline const std::string& LogStreamingArgs::_internal_source() const {
  return source_.Get();
}
inline void LogStreamingArgs::_internal_set_source(const std::string& value) {
  
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogStreamingArgs::set_source(std::string&& value) {
  
  source_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.LogStreamingArgs.Source)
}
inline void LogStreamingArgs::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.LogStreamingArgs.Source)
}
inline void LogStreamingArgs::set_source(const char* value,
    size_t size) {
  
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.LogStreamingArgs.Source)
}
inline std::string* LogStreamingArgs::_internal_mutable_source() {
  
  return source_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogStreamingArgs::release_source() {
  // @@protoc_insertion_point(field_release:cedana.services.task.LogStreamingArgs.Source)
  return source_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogStreamingArgs::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.LogStreamingArgs.Source)
}
inline std::string* LogStreamingArgs::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.LogStreamingArgs.Source)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return source_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogStreamingArgs::unsafe_arena_set_allocated_source(
    std::string* source) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (source != nullptr) {
    
  } else {
    
  }
  source_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.LogStreamingArgs.Source)
}

// string Level = 3[json_name = "Level"];
inline void LogStreamingArgs::clear_level() {
  level_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogStreamingArgs::level() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.LogStreamingArgs.Level)
  return _internal_level();
}
inline void LogStreamingArgs::set_level(const std::string& value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.LogStreamingArgs.Level)
}
inline std::string* LogStreamingArgs::mutable_level() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.LogStreamingArgs.Level)
  return _internal_mutable_level();
}
inline const std::string& LogStreamingArgs::_internal_level() const {
  return level_.Get();
}
inline void LogStreamingArgs::_internal_set_level(const std::string& value) {
  
  level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogStreamingArgs::set_level(std::string&& value) {
  
  level_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.LogStreamingArgs.Level)
}
inline void LogStreamingArgs::set_level(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.LogStreamingArgs.Level)
}
inline void LogStreamingArgs::set_level(const char* value,
    size_t size) {
  
  level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.LogStreamingArgs.Level)
}
inline std::string* LogStreamingArgs::_internal_mutable_level() {
  
  return level_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogStreamingArgs::release_level() {
  // @@protoc_insertion_point(field_release:cedana.services.task.LogStreamingArgs.Level)
  return level_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogStreamingArgs::set_allocated_level(std::string* level) {
  if (level != nullptr) {
    
  } else {
    
  }
  level_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), level,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.LogStreamingArgs.Level)
}
inline std::string* LogStreamingArgs::unsafe_arena_release_level() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.LogStreamingArgs.Level)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return level_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogStreamingArgs::unsafe_arena_set_allocated_level(
    std::string* level) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (level != nullptr) {
    
  } else {
    
  }
  level_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      level, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.LogStreamingArgs.Level)
}

// string Msg = 4[json_name = "Msg"];
inline void LogStreamingArgs::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogStreamingArgs::msg() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.LogStreamingArgs.Msg)
  return _internal_msg();
}
inline void LogStreamingArgs::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.LogStreamingArgs.Msg)
}
inline std::string* LogStreamingArgs::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.LogStreamingArgs.Msg)
  return _internal_mutable_msg();
}
inline const std::string& LogStreamingArgs::_internal_msg() const {
  return msg_.Get();
}
inline void LogStreamingArgs::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogStreamingArgs::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.LogStreamingArgs.Msg)
}
inline void LogStreamingArgs::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.LogStreamingArgs.Msg)
}
inline void LogStreamingArgs::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.LogStreamingArgs.Msg)
}
inline std::string* LogStreamingArgs::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogStreamingArgs::release_msg() {
  // @@protoc_insertion_point(field_release:cedana.services.task.LogStreamingArgs.Msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogStreamingArgs::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.LogStreamingArgs.Msg)
}
inline std::string* LogStreamingArgs::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.LogStreamingArgs.Msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogStreamingArgs::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.LogStreamingArgs.Msg)
}

// -------------------------------------------------------------------

// LogStreamingResp

// string Status = 1[json_name = "Status"];
inline void LogStreamingResp::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogStreamingResp::status() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.LogStreamingResp.Status)
  return _internal_status();
}
inline void LogStreamingResp::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.LogStreamingResp.Status)
}
inline std::string* LogStreamingResp::mutable_status() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.LogStreamingResp.Status)
  return _internal_mutable_status();
}
inline const std::string& LogStreamingResp::_internal_status() const {
  return status_.Get();
}
inline void LogStreamingResp::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogStreamingResp::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.LogStreamingResp.Status)
}
inline void LogStreamingResp::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.LogStreamingResp.Status)
}
inline void LogStreamingResp::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.LogStreamingResp.Status)
}
inline std::string* LogStreamingResp::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogStreamingResp::release_status() {
  // @@protoc_insertion_point(field_release:cedana.services.task.LogStreamingResp.Status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogStreamingResp::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.LogStreamingResp.Status)
}
inline std::string* LogStreamingResp::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.LogStreamingResp.Status)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return status_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogStreamingResp::unsafe_arena_set_allocated_status(
    std::string* status) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (status != nullptr) {
    
  } else {
    
  }
  status_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      status, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.LogStreamingResp.Status)
}

// -------------------------------------------------------------------

// ProcessState

// int32 PID = 1[json_name = "PID"];
inline void ProcessState::clear_pid() {
  pid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessState::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessState::pid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ProcessState.PID)
  return _internal_pid();
}
inline void ProcessState::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pid_ = value;
}
inline void ProcessState::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ProcessState.PID)
}

// string Task = 2[json_name = "Task"];
inline void ProcessState::clear_task() {
  task_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProcessState::task() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ProcessState.Task)
  return _internal_task();
}
inline void ProcessState::set_task(const std::string& value) {
  _internal_set_task(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ProcessState.Task)
}
inline std::string* ProcessState::mutable_task() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ProcessState.Task)
  return _internal_mutable_task();
}
inline const std::string& ProcessState::_internal_task() const {
  return task_.Get();
}
inline void ProcessState::_internal_set_task(const std::string& value) {
  
  task_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProcessState::set_task(std::string&& value) {
  
  task_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ProcessState.Task)
}
inline void ProcessState::set_task(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  task_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ProcessState.Task)
}
inline void ProcessState::set_task(const char* value,
    size_t size) {
  
  task_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ProcessState.Task)
}
inline std::string* ProcessState::_internal_mutable_task() {
  
  return task_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProcessState::release_task() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ProcessState.Task)
  return task_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProcessState::set_allocated_task(std::string* task) {
  if (task != nullptr) {
    
  } else {
    
  }
  task_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ProcessState.Task)
}
inline std::string* ProcessState::unsafe_arena_release_task() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ProcessState.Task)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return task_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProcessState::unsafe_arena_set_allocated_task(
    std::string* task) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (task != nullptr) {
    
  } else {
    
  }
  task_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      task, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ProcessState.Task)
}

// string ContainerID = 4[json_name = "ContainerID"];
inline void ProcessState::clear_containerid() {
  containerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProcessState::containerid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ProcessState.ContainerID)
  return _internal_containerid();
}
inline void ProcessState::set_containerid(const std::string& value) {
  _internal_set_containerid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ProcessState.ContainerID)
}
inline std::string* ProcessState::mutable_containerid() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ProcessState.ContainerID)
  return _internal_mutable_containerid();
}
inline const std::string& ProcessState::_internal_containerid() const {
  return containerid_.Get();
}
inline void ProcessState::_internal_set_containerid(const std::string& value) {
  
  containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProcessState::set_containerid(std::string&& value) {
  
  containerid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ProcessState.ContainerID)
}
inline void ProcessState::set_containerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ProcessState.ContainerID)
}
inline void ProcessState::set_containerid(const char* value,
    size_t size) {
  
  containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ProcessState.ContainerID)
}
inline std::string* ProcessState::_internal_mutable_containerid() {
  
  return containerid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProcessState::release_containerid() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ProcessState.ContainerID)
  return containerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProcessState::set_allocated_containerid(std::string* containerid) {
  if (containerid != nullptr) {
    
  } else {
    
  }
  containerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), containerid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ProcessState.ContainerID)
}
inline std::string* ProcessState::unsafe_arena_release_containerid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ProcessState.ContainerID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return containerid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProcessState::unsafe_arena_set_allocated_containerid(
    std::string* containerid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (containerid != nullptr) {
    
  } else {
    
  }
  containerid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      containerid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ProcessState.ContainerID)
}

// string StartedAt = 5[json_name = "StartedAt"];
inline void ProcessState::clear_startedat() {
  startedat_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProcessState::startedat() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ProcessState.StartedAt)
  return _internal_startedat();
}
inline void ProcessState::set_startedat(const std::string& value) {
  _internal_set_startedat(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ProcessState.StartedAt)
}
inline std::string* ProcessState::mutable_startedat() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ProcessState.StartedAt)
  return _internal_mutable_startedat();
}
inline const std::string& ProcessState::_internal_startedat() const {
  return startedat_.Get();
}
inline void ProcessState::_internal_set_startedat(const std::string& value) {
  
  startedat_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProcessState::set_startedat(std::string&& value) {
  
  startedat_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ProcessState.StartedAt)
}
inline void ProcessState::set_startedat(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  startedat_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ProcessState.StartedAt)
}
inline void ProcessState::set_startedat(const char* value,
    size_t size) {
  
  startedat_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ProcessState.StartedAt)
}
inline std::string* ProcessState::_internal_mutable_startedat() {
  
  return startedat_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProcessState::release_startedat() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ProcessState.StartedAt)
  return startedat_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProcessState::set_allocated_startedat(std::string* startedat) {
  if (startedat != nullptr) {
    
  } else {
    
  }
  startedat_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), startedat,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ProcessState.StartedAt)
}
inline std::string* ProcessState::unsafe_arena_release_startedat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ProcessState.StartedAt)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return startedat_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProcessState::unsafe_arena_set_allocated_startedat(
    std::string* startedat) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (startedat != nullptr) {
    
  } else {
    
  }
  startedat_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      startedat, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ProcessState.StartedAt)
}

// .cedana.services.task.ProcessInfo ProcessInfo = 6[json_name = "ProcessInfo"];
inline bool ProcessState::_internal_has_processinfo() const {
  return this != internal_default_instance() && processinfo_ != nullptr;
}
inline bool ProcessState::has_processinfo() const {
  return _internal_has_processinfo();
}
inline void ProcessState::clear_processinfo() {
  if (GetArena() == nullptr && processinfo_ != nullptr) {
    delete processinfo_;
  }
  processinfo_ = nullptr;
}
inline const ::cedana::services::task::ProcessInfo& ProcessState::_internal_processinfo() const {
  const ::cedana::services::task::ProcessInfo* p = processinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cedana::services::task::ProcessInfo*>(
      &::cedana::services::task::_ProcessInfo_default_instance_);
}
inline const ::cedana::services::task::ProcessInfo& ProcessState::processinfo() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ProcessState.ProcessInfo)
  return _internal_processinfo();
}
inline void ProcessState::unsafe_arena_set_allocated_processinfo(
    ::cedana::services::task::ProcessInfo* processinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(processinfo_);
  }
  processinfo_ = processinfo;
  if (processinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ProcessState.ProcessInfo)
}
inline ::cedana::services::task::ProcessInfo* ProcessState::release_processinfo() {
  auto temp = unsafe_arena_release_processinfo();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cedana::services::task::ProcessInfo* ProcessState::unsafe_arena_release_processinfo() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ProcessState.ProcessInfo)
  
  ::cedana::services::task::ProcessInfo* temp = processinfo_;
  processinfo_ = nullptr;
  return temp;
}
inline ::cedana::services::task::ProcessInfo* ProcessState::_internal_mutable_processinfo() {
  
  if (processinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::cedana::services::task::ProcessInfo>(GetArena());
    processinfo_ = p;
  }
  return processinfo_;
}
inline ::cedana::services::task::ProcessInfo* ProcessState::mutable_processinfo() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ProcessState.ProcessInfo)
  return _internal_mutable_processinfo();
}
inline void ProcessState::set_allocated_processinfo(::cedana::services::task::ProcessInfo* processinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete processinfo_;
  }
  if (processinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(processinfo);
    if (message_arena != submessage_arena) {
      processinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, processinfo, submessage_arena);
    }
    
  } else {
    
  }
  processinfo_ = processinfo;
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ProcessState.ProcessInfo)
}

// string CheckpointPath = 7[json_name = "CheckpointPath"];
inline void ProcessState::clear_checkpointpath() {
  checkpointpath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProcessState::checkpointpath() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ProcessState.CheckpointPath)
  return _internal_checkpointpath();
}
inline void ProcessState::set_checkpointpath(const std::string& value) {
  _internal_set_checkpointpath(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ProcessState.CheckpointPath)
}
inline std::string* ProcessState::mutable_checkpointpath() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ProcessState.CheckpointPath)
  return _internal_mutable_checkpointpath();
}
inline const std::string& ProcessState::_internal_checkpointpath() const {
  return checkpointpath_.Get();
}
inline void ProcessState::_internal_set_checkpointpath(const std::string& value) {
  
  checkpointpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProcessState::set_checkpointpath(std::string&& value) {
  
  checkpointpath_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ProcessState.CheckpointPath)
}
inline void ProcessState::set_checkpointpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  checkpointpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ProcessState.CheckpointPath)
}
inline void ProcessState::set_checkpointpath(const char* value,
    size_t size) {
  
  checkpointpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ProcessState.CheckpointPath)
}
inline std::string* ProcessState::_internal_mutable_checkpointpath() {
  
  return checkpointpath_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProcessState::release_checkpointpath() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ProcessState.CheckpointPath)
  return checkpointpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProcessState::set_allocated_checkpointpath(std::string* checkpointpath) {
  if (checkpointpath != nullptr) {
    
  } else {
    
  }
  checkpointpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), checkpointpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ProcessState.CheckpointPath)
}
inline std::string* ProcessState::unsafe_arena_release_checkpointpath() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ProcessState.CheckpointPath)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return checkpointpath_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProcessState::unsafe_arena_set_allocated_checkpointpath(
    std::string* checkpointpath) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (checkpointpath != nullptr) {
    
  } else {
    
  }
  checkpointpath_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      checkpointpath, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ProcessState.CheckpointPath)
}

// .cedana.services.task.CheckpointState CheckpointState = 8[json_name = "CheckpointState"];
inline void ProcessState::clear_checkpointstate() {
  checkpointstate_ = 0;
}
inline ::cedana::services::task::CheckpointState ProcessState::_internal_checkpointstate() const {
  return static_cast< ::cedana::services::task::CheckpointState >(checkpointstate_);
}
inline ::cedana::services::task::CheckpointState ProcessState::checkpointstate() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ProcessState.CheckpointState)
  return _internal_checkpointstate();
}
inline void ProcessState::_internal_set_checkpointstate(::cedana::services::task::CheckpointState value) {
  
  checkpointstate_ = value;
}
inline void ProcessState::set_checkpointstate(::cedana::services::task::CheckpointState value) {
  _internal_set_checkpointstate(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ProcessState.CheckpointState)
}

// .cedana.services.task.JobState JobState = 9[json_name = "JobState"];
inline void ProcessState::clear_jobstate() {
  jobstate_ = 0;
}
inline ::cedana::services::task::JobState ProcessState::_internal_jobstate() const {
  return static_cast< ::cedana::services::task::JobState >(jobstate_);
}
inline ::cedana::services::task::JobState ProcessState::jobstate() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ProcessState.JobState)
  return _internal_jobstate();
}
inline void ProcessState::_internal_set_jobstate(::cedana::services::task::JobState value) {
  
  jobstate_ = value;
}
inline void ProcessState::set_jobstate(::cedana::services::task::JobState value) {
  _internal_set_jobstate(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ProcessState.JobState)
}

// repeated .cedana.services.task.RemoteState RemoteState = 10[json_name = "RemoteState"];
inline int ProcessState::_internal_remotestate_size() const {
  return remotestate_.size();
}
inline int ProcessState::remotestate_size() const {
  return _internal_remotestate_size();
}
inline void ProcessState::clear_remotestate() {
  remotestate_.Clear();
}
inline ::cedana::services::task::RemoteState* ProcessState::mutable_remotestate(int index) {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ProcessState.RemoteState)
  return remotestate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedana::services::task::RemoteState >*
ProcessState::mutable_remotestate() {
  // @@protoc_insertion_point(field_mutable_list:cedana.services.task.ProcessState.RemoteState)
  return &remotestate_;
}
inline const ::cedana::services::task::RemoteState& ProcessState::_internal_remotestate(int index) const {
  return remotestate_.Get(index);
}
inline const ::cedana::services::task::RemoteState& ProcessState::remotestate(int index) const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ProcessState.RemoteState)
  return _internal_remotestate(index);
}
inline ::cedana::services::task::RemoteState* ProcessState::_internal_add_remotestate() {
  return remotestate_.Add();
}
inline ::cedana::services::task::RemoteState* ProcessState::add_remotestate() {
  // @@protoc_insertion_point(field_add:cedana.services.task.ProcessState.RemoteState)
  return _internal_add_remotestate();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedana::services::task::RemoteState >&
ProcessState::remotestate() const {
  // @@protoc_insertion_point(field_list:cedana.services.task.ProcessState.RemoteState)
  return remotestate_;
}

// bool GPUCheckpointed = 11[json_name = "GPUCheckpointed"];
inline void ProcessState::clear_gpucheckpointed() {
  gpucheckpointed_ = false;
}
inline bool ProcessState::_internal_gpucheckpointed() const {
  return gpucheckpointed_;
}
inline bool ProcessState::gpucheckpointed() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ProcessState.GPUCheckpointed)
  return _internal_gpucheckpointed();
}
inline void ProcessState::_internal_set_gpucheckpointed(bool value) {
  
  gpucheckpointed_ = value;
}
inline void ProcessState::set_gpucheckpointed(bool value) {
  _internal_set_gpucheckpointed(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ProcessState.GPUCheckpointed)
}

// string JID = 12[json_name = "JID"];
inline void ProcessState::clear_jid() {
  jid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProcessState::jid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ProcessState.JID)
  return _internal_jid();
}
inline void ProcessState::set_jid(const std::string& value) {
  _internal_set_jid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ProcessState.JID)
}
inline std::string* ProcessState::mutable_jid() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ProcessState.JID)
  return _internal_mutable_jid();
}
inline const std::string& ProcessState::_internal_jid() const {
  return jid_.Get();
}
inline void ProcessState::_internal_set_jid(const std::string& value) {
  
  jid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProcessState::set_jid(std::string&& value) {
  
  jid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ProcessState.JID)
}
inline void ProcessState::set_jid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  jid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ProcessState.JID)
}
inline void ProcessState::set_jid(const char* value,
    size_t size) {
  
  jid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ProcessState.JID)
}
inline std::string* ProcessState::_internal_mutable_jid() {
  
  return jid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProcessState::release_jid() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ProcessState.JID)
  return jid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProcessState::set_allocated_jid(std::string* jid) {
  if (jid != nullptr) {
    
  } else {
    
  }
  jid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ProcessState.JID)
}
inline std::string* ProcessState::unsafe_arena_release_jid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ProcessState.JID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return jid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProcessState::unsafe_arena_set_allocated_jid(
    std::string* jid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (jid != nullptr) {
    
  } else {
    
  }
  jid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      jid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ProcessState.JID)
}

// .cedana.services.task.HostInfo HostInfo = 13[json_name = "HostInfo"];
inline bool ProcessState::_internal_has_hostinfo() const {
  return this != internal_default_instance() && hostinfo_ != nullptr;
}
inline bool ProcessState::has_hostinfo() const {
  return _internal_has_hostinfo();
}
inline void ProcessState::clear_hostinfo() {
  if (GetArena() == nullptr && hostinfo_ != nullptr) {
    delete hostinfo_;
  }
  hostinfo_ = nullptr;
}
inline const ::cedana::services::task::HostInfo& ProcessState::_internal_hostinfo() const {
  const ::cedana::services::task::HostInfo* p = hostinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cedana::services::task::HostInfo*>(
      &::cedana::services::task::_HostInfo_default_instance_);
}
inline const ::cedana::services::task::HostInfo& ProcessState::hostinfo() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ProcessState.HostInfo)
  return _internal_hostinfo();
}
inline void ProcessState::unsafe_arena_set_allocated_hostinfo(
    ::cedana::services::task::HostInfo* hostinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hostinfo_);
  }
  hostinfo_ = hostinfo;
  if (hostinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ProcessState.HostInfo)
}
inline ::cedana::services::task::HostInfo* ProcessState::release_hostinfo() {
  auto temp = unsafe_arena_release_hostinfo();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cedana::services::task::HostInfo* ProcessState::unsafe_arena_release_hostinfo() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ProcessState.HostInfo)
  
  ::cedana::services::task::HostInfo* temp = hostinfo_;
  hostinfo_ = nullptr;
  return temp;
}
inline ::cedana::services::task::HostInfo* ProcessState::_internal_mutable_hostinfo() {
  
  if (hostinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::cedana::services::task::HostInfo>(GetArena());
    hostinfo_ = p;
  }
  return hostinfo_;
}
inline ::cedana::services::task::HostInfo* ProcessState::mutable_hostinfo() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ProcessState.HostInfo)
  return _internal_mutable_hostinfo();
}
inline void ProcessState::set_allocated_hostinfo(::cedana::services::task::HostInfo* hostinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hostinfo_;
  }
  if (hostinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hostinfo);
    if (message_arena != submessage_arena) {
      hostinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hostinfo, submessage_arena);
    }
    
  } else {
    
  }
  hostinfo_ = hostinfo;
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ProcessState.HostInfo)
}

// .cedana.services.task.CPUInfo CPUInfo = 14[json_name = "CPUInfo"];
inline bool ProcessState::_internal_has_cpuinfo() const {
  return this != internal_default_instance() && cpuinfo_ != nullptr;
}
inline bool ProcessState::has_cpuinfo() const {
  return _internal_has_cpuinfo();
}
inline void ProcessState::clear_cpuinfo() {
  if (GetArena() == nullptr && cpuinfo_ != nullptr) {
    delete cpuinfo_;
  }
  cpuinfo_ = nullptr;
}
inline const ::cedana::services::task::CPUInfo& ProcessState::_internal_cpuinfo() const {
  const ::cedana::services::task::CPUInfo* p = cpuinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cedana::services::task::CPUInfo*>(
      &::cedana::services::task::_CPUInfo_default_instance_);
}
inline const ::cedana::services::task::CPUInfo& ProcessState::cpuinfo() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ProcessState.CPUInfo)
  return _internal_cpuinfo();
}
inline void ProcessState::unsafe_arena_set_allocated_cpuinfo(
    ::cedana::services::task::CPUInfo* cpuinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cpuinfo_);
  }
  cpuinfo_ = cpuinfo;
  if (cpuinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ProcessState.CPUInfo)
}
inline ::cedana::services::task::CPUInfo* ProcessState::release_cpuinfo() {
  auto temp = unsafe_arena_release_cpuinfo();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cedana::services::task::CPUInfo* ProcessState::unsafe_arena_release_cpuinfo() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ProcessState.CPUInfo)
  
  ::cedana::services::task::CPUInfo* temp = cpuinfo_;
  cpuinfo_ = nullptr;
  return temp;
}
inline ::cedana::services::task::CPUInfo* ProcessState::_internal_mutable_cpuinfo() {
  
  if (cpuinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::cedana::services::task::CPUInfo>(GetArena());
    cpuinfo_ = p;
  }
  return cpuinfo_;
}
inline ::cedana::services::task::CPUInfo* ProcessState::mutable_cpuinfo() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ProcessState.CPUInfo)
  return _internal_mutable_cpuinfo();
}
inline void ProcessState::set_allocated_cpuinfo(::cedana::services::task::CPUInfo* cpuinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cpuinfo_;
  }
  if (cpuinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cpuinfo);
    if (message_arena != submessage_arena) {
      cpuinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpuinfo, submessage_arena);
    }
    
  } else {
    
  }
  cpuinfo_ = cpuinfo;
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ProcessState.CPUInfo)
}

// .cedana.services.task.MemoryInfo MemoryInfo = 15[json_name = "MemoryInfo"];
inline bool ProcessState::_internal_has_memoryinfo() const {
  return this != internal_default_instance() && memoryinfo_ != nullptr;
}
inline bool ProcessState::has_memoryinfo() const {
  return _internal_has_memoryinfo();
}
inline void ProcessState::clear_memoryinfo() {
  if (GetArena() == nullptr && memoryinfo_ != nullptr) {
    delete memoryinfo_;
  }
  memoryinfo_ = nullptr;
}
inline const ::cedana::services::task::MemoryInfo& ProcessState::_internal_memoryinfo() const {
  const ::cedana::services::task::MemoryInfo* p = memoryinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cedana::services::task::MemoryInfo*>(
      &::cedana::services::task::_MemoryInfo_default_instance_);
}
inline const ::cedana::services::task::MemoryInfo& ProcessState::memoryinfo() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ProcessState.MemoryInfo)
  return _internal_memoryinfo();
}
inline void ProcessState::unsafe_arena_set_allocated_memoryinfo(
    ::cedana::services::task::MemoryInfo* memoryinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(memoryinfo_);
  }
  memoryinfo_ = memoryinfo;
  if (memoryinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ProcessState.MemoryInfo)
}
inline ::cedana::services::task::MemoryInfo* ProcessState::release_memoryinfo() {
  auto temp = unsafe_arena_release_memoryinfo();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cedana::services::task::MemoryInfo* ProcessState::unsafe_arena_release_memoryinfo() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ProcessState.MemoryInfo)
  
  ::cedana::services::task::MemoryInfo* temp = memoryinfo_;
  memoryinfo_ = nullptr;
  return temp;
}
inline ::cedana::services::task::MemoryInfo* ProcessState::_internal_mutable_memoryinfo() {
  
  if (memoryinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::cedana::services::task::MemoryInfo>(GetArena());
    memoryinfo_ = p;
  }
  return memoryinfo_;
}
inline ::cedana::services::task::MemoryInfo* ProcessState::mutable_memoryinfo() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ProcessState.MemoryInfo)
  return _internal_mutable_memoryinfo();
}
inline void ProcessState::set_allocated_memoryinfo(::cedana::services::task::MemoryInfo* memoryinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete memoryinfo_;
  }
  if (memoryinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(memoryinfo);
    if (message_arena != submessage_arena) {
      memoryinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memoryinfo, submessage_arena);
    }
    
  } else {
    
  }
  memoryinfo_ = memoryinfo;
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ProcessState.MemoryInfo)
}

// repeated int32 UIDs = 16[json_name = "UIDs"];
inline int ProcessState::_internal_uids_size() const {
  return uids_.size();
}
inline int ProcessState::uids_size() const {
  return _internal_uids_size();
}
inline void ProcessState::clear_uids() {
  uids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessState::_internal_uids(int index) const {
  return uids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessState::uids(int index) const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ProcessState.UIDs)
  return _internal_uids(index);
}
inline void ProcessState::set_uids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  uids_.Set(index, value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ProcessState.UIDs)
}
inline void ProcessState::_internal_add_uids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  uids_.Add(value);
}
inline void ProcessState::add_uids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_uids(value);
  // @@protoc_insertion_point(field_add:cedana.services.task.ProcessState.UIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ProcessState::_internal_uids() const {
  return uids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ProcessState::uids() const {
  // @@protoc_insertion_point(field_list:cedana.services.task.ProcessState.UIDs)
  return _internal_uids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ProcessState::_internal_mutable_uids() {
  return &uids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ProcessState::mutable_uids() {
  // @@protoc_insertion_point(field_mutable_list:cedana.services.task.ProcessState.UIDs)
  return _internal_mutable_uids();
}

// repeated int32 GIDs = 17[json_name = "GIDs"];
inline int ProcessState::_internal_gids_size() const {
  return gids_.size();
}
inline int ProcessState::gids_size() const {
  return _internal_gids_size();
}
inline void ProcessState::clear_gids() {
  gids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessState::_internal_gids(int index) const {
  return gids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessState::gids(int index) const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ProcessState.GIDs)
  return _internal_gids(index);
}
inline void ProcessState::set_gids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  gids_.Set(index, value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ProcessState.GIDs)
}
inline void ProcessState::_internal_add_gids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  gids_.Add(value);
}
inline void ProcessState::add_gids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_gids(value);
  // @@protoc_insertion_point(field_add:cedana.services.task.ProcessState.GIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ProcessState::_internal_gids() const {
  return gids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ProcessState::gids() const {
  // @@protoc_insertion_point(field_list:cedana.services.task.ProcessState.GIDs)
  return _internal_gids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ProcessState::_internal_mutable_gids() {
  return &gids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ProcessState::mutable_gids() {
  // @@protoc_insertion_point(field_mutable_list:cedana.services.task.ProcessState.GIDs)
  return _internal_mutable_gids();
}

// repeated int32 Groups = 18[json_name = "Groups"];
inline int ProcessState::_internal_groups_size() const {
  return groups_.size();
}
inline int ProcessState::groups_size() const {
  return _internal_groups_size();
}
inline void ProcessState::clear_groups() {
  groups_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessState::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessState::groups(int index) const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ProcessState.Groups)
  return _internal_groups(index);
}
inline void ProcessState::set_groups(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  groups_.Set(index, value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ProcessState.Groups)
}
inline void ProcessState::_internal_add_groups(::PROTOBUF_NAMESPACE_ID::int32 value) {
  groups_.Add(value);
}
inline void ProcessState::add_groups(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_groups(value);
  // @@protoc_insertion_point(field_add:cedana.services.task.ProcessState.Groups)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ProcessState::_internal_groups() const {
  return groups_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ProcessState::groups() const {
  // @@protoc_insertion_point(field_list:cedana.services.task.ProcessState.Groups)
  return _internal_groups();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ProcessState::_internal_mutable_groups() {
  return &groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ProcessState::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:cedana.services.task.ProcessState.Groups)
  return _internal_mutable_groups();
}

// -------------------------------------------------------------------

// RemoteState

// string CheckpointID = 1[json_name = "CheckpointID"];
inline void RemoteState::clear_checkpointid() {
  checkpointid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoteState::checkpointid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RemoteState.CheckpointID)
  return _internal_checkpointid();
}
inline void RemoteState::set_checkpointid(const std::string& value) {
  _internal_set_checkpointid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RemoteState.CheckpointID)
}
inline std::string* RemoteState::mutable_checkpointid() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RemoteState.CheckpointID)
  return _internal_mutable_checkpointid();
}
inline const std::string& RemoteState::_internal_checkpointid() const {
  return checkpointid_.Get();
}
inline void RemoteState::_internal_set_checkpointid(const std::string& value) {
  
  checkpointid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoteState::set_checkpointid(std::string&& value) {
  
  checkpointid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RemoteState.CheckpointID)
}
inline void RemoteState::set_checkpointid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  checkpointid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RemoteState.CheckpointID)
}
inline void RemoteState::set_checkpointid(const char* value,
    size_t size) {
  
  checkpointid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RemoteState.CheckpointID)
}
inline std::string* RemoteState::_internal_mutable_checkpointid() {
  
  return checkpointid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoteState::release_checkpointid() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RemoteState.CheckpointID)
  return checkpointid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoteState::set_allocated_checkpointid(std::string* checkpointid) {
  if (checkpointid != nullptr) {
    
  } else {
    
  }
  checkpointid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), checkpointid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RemoteState.CheckpointID)
}
inline std::string* RemoteState::unsafe_arena_release_checkpointid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RemoteState.CheckpointID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return checkpointid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RemoteState::unsafe_arena_set_allocated_checkpointid(
    std::string* checkpointid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (checkpointid != nullptr) {
    
  } else {
    
  }
  checkpointid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      checkpointid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RemoteState.CheckpointID)
}

// string UploadID = 2[json_name = "UploadID"];
inline void RemoteState::clear_uploadid() {
  uploadid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoteState::uploadid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RemoteState.UploadID)
  return _internal_uploadid();
}
inline void RemoteState::set_uploadid(const std::string& value) {
  _internal_set_uploadid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RemoteState.UploadID)
}
inline std::string* RemoteState::mutable_uploadid() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RemoteState.UploadID)
  return _internal_mutable_uploadid();
}
inline const std::string& RemoteState::_internal_uploadid() const {
  return uploadid_.Get();
}
inline void RemoteState::_internal_set_uploadid(const std::string& value) {
  
  uploadid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoteState::set_uploadid(std::string&& value) {
  
  uploadid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RemoteState.UploadID)
}
inline void RemoteState::set_uploadid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uploadid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RemoteState.UploadID)
}
inline void RemoteState::set_uploadid(const char* value,
    size_t size) {
  
  uploadid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RemoteState.UploadID)
}
inline std::string* RemoteState::_internal_mutable_uploadid() {
  
  return uploadid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoteState::release_uploadid() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RemoteState.UploadID)
  return uploadid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoteState::set_allocated_uploadid(std::string* uploadid) {
  if (uploadid != nullptr) {
    
  } else {
    
  }
  uploadid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uploadid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RemoteState.UploadID)
}
inline std::string* RemoteState::unsafe_arena_release_uploadid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RemoteState.UploadID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return uploadid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RemoteState::unsafe_arena_set_allocated_uploadid(
    std::string* uploadid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uploadid != nullptr) {
    
  } else {
    
  }
  uploadid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uploadid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RemoteState.UploadID)
}

// int64 Timestamp = 3[json_name = "Timestamp"];
inline void RemoteState::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RemoteState::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RemoteState::timestamp() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RemoteState.Timestamp)
  return _internal_timestamp();
}
inline void RemoteState::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void RemoteState::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RemoteState.Timestamp)
}

// -------------------------------------------------------------------

// ProcessInfo

// int32 PID = 1[json_name = "PID"];
inline void ProcessInfo::clear_pid() {
  pid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessInfo::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessInfo::pid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ProcessInfo.PID)
  return _internal_pid();
}
inline void ProcessInfo::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pid_ = value;
}
inline void ProcessInfo::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ProcessInfo.PID)
}

// bool AttachedToHardwareAccel = 2[json_name = "AttachedToHardwareAccel"];
inline void ProcessInfo::clear_attachedtohardwareaccel() {
  attachedtohardwareaccel_ = false;
}
inline bool ProcessInfo::_internal_attachedtohardwareaccel() const {
  return attachedtohardwareaccel_;
}
inline bool ProcessInfo::attachedtohardwareaccel() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ProcessInfo.AttachedToHardwareAccel)
  return _internal_attachedtohardwareaccel();
}
inline void ProcessInfo::_internal_set_attachedtohardwareaccel(bool value) {
  
  attachedtohardwareaccel_ = value;
}
inline void ProcessInfo::set_attachedtohardwareaccel(bool value) {
  _internal_set_attachedtohardwareaccel(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ProcessInfo.AttachedToHardwareAccel)
}

// repeated .cedana.services.task.OpenFilesStat OpenFds = 3[json_name = "OpenFds"];
inline int ProcessInfo::_internal_openfds_size() const {
  return openfds_.size();
}
inline int ProcessInfo::openfds_size() const {
  return _internal_openfds_size();
}
inline void ProcessInfo::clear_openfds() {
  openfds_.Clear();
}
inline ::cedana::services::task::OpenFilesStat* ProcessInfo::mutable_openfds(int index) {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ProcessInfo.OpenFds)
  return openfds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedana::services::task::OpenFilesStat >*
ProcessInfo::mutable_openfds() {
  // @@protoc_insertion_point(field_mutable_list:cedana.services.task.ProcessInfo.OpenFds)
  return &openfds_;
}
inline const ::cedana::services::task::OpenFilesStat& ProcessInfo::_internal_openfds(int index) const {
  return openfds_.Get(index);
}
inline const ::cedana::services::task::OpenFilesStat& ProcessInfo::openfds(int index) const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ProcessInfo.OpenFds)
  return _internal_openfds(index);
}
inline ::cedana::services::task::OpenFilesStat* ProcessInfo::_internal_add_openfds() {
  return openfds_.Add();
}
inline ::cedana::services::task::OpenFilesStat* ProcessInfo::add_openfds() {
  // @@protoc_insertion_point(field_add:cedana.services.task.ProcessInfo.OpenFds)
  return _internal_add_openfds();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedana::services::task::OpenFilesStat >&
ProcessInfo::openfds() const {
  // @@protoc_insertion_point(field_list:cedana.services.task.ProcessInfo.OpenFds)
  return openfds_;
}

// string WorkingDir = 4[json_name = "WorkingDir"];
inline void ProcessInfo::clear_workingdir() {
  workingdir_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProcessInfo::workingdir() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ProcessInfo.WorkingDir)
  return _internal_workingdir();
}
inline void ProcessInfo::set_workingdir(const std::string& value) {
  _internal_set_workingdir(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ProcessInfo.WorkingDir)
}
inline std::string* ProcessInfo::mutable_workingdir() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ProcessInfo.WorkingDir)
  return _internal_mutable_workingdir();
}
inline const std::string& ProcessInfo::_internal_workingdir() const {
  return workingdir_.Get();
}
inline void ProcessInfo::_internal_set_workingdir(const std::string& value) {
  
  workingdir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProcessInfo::set_workingdir(std::string&& value) {
  
  workingdir_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ProcessInfo.WorkingDir)
}
inline void ProcessInfo::set_workingdir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workingdir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ProcessInfo.WorkingDir)
}
inline void ProcessInfo::set_workingdir(const char* value,
    size_t size) {
  
  workingdir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ProcessInfo.WorkingDir)
}
inline std::string* ProcessInfo::_internal_mutable_workingdir() {
  
  return workingdir_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProcessInfo::release_workingdir() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ProcessInfo.WorkingDir)
  return workingdir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProcessInfo::set_allocated_workingdir(std::string* workingdir) {
  if (workingdir != nullptr) {
    
  } else {
    
  }
  workingdir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workingdir,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ProcessInfo.WorkingDir)
}
inline std::string* ProcessInfo::unsafe_arena_release_workingdir() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ProcessInfo.WorkingDir)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return workingdir_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProcessInfo::unsafe_arena_set_allocated_workingdir(
    std::string* workingdir) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (workingdir != nullptr) {
    
  } else {
    
  }
  workingdir_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      workingdir, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ProcessInfo.WorkingDir)
}

// repeated .cedana.services.task.ConnectionStat OpenConnections = 5[json_name = "OpenConnections"];
inline int ProcessInfo::_internal_openconnections_size() const {
  return openconnections_.size();
}
inline int ProcessInfo::openconnections_size() const {
  return _internal_openconnections_size();
}
inline void ProcessInfo::clear_openconnections() {
  openconnections_.Clear();
}
inline ::cedana::services::task::ConnectionStat* ProcessInfo::mutable_openconnections(int index) {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ProcessInfo.OpenConnections)
  return openconnections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedana::services::task::ConnectionStat >*
ProcessInfo::mutable_openconnections() {
  // @@protoc_insertion_point(field_mutable_list:cedana.services.task.ProcessInfo.OpenConnections)
  return &openconnections_;
}
inline const ::cedana::services::task::ConnectionStat& ProcessInfo::_internal_openconnections(int index) const {
  return openconnections_.Get(index);
}
inline const ::cedana::services::task::ConnectionStat& ProcessInfo::openconnections(int index) const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ProcessInfo.OpenConnections)
  return _internal_openconnections(index);
}
inline ::cedana::services::task::ConnectionStat* ProcessInfo::_internal_add_openconnections() {
  return openconnections_.Add();
}
inline ::cedana::services::task::ConnectionStat* ProcessInfo::add_openconnections() {
  // @@protoc_insertion_point(field_add:cedana.services.task.ProcessInfo.OpenConnections)
  return _internal_add_openconnections();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedana::services::task::ConnectionStat >&
ProcessInfo::openconnections() const {
  // @@protoc_insertion_point(field_list:cedana.services.task.ProcessInfo.OpenConnections)
  return openconnections_;
}

// float MemoryPercent = 6[json_name = "MemoryPercent"];
inline void ProcessInfo::clear_memorypercent() {
  memorypercent_ = 0;
}
inline float ProcessInfo::_internal_memorypercent() const {
  return memorypercent_;
}
inline float ProcessInfo::memorypercent() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ProcessInfo.MemoryPercent)
  return _internal_memorypercent();
}
inline void ProcessInfo::_internal_set_memorypercent(float value) {
  
  memorypercent_ = value;
}
inline void ProcessInfo::set_memorypercent(float value) {
  _internal_set_memorypercent(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ProcessInfo.MemoryPercent)
}

// bool IsRunning = 7[json_name = "IsRunning"];
inline void ProcessInfo::clear_isrunning() {
  isrunning_ = false;
}
inline bool ProcessInfo::_internal_isrunning() const {
  return isrunning_;
}
inline bool ProcessInfo::isrunning() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ProcessInfo.IsRunning)
  return _internal_isrunning();
}
inline void ProcessInfo::_internal_set_isrunning(bool value) {
  
  isrunning_ = value;
}
inline void ProcessInfo::set_isrunning(bool value) {
  _internal_set_isrunning(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ProcessInfo.IsRunning)
}

// string Status = 8[json_name = "Status"];
inline void ProcessInfo::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProcessInfo::status() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ProcessInfo.Status)
  return _internal_status();
}
inline void ProcessInfo::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ProcessInfo.Status)
}
inline std::string* ProcessInfo::mutable_status() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ProcessInfo.Status)
  return _internal_mutable_status();
}
inline const std::string& ProcessInfo::_internal_status() const {
  return status_.Get();
}
inline void ProcessInfo::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProcessInfo::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ProcessInfo.Status)
}
inline void ProcessInfo::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ProcessInfo.Status)
}
inline void ProcessInfo::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ProcessInfo.Status)
}
inline std::string* ProcessInfo::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProcessInfo::release_status() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ProcessInfo.Status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProcessInfo::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ProcessInfo.Status)
}
inline std::string* ProcessInfo::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ProcessInfo.Status)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return status_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProcessInfo::unsafe_arena_set_allocated_status(
    std::string* status) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (status != nullptr) {
    
  } else {
    
  }
  status_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      status, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ProcessInfo.Status)
}

// -------------------------------------------------------------------

// HostInfo

// string HostID = 1[json_name = "HostID"];
inline void HostInfo::clear_hostid() {
  hostid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HostInfo::hostid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.HostInfo.HostID)
  return _internal_hostid();
}
inline void HostInfo::set_hostid(const std::string& value) {
  _internal_set_hostid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.HostInfo.HostID)
}
inline std::string* HostInfo::mutable_hostid() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.HostInfo.HostID)
  return _internal_mutable_hostid();
}
inline const std::string& HostInfo::_internal_hostid() const {
  return hostid_.Get();
}
inline void HostInfo::_internal_set_hostid(const std::string& value) {
  
  hostid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HostInfo::set_hostid(std::string&& value) {
  
  hostid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.HostInfo.HostID)
}
inline void HostInfo::set_hostid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.HostInfo.HostID)
}
inline void HostInfo::set_hostid(const char* value,
    size_t size) {
  
  hostid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.HostInfo.HostID)
}
inline std::string* HostInfo::_internal_mutable_hostid() {
  
  return hostid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HostInfo::release_hostid() {
  // @@protoc_insertion_point(field_release:cedana.services.task.HostInfo.HostID)
  return hostid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HostInfo::set_allocated_hostid(std::string* hostid) {
  if (hostid != nullptr) {
    
  } else {
    
  }
  hostid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.HostInfo.HostID)
}
inline std::string* HostInfo::unsafe_arena_release_hostid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.HostInfo.HostID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return hostid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HostInfo::unsafe_arena_set_allocated_hostid(
    std::string* hostid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (hostid != nullptr) {
    
  } else {
    
  }
  hostid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hostid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.HostInfo.HostID)
}

// string Hostname = 4[json_name = "Hostname"];
inline void HostInfo::clear_hostname() {
  hostname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HostInfo::hostname() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.HostInfo.Hostname)
  return _internal_hostname();
}
inline void HostInfo::set_hostname(const std::string& value) {
  _internal_set_hostname(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.HostInfo.Hostname)
}
inline std::string* HostInfo::mutable_hostname() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.HostInfo.Hostname)
  return _internal_mutable_hostname();
}
inline const std::string& HostInfo::_internal_hostname() const {
  return hostname_.Get();
}
inline void HostInfo::_internal_set_hostname(const std::string& value) {
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HostInfo::set_hostname(std::string&& value) {
  
  hostname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.HostInfo.Hostname)
}
inline void HostInfo::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.HostInfo.Hostname)
}
inline void HostInfo::set_hostname(const char* value,
    size_t size) {
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.HostInfo.Hostname)
}
inline std::string* HostInfo::_internal_mutable_hostname() {
  
  return hostname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HostInfo::release_hostname() {
  // @@protoc_insertion_point(field_release:cedana.services.task.HostInfo.Hostname)
  return hostname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HostInfo::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.HostInfo.Hostname)
}
inline std::string* HostInfo::unsafe_arena_release_hostname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.HostInfo.Hostname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return hostname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HostInfo::unsafe_arena_set_allocated_hostname(
    std::string* hostname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hostname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.HostInfo.Hostname)
}

// string OS = 5[json_name = "OS"];
inline void HostInfo::clear_os() {
  os_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HostInfo::os() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.HostInfo.OS)
  return _internal_os();
}
inline void HostInfo::set_os(const std::string& value) {
  _internal_set_os(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.HostInfo.OS)
}
inline std::string* HostInfo::mutable_os() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.HostInfo.OS)
  return _internal_mutable_os();
}
inline const std::string& HostInfo::_internal_os() const {
  return os_.Get();
}
inline void HostInfo::_internal_set_os(const std::string& value) {
  
  os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HostInfo::set_os(std::string&& value) {
  
  os_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.HostInfo.OS)
}
inline void HostInfo::set_os(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.HostInfo.OS)
}
inline void HostInfo::set_os(const char* value,
    size_t size) {
  
  os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.HostInfo.OS)
}
inline std::string* HostInfo::_internal_mutable_os() {
  
  return os_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HostInfo::release_os() {
  // @@protoc_insertion_point(field_release:cedana.services.task.HostInfo.OS)
  return os_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HostInfo::set_allocated_os(std::string* os) {
  if (os != nullptr) {
    
  } else {
    
  }
  os_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), os,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.HostInfo.OS)
}
inline std::string* HostInfo::unsafe_arena_release_os() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.HostInfo.OS)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return os_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HostInfo::unsafe_arena_set_allocated_os(
    std::string* os) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (os != nullptr) {
    
  } else {
    
  }
  os_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      os, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.HostInfo.OS)
}

// string Platform = 6[json_name = "Platform"];
inline void HostInfo::clear_platform() {
  platform_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HostInfo::platform() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.HostInfo.Platform)
  return _internal_platform();
}
inline void HostInfo::set_platform(const std::string& value) {
  _internal_set_platform(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.HostInfo.Platform)
}
inline std::string* HostInfo::mutable_platform() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.HostInfo.Platform)
  return _internal_mutable_platform();
}
inline const std::string& HostInfo::_internal_platform() const {
  return platform_.Get();
}
inline void HostInfo::_internal_set_platform(const std::string& value) {
  
  platform_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HostInfo::set_platform(std::string&& value) {
  
  platform_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.HostInfo.Platform)
}
inline void HostInfo::set_platform(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  platform_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.HostInfo.Platform)
}
inline void HostInfo::set_platform(const char* value,
    size_t size) {
  
  platform_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.HostInfo.Platform)
}
inline std::string* HostInfo::_internal_mutable_platform() {
  
  return platform_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HostInfo::release_platform() {
  // @@protoc_insertion_point(field_release:cedana.services.task.HostInfo.Platform)
  return platform_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HostInfo::set_allocated_platform(std::string* platform) {
  if (platform != nullptr) {
    
  } else {
    
  }
  platform_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), platform,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.HostInfo.Platform)
}
inline std::string* HostInfo::unsafe_arena_release_platform() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.HostInfo.Platform)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return platform_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HostInfo::unsafe_arena_set_allocated_platform(
    std::string* platform) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (platform != nullptr) {
    
  } else {
    
  }
  platform_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      platform, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.HostInfo.Platform)
}

// string KernelVersion = 7[json_name = "KernelVersion"];
inline void HostInfo::clear_kernelversion() {
  kernelversion_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HostInfo::kernelversion() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.HostInfo.KernelVersion)
  return _internal_kernelversion();
}
inline void HostInfo::set_kernelversion(const std::string& value) {
  _internal_set_kernelversion(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.HostInfo.KernelVersion)
}
inline std::string* HostInfo::mutable_kernelversion() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.HostInfo.KernelVersion)
  return _internal_mutable_kernelversion();
}
inline const std::string& HostInfo::_internal_kernelversion() const {
  return kernelversion_.Get();
}
inline void HostInfo::_internal_set_kernelversion(const std::string& value) {
  
  kernelversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HostInfo::set_kernelversion(std::string&& value) {
  
  kernelversion_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.HostInfo.KernelVersion)
}
inline void HostInfo::set_kernelversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kernelversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.HostInfo.KernelVersion)
}
inline void HostInfo::set_kernelversion(const char* value,
    size_t size) {
  
  kernelversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.HostInfo.KernelVersion)
}
inline std::string* HostInfo::_internal_mutable_kernelversion() {
  
  return kernelversion_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HostInfo::release_kernelversion() {
  // @@protoc_insertion_point(field_release:cedana.services.task.HostInfo.KernelVersion)
  return kernelversion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HostInfo::set_allocated_kernelversion(std::string* kernelversion) {
  if (kernelversion != nullptr) {
    
  } else {
    
  }
  kernelversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kernelversion,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.HostInfo.KernelVersion)
}
inline std::string* HostInfo::unsafe_arena_release_kernelversion() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.HostInfo.KernelVersion)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return kernelversion_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HostInfo::unsafe_arena_set_allocated_kernelversion(
    std::string* kernelversion) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (kernelversion != nullptr) {
    
  } else {
    
  }
  kernelversion_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      kernelversion, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.HostInfo.KernelVersion)
}

// string KernelArch = 8[json_name = "KernelArch"];
inline void HostInfo::clear_kernelarch() {
  kernelarch_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HostInfo::kernelarch() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.HostInfo.KernelArch)
  return _internal_kernelarch();
}
inline void HostInfo::set_kernelarch(const std::string& value) {
  _internal_set_kernelarch(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.HostInfo.KernelArch)
}
inline std::string* HostInfo::mutable_kernelarch() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.HostInfo.KernelArch)
  return _internal_mutable_kernelarch();
}
inline const std::string& HostInfo::_internal_kernelarch() const {
  return kernelarch_.Get();
}
inline void HostInfo::_internal_set_kernelarch(const std::string& value) {
  
  kernelarch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HostInfo::set_kernelarch(std::string&& value) {
  
  kernelarch_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.HostInfo.KernelArch)
}
inline void HostInfo::set_kernelarch(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kernelarch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.HostInfo.KernelArch)
}
inline void HostInfo::set_kernelarch(const char* value,
    size_t size) {
  
  kernelarch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.HostInfo.KernelArch)
}
inline std::string* HostInfo::_internal_mutable_kernelarch() {
  
  return kernelarch_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HostInfo::release_kernelarch() {
  // @@protoc_insertion_point(field_release:cedana.services.task.HostInfo.KernelArch)
  return kernelarch_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HostInfo::set_allocated_kernelarch(std::string* kernelarch) {
  if (kernelarch != nullptr) {
    
  } else {
    
  }
  kernelarch_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kernelarch,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.HostInfo.KernelArch)
}
inline std::string* HostInfo::unsafe_arena_release_kernelarch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.HostInfo.KernelArch)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return kernelarch_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HostInfo::unsafe_arena_set_allocated_kernelarch(
    std::string* kernelarch) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (kernelarch != nullptr) {
    
  } else {
    
  }
  kernelarch_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      kernelarch, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.HostInfo.KernelArch)
}

// string VirtualizationSystem = 9[json_name = "VirtualizationSystem"];
inline void HostInfo::clear_virtualizationsystem() {
  virtualizationsystem_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HostInfo::virtualizationsystem() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.HostInfo.VirtualizationSystem)
  return _internal_virtualizationsystem();
}
inline void HostInfo::set_virtualizationsystem(const std::string& value) {
  _internal_set_virtualizationsystem(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.HostInfo.VirtualizationSystem)
}
inline std::string* HostInfo::mutable_virtualizationsystem() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.HostInfo.VirtualizationSystem)
  return _internal_mutable_virtualizationsystem();
}
inline const std::string& HostInfo::_internal_virtualizationsystem() const {
  return virtualizationsystem_.Get();
}
inline void HostInfo::_internal_set_virtualizationsystem(const std::string& value) {
  
  virtualizationsystem_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HostInfo::set_virtualizationsystem(std::string&& value) {
  
  virtualizationsystem_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.HostInfo.VirtualizationSystem)
}
inline void HostInfo::set_virtualizationsystem(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  virtualizationsystem_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.HostInfo.VirtualizationSystem)
}
inline void HostInfo::set_virtualizationsystem(const char* value,
    size_t size) {
  
  virtualizationsystem_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.HostInfo.VirtualizationSystem)
}
inline std::string* HostInfo::_internal_mutable_virtualizationsystem() {
  
  return virtualizationsystem_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HostInfo::release_virtualizationsystem() {
  // @@protoc_insertion_point(field_release:cedana.services.task.HostInfo.VirtualizationSystem)
  return virtualizationsystem_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HostInfo::set_allocated_virtualizationsystem(std::string* virtualizationsystem) {
  if (virtualizationsystem != nullptr) {
    
  } else {
    
  }
  virtualizationsystem_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), virtualizationsystem,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.HostInfo.VirtualizationSystem)
}
inline std::string* HostInfo::unsafe_arena_release_virtualizationsystem() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.HostInfo.VirtualizationSystem)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return virtualizationsystem_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HostInfo::unsafe_arena_set_allocated_virtualizationsystem(
    std::string* virtualizationsystem) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (virtualizationsystem != nullptr) {
    
  } else {
    
  }
  virtualizationsystem_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      virtualizationsystem, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.HostInfo.VirtualizationSystem)
}

// string VirtualizationRole = 10[json_name = "VirtualizationRole"];
inline void HostInfo::clear_virtualizationrole() {
  virtualizationrole_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HostInfo::virtualizationrole() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.HostInfo.VirtualizationRole)
  return _internal_virtualizationrole();
}
inline void HostInfo::set_virtualizationrole(const std::string& value) {
  _internal_set_virtualizationrole(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.HostInfo.VirtualizationRole)
}
inline std::string* HostInfo::mutable_virtualizationrole() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.HostInfo.VirtualizationRole)
  return _internal_mutable_virtualizationrole();
}
inline const std::string& HostInfo::_internal_virtualizationrole() const {
  return virtualizationrole_.Get();
}
inline void HostInfo::_internal_set_virtualizationrole(const std::string& value) {
  
  virtualizationrole_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HostInfo::set_virtualizationrole(std::string&& value) {
  
  virtualizationrole_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.HostInfo.VirtualizationRole)
}
inline void HostInfo::set_virtualizationrole(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  virtualizationrole_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.HostInfo.VirtualizationRole)
}
inline void HostInfo::set_virtualizationrole(const char* value,
    size_t size) {
  
  virtualizationrole_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.HostInfo.VirtualizationRole)
}
inline std::string* HostInfo::_internal_mutable_virtualizationrole() {
  
  return virtualizationrole_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HostInfo::release_virtualizationrole() {
  // @@protoc_insertion_point(field_release:cedana.services.task.HostInfo.VirtualizationRole)
  return virtualizationrole_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HostInfo::set_allocated_virtualizationrole(std::string* virtualizationrole) {
  if (virtualizationrole != nullptr) {
    
  } else {
    
  }
  virtualizationrole_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), virtualizationrole,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.HostInfo.VirtualizationRole)
}
inline std::string* HostInfo::unsafe_arena_release_virtualizationrole() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.HostInfo.VirtualizationRole)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return virtualizationrole_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HostInfo::unsafe_arena_set_allocated_virtualizationrole(
    std::string* virtualizationrole) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (virtualizationrole != nullptr) {
    
  } else {
    
  }
  virtualizationrole_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      virtualizationrole, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.HostInfo.VirtualizationRole)
}

// -------------------------------------------------------------------

// CPUInfo

// int32 Count = 1[json_name = "Count"];
inline void CPUInfo::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPUInfo::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPUInfo::count() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CPUInfo.Count)
  return _internal_count();
}
inline void CPUInfo::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void CPUInfo::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CPUInfo.Count)
}

// int32 CPU = 2[json_name = "CPU"];
inline void CPUInfo::clear_cpu() {
  cpu_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPUInfo::_internal_cpu() const {
  return cpu_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPUInfo::cpu() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CPUInfo.CPU)
  return _internal_cpu();
}
inline void CPUInfo::_internal_set_cpu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cpu_ = value;
}
inline void CPUInfo::set_cpu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cpu(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CPUInfo.CPU)
}

// string VendorID = 3[json_name = "VendorID"];
inline void CPUInfo::clear_vendorid() {
  vendorid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CPUInfo::vendorid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CPUInfo.VendorID)
  return _internal_vendorid();
}
inline void CPUInfo::set_vendorid(const std::string& value) {
  _internal_set_vendorid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CPUInfo.VendorID)
}
inline std::string* CPUInfo::mutable_vendorid() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.CPUInfo.VendorID)
  return _internal_mutable_vendorid();
}
inline const std::string& CPUInfo::_internal_vendorid() const {
  return vendorid_.Get();
}
inline void CPUInfo::_internal_set_vendorid(const std::string& value) {
  
  vendorid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CPUInfo::set_vendorid(std::string&& value) {
  
  vendorid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.CPUInfo.VendorID)
}
inline void CPUInfo::set_vendorid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vendorid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.CPUInfo.VendorID)
}
inline void CPUInfo::set_vendorid(const char* value,
    size_t size) {
  
  vendorid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.CPUInfo.VendorID)
}
inline std::string* CPUInfo::_internal_mutable_vendorid() {
  
  return vendorid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CPUInfo::release_vendorid() {
  // @@protoc_insertion_point(field_release:cedana.services.task.CPUInfo.VendorID)
  return vendorid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CPUInfo::set_allocated_vendorid(std::string* vendorid) {
  if (vendorid != nullptr) {
    
  } else {
    
  }
  vendorid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendorid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.CPUInfo.VendorID)
}
inline std::string* CPUInfo::unsafe_arena_release_vendorid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.CPUInfo.VendorID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return vendorid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CPUInfo::unsafe_arena_set_allocated_vendorid(
    std::string* vendorid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (vendorid != nullptr) {
    
  } else {
    
  }
  vendorid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      vendorid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.CPUInfo.VendorID)
}

// string Family = 4[json_name = "Family"];
inline void CPUInfo::clear_family() {
  family_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CPUInfo::family() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CPUInfo.Family)
  return _internal_family();
}
inline void CPUInfo::set_family(const std::string& value) {
  _internal_set_family(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CPUInfo.Family)
}
inline std::string* CPUInfo::mutable_family() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.CPUInfo.Family)
  return _internal_mutable_family();
}
inline const std::string& CPUInfo::_internal_family() const {
  return family_.Get();
}
inline void CPUInfo::_internal_set_family(const std::string& value) {
  
  family_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CPUInfo::set_family(std::string&& value) {
  
  family_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.CPUInfo.Family)
}
inline void CPUInfo::set_family(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  family_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.CPUInfo.Family)
}
inline void CPUInfo::set_family(const char* value,
    size_t size) {
  
  family_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.CPUInfo.Family)
}
inline std::string* CPUInfo::_internal_mutable_family() {
  
  return family_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CPUInfo::release_family() {
  // @@protoc_insertion_point(field_release:cedana.services.task.CPUInfo.Family)
  return family_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CPUInfo::set_allocated_family(std::string* family) {
  if (family != nullptr) {
    
  } else {
    
  }
  family_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), family,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.CPUInfo.Family)
}
inline std::string* CPUInfo::unsafe_arena_release_family() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.CPUInfo.Family)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return family_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CPUInfo::unsafe_arena_set_allocated_family(
    std::string* family) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (family != nullptr) {
    
  } else {
    
  }
  family_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      family, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.CPUInfo.Family)
}

// string PhysicalID = 5[json_name = "PhysicalID"];
inline void CPUInfo::clear_physicalid() {
  physicalid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CPUInfo::physicalid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CPUInfo.PhysicalID)
  return _internal_physicalid();
}
inline void CPUInfo::set_physicalid(const std::string& value) {
  _internal_set_physicalid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CPUInfo.PhysicalID)
}
inline std::string* CPUInfo::mutable_physicalid() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.CPUInfo.PhysicalID)
  return _internal_mutable_physicalid();
}
inline const std::string& CPUInfo::_internal_physicalid() const {
  return physicalid_.Get();
}
inline void CPUInfo::_internal_set_physicalid(const std::string& value) {
  
  physicalid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CPUInfo::set_physicalid(std::string&& value) {
  
  physicalid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.CPUInfo.PhysicalID)
}
inline void CPUInfo::set_physicalid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  physicalid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.CPUInfo.PhysicalID)
}
inline void CPUInfo::set_physicalid(const char* value,
    size_t size) {
  
  physicalid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.CPUInfo.PhysicalID)
}
inline std::string* CPUInfo::_internal_mutable_physicalid() {
  
  return physicalid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CPUInfo::release_physicalid() {
  // @@protoc_insertion_point(field_release:cedana.services.task.CPUInfo.PhysicalID)
  return physicalid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CPUInfo::set_allocated_physicalid(std::string* physicalid) {
  if (physicalid != nullptr) {
    
  } else {
    
  }
  physicalid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), physicalid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.CPUInfo.PhysicalID)
}
inline std::string* CPUInfo::unsafe_arena_release_physicalid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.CPUInfo.PhysicalID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return physicalid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CPUInfo::unsafe_arena_set_allocated_physicalid(
    std::string* physicalid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (physicalid != nullptr) {
    
  } else {
    
  }
  physicalid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      physicalid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.CPUInfo.PhysicalID)
}

// -------------------------------------------------------------------

// MemoryInfo

// uint64 Total = 1[json_name = "Total"];
inline void MemoryInfo::clear_total() {
  total_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryInfo::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryInfo::total() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.MemoryInfo.Total)
  return _internal_total();
}
inline void MemoryInfo::_internal_set_total(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  total_ = value;
}
inline void MemoryInfo::set_total(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.MemoryInfo.Total)
}

// uint64 Available = 2[json_name = "Available"];
inline void MemoryInfo::clear_available() {
  available_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryInfo::_internal_available() const {
  return available_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryInfo::available() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.MemoryInfo.Available)
  return _internal_available();
}
inline void MemoryInfo::_internal_set_available(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  available_ = value;
}
inline void MemoryInfo::set_available(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_available(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.MemoryInfo.Available)
}

// uint64 Used = 3[json_name = "Used"];
inline void MemoryInfo::clear_used() {
  used_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryInfo::_internal_used() const {
  return used_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryInfo::used() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.MemoryInfo.Used)
  return _internal_used();
}
inline void MemoryInfo::_internal_set_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  used_ = value;
}
inline void MemoryInfo::set_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_used(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.MemoryInfo.Used)
}

// -------------------------------------------------------------------

// OpenFilesStat

// string Path = 1[json_name = "Path"];
inline void OpenFilesStat::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OpenFilesStat::path() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.OpenFilesStat.Path)
  return _internal_path();
}
inline void OpenFilesStat::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.OpenFilesStat.Path)
}
inline std::string* OpenFilesStat::mutable_path() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.OpenFilesStat.Path)
  return _internal_mutable_path();
}
inline const std::string& OpenFilesStat::_internal_path() const {
  return path_.Get();
}
inline void OpenFilesStat::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OpenFilesStat::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.OpenFilesStat.Path)
}
inline void OpenFilesStat::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.OpenFilesStat.Path)
}
inline void OpenFilesStat::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.OpenFilesStat.Path)
}
inline std::string* OpenFilesStat::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OpenFilesStat::release_path() {
  // @@protoc_insertion_point(field_release:cedana.services.task.OpenFilesStat.Path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpenFilesStat::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.OpenFilesStat.Path)
}
inline std::string* OpenFilesStat::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.OpenFilesStat.Path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OpenFilesStat::unsafe_arena_set_allocated_path(
    std::string* path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (path != nullptr) {
    
  } else {
    
  }
  path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.OpenFilesStat.Path)
}

// uint64 Fd = 2[json_name = "Fd"];
inline void OpenFilesStat::clear_fd() {
  fd_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpenFilesStat::_internal_fd() const {
  return fd_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpenFilesStat::fd() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.OpenFilesStat.Fd)
  return _internal_fd();
}
inline void OpenFilesStat::_internal_set_fd(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  fd_ = value;
}
inline void OpenFilesStat::set_fd(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.OpenFilesStat.Fd)
}

// string Mode = 3[json_name = "Mode"];
inline void OpenFilesStat::clear_mode() {
  mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OpenFilesStat::mode() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.OpenFilesStat.Mode)
  return _internal_mode();
}
inline void OpenFilesStat::set_mode(const std::string& value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.OpenFilesStat.Mode)
}
inline std::string* OpenFilesStat::mutable_mode() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.OpenFilesStat.Mode)
  return _internal_mutable_mode();
}
inline const std::string& OpenFilesStat::_internal_mode() const {
  return mode_.Get();
}
inline void OpenFilesStat::_internal_set_mode(const std::string& value) {
  
  mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OpenFilesStat::set_mode(std::string&& value) {
  
  mode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.OpenFilesStat.Mode)
}
inline void OpenFilesStat::set_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.OpenFilesStat.Mode)
}
inline void OpenFilesStat::set_mode(const char* value,
    size_t size) {
  
  mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.OpenFilesStat.Mode)
}
inline std::string* OpenFilesStat::_internal_mutable_mode() {
  
  return mode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OpenFilesStat::release_mode() {
  // @@protoc_insertion_point(field_release:cedana.services.task.OpenFilesStat.Mode)
  return mode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpenFilesStat::set_allocated_mode(std::string* mode) {
  if (mode != nullptr) {
    
  } else {
    
  }
  mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.OpenFilesStat.Mode)
}
inline std::string* OpenFilesStat::unsafe_arena_release_mode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.OpenFilesStat.Mode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OpenFilesStat::unsafe_arena_set_allocated_mode(
    std::string* mode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mode != nullptr) {
    
  } else {
    
  }
  mode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.OpenFilesStat.Mode)
}

// .cedana.services.task.OpenFilesStat.StreamType Stream = 5[json_name = "Stream"];
inline void OpenFilesStat::clear_stream() {
  stream_ = 0;
}
inline ::cedana::services::task::OpenFilesStat_StreamType OpenFilesStat::_internal_stream() const {
  return static_cast< ::cedana::services::task::OpenFilesStat_StreamType >(stream_);
}
inline ::cedana::services::task::OpenFilesStat_StreamType OpenFilesStat::stream() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.OpenFilesStat.Stream)
  return _internal_stream();
}
inline void OpenFilesStat::_internal_set_stream(::cedana::services::task::OpenFilesStat_StreamType value) {
  
  stream_ = value;
}
inline void OpenFilesStat::set_stream(::cedana::services::task::OpenFilesStat_StreamType value) {
  _internal_set_stream(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.OpenFilesStat.Stream)
}

// -------------------------------------------------------------------

// ConnectionStat

// uint32 Fd = 1[json_name = "Fd"];
inline void ConnectionStat::clear_fd() {
  fd_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConnectionStat::_internal_fd() const {
  return fd_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConnectionStat::fd() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ConnectionStat.Fd)
  return _internal_fd();
}
inline void ConnectionStat::_internal_set_fd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fd_ = value;
}
inline void ConnectionStat::set_fd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ConnectionStat.Fd)
}

// uint32 Family = 2[json_name = "Family"];
inline void ConnectionStat::clear_family() {
  family_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConnectionStat::_internal_family() const {
  return family_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConnectionStat::family() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ConnectionStat.Family)
  return _internal_family();
}
inline void ConnectionStat::_internal_set_family(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  family_ = value;
}
inline void ConnectionStat::set_family(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_family(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ConnectionStat.Family)
}

// uint32 Type = 3[json_name = "Type"];
inline void ConnectionStat::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConnectionStat::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConnectionStat::type() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ConnectionStat.Type)
  return _internal_type();
}
inline void ConnectionStat::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void ConnectionStat::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ConnectionStat.Type)
}

// .cedana.services.task.Addr Laddr = 4[json_name = "Laddr"];
inline bool ConnectionStat::_internal_has_laddr() const {
  return this != internal_default_instance() && laddr_ != nullptr;
}
inline bool ConnectionStat::has_laddr() const {
  return _internal_has_laddr();
}
inline void ConnectionStat::clear_laddr() {
  if (GetArena() == nullptr && laddr_ != nullptr) {
    delete laddr_;
  }
  laddr_ = nullptr;
}
inline const ::cedana::services::task::Addr& ConnectionStat::_internal_laddr() const {
  const ::cedana::services::task::Addr* p = laddr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cedana::services::task::Addr*>(
      &::cedana::services::task::_Addr_default_instance_);
}
inline const ::cedana::services::task::Addr& ConnectionStat::laddr() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ConnectionStat.Laddr)
  return _internal_laddr();
}
inline void ConnectionStat::unsafe_arena_set_allocated_laddr(
    ::cedana::services::task::Addr* laddr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(laddr_);
  }
  laddr_ = laddr;
  if (laddr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ConnectionStat.Laddr)
}
inline ::cedana::services::task::Addr* ConnectionStat::release_laddr() {
  auto temp = unsafe_arena_release_laddr();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cedana::services::task::Addr* ConnectionStat::unsafe_arena_release_laddr() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ConnectionStat.Laddr)
  
  ::cedana::services::task::Addr* temp = laddr_;
  laddr_ = nullptr;
  return temp;
}
inline ::cedana::services::task::Addr* ConnectionStat::_internal_mutable_laddr() {
  
  if (laddr_ == nullptr) {
    auto* p = CreateMaybeMessage<::cedana::services::task::Addr>(GetArena());
    laddr_ = p;
  }
  return laddr_;
}
inline ::cedana::services::task::Addr* ConnectionStat::mutable_laddr() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ConnectionStat.Laddr)
  return _internal_mutable_laddr();
}
inline void ConnectionStat::set_allocated_laddr(::cedana::services::task::Addr* laddr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete laddr_;
  }
  if (laddr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(laddr);
    if (message_arena != submessage_arena) {
      laddr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, laddr, submessage_arena);
    }
    
  } else {
    
  }
  laddr_ = laddr;
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ConnectionStat.Laddr)
}

// .cedana.services.task.Addr Raddr = 5[json_name = "Raddr"];
inline bool ConnectionStat::_internal_has_raddr() const {
  return this != internal_default_instance() && raddr_ != nullptr;
}
inline bool ConnectionStat::has_raddr() const {
  return _internal_has_raddr();
}
inline void ConnectionStat::clear_raddr() {
  if (GetArena() == nullptr && raddr_ != nullptr) {
    delete raddr_;
  }
  raddr_ = nullptr;
}
inline const ::cedana::services::task::Addr& ConnectionStat::_internal_raddr() const {
  const ::cedana::services::task::Addr* p = raddr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cedana::services::task::Addr*>(
      &::cedana::services::task::_Addr_default_instance_);
}
inline const ::cedana::services::task::Addr& ConnectionStat::raddr() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ConnectionStat.Raddr)
  return _internal_raddr();
}
inline void ConnectionStat::unsafe_arena_set_allocated_raddr(
    ::cedana::services::task::Addr* raddr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(raddr_);
  }
  raddr_ = raddr;
  if (raddr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ConnectionStat.Raddr)
}
inline ::cedana::services::task::Addr* ConnectionStat::release_raddr() {
  auto temp = unsafe_arena_release_raddr();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cedana::services::task::Addr* ConnectionStat::unsafe_arena_release_raddr() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ConnectionStat.Raddr)
  
  ::cedana::services::task::Addr* temp = raddr_;
  raddr_ = nullptr;
  return temp;
}
inline ::cedana::services::task::Addr* ConnectionStat::_internal_mutable_raddr() {
  
  if (raddr_ == nullptr) {
    auto* p = CreateMaybeMessage<::cedana::services::task::Addr>(GetArena());
    raddr_ = p;
  }
  return raddr_;
}
inline ::cedana::services::task::Addr* ConnectionStat::mutable_raddr() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ConnectionStat.Raddr)
  return _internal_mutable_raddr();
}
inline void ConnectionStat::set_allocated_raddr(::cedana::services::task::Addr* raddr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete raddr_;
  }
  if (raddr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(raddr);
    if (message_arena != submessage_arena) {
      raddr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raddr, submessage_arena);
    }
    
  } else {
    
  }
  raddr_ = raddr;
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ConnectionStat.Raddr)
}

// string Status = 6[json_name = "Status"];
inline void ConnectionStat::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConnectionStat::status() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ConnectionStat.Status)
  return _internal_status();
}
inline void ConnectionStat::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ConnectionStat.Status)
}
inline std::string* ConnectionStat::mutable_status() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ConnectionStat.Status)
  return _internal_mutable_status();
}
inline const std::string& ConnectionStat::_internal_status() const {
  return status_.Get();
}
inline void ConnectionStat::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConnectionStat::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ConnectionStat.Status)
}
inline void ConnectionStat::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ConnectionStat.Status)
}
inline void ConnectionStat::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ConnectionStat.Status)
}
inline std::string* ConnectionStat::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConnectionStat::release_status() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ConnectionStat.Status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConnectionStat::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ConnectionStat.Status)
}
inline std::string* ConnectionStat::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ConnectionStat.Status)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return status_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConnectionStat::unsafe_arena_set_allocated_status(
    std::string* status) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (status != nullptr) {
    
  } else {
    
  }
  status_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      status, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ConnectionStat.Status)
}

// repeated int32 UIDs = 7[json_name = "UIDs"];
inline int ConnectionStat::_internal_uids_size() const {
  return uids_.size();
}
inline int ConnectionStat::uids_size() const {
  return _internal_uids_size();
}
inline void ConnectionStat::clear_uids() {
  uids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConnectionStat::_internal_uids(int index) const {
  return uids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConnectionStat::uids(int index) const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ConnectionStat.UIDs)
  return _internal_uids(index);
}
inline void ConnectionStat::set_uids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  uids_.Set(index, value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ConnectionStat.UIDs)
}
inline void ConnectionStat::_internal_add_uids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  uids_.Add(value);
}
inline void ConnectionStat::add_uids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_uids(value);
  // @@protoc_insertion_point(field_add:cedana.services.task.ConnectionStat.UIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ConnectionStat::_internal_uids() const {
  return uids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ConnectionStat::uids() const {
  // @@protoc_insertion_point(field_list:cedana.services.task.ConnectionStat.UIDs)
  return _internal_uids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ConnectionStat::_internal_mutable_uids() {
  return &uids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ConnectionStat::mutable_uids() {
  // @@protoc_insertion_point(field_mutable_list:cedana.services.task.ConnectionStat.UIDs)
  return _internal_mutable_uids();
}

// int32 PID = 8[json_name = "PID"];
inline void ConnectionStat::clear_pid() {
  pid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConnectionStat::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConnectionStat::pid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ConnectionStat.PID)
  return _internal_pid();
}
inline void ConnectionStat::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pid_ = value;
}
inline void ConnectionStat::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ConnectionStat.PID)
}

// -------------------------------------------------------------------

// Addr

// string IP = 1[json_name = "IP"];
inline void Addr::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Addr::ip() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.Addr.IP)
  return _internal_ip();
}
inline void Addr::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.Addr.IP)
}
inline std::string* Addr::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.Addr.IP)
  return _internal_mutable_ip();
}
inline const std::string& Addr::_internal_ip() const {
  return ip_.Get();
}
inline void Addr::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Addr::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.Addr.IP)
}
inline void Addr::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.Addr.IP)
}
inline void Addr::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.Addr.IP)
}
inline std::string* Addr::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Addr::release_ip() {
  // @@protoc_insertion_point(field_release:cedana.services.task.Addr.IP)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Addr::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.Addr.IP)
}
inline std::string* Addr::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.Addr.IP)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Addr::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.Addr.IP)
}

// uint32 Port = 2[json_name = "Port"];
inline void Addr::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Addr::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Addr::port() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.Addr.Port)
  return _internal_port();
}
inline void Addr::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void Addr::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.Addr.Port)
}

// -------------------------------------------------------------------

// ProcessStateStreamingArgs

// string JID = 1[json_name = "JID"];
inline void ProcessStateStreamingArgs::clear_jid() {
  jid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProcessStateStreamingArgs::jid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.ProcessStateStreamingArgs.JID)
  return _internal_jid();
}
inline void ProcessStateStreamingArgs::set_jid(const std::string& value) {
  _internal_set_jid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.ProcessStateStreamingArgs.JID)
}
inline std::string* ProcessStateStreamingArgs::mutable_jid() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.ProcessStateStreamingArgs.JID)
  return _internal_mutable_jid();
}
inline const std::string& ProcessStateStreamingArgs::_internal_jid() const {
  return jid_.Get();
}
inline void ProcessStateStreamingArgs::_internal_set_jid(const std::string& value) {
  
  jid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProcessStateStreamingArgs::set_jid(std::string&& value) {
  
  jid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.ProcessStateStreamingArgs.JID)
}
inline void ProcessStateStreamingArgs::set_jid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  jid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.ProcessStateStreamingArgs.JID)
}
inline void ProcessStateStreamingArgs::set_jid(const char* value,
    size_t size) {
  
  jid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.ProcessStateStreamingArgs.JID)
}
inline std::string* ProcessStateStreamingArgs::_internal_mutable_jid() {
  
  return jid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProcessStateStreamingArgs::release_jid() {
  // @@protoc_insertion_point(field_release:cedana.services.task.ProcessStateStreamingArgs.JID)
  return jid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProcessStateStreamingArgs::set_allocated_jid(std::string* jid) {
  if (jid != nullptr) {
    
  } else {
    
  }
  jid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.ProcessStateStreamingArgs.JID)
}
inline std::string* ProcessStateStreamingArgs::unsafe_arena_release_jid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.ProcessStateStreamingArgs.JID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return jid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProcessStateStreamingArgs::unsafe_arena_set_allocated_jid(
    std::string* jid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (jid != nullptr) {
    
  } else {
    
  }
  jid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      jid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.ProcessStateStreamingArgs.JID)
}

// -------------------------------------------------------------------

// CheckpointReason

// .cedana.services.task.CheckpointReason.CheckpointReasonEnum Reason = 1[json_name = "Reason"];
inline void CheckpointReason::clear_reason() {
  reason_ = 0;
}
inline ::cedana::services::task::CheckpointReason_CheckpointReasonEnum CheckpointReason::_internal_reason() const {
  return static_cast< ::cedana::services::task::CheckpointReason_CheckpointReasonEnum >(reason_);
}
inline ::cedana::services::task::CheckpointReason_CheckpointReasonEnum CheckpointReason::reason() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.CheckpointReason.Reason)
  return _internal_reason();
}
inline void CheckpointReason::_internal_set_reason(::cedana::services::task::CheckpointReason_CheckpointReasonEnum value) {
  
  reason_ = value;
}
inline void CheckpointReason::set_reason(::cedana::services::task::CheckpointReason_CheckpointReasonEnum value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.CheckpointReason.Reason)
}

// -------------------------------------------------------------------

// StartAttachArgs

// .cedana.services.task.StartArgs Args = 1[json_name = "Args"];
inline bool StartAttachArgs::_internal_has_args() const {
  return this != internal_default_instance() && args_ != nullptr;
}
inline bool StartAttachArgs::has_args() const {
  return _internal_has_args();
}
inline void StartAttachArgs::clear_args() {
  if (GetArena() == nullptr && args_ != nullptr) {
    delete args_;
  }
  args_ = nullptr;
}
inline const ::cedana::services::task::StartArgs& StartAttachArgs::_internal_args() const {
  const ::cedana::services::task::StartArgs* p = args_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cedana::services::task::StartArgs*>(
      &::cedana::services::task::_StartArgs_default_instance_);
}
inline const ::cedana::services::task::StartArgs& StartAttachArgs::args() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.StartAttachArgs.Args)
  return _internal_args();
}
inline void StartAttachArgs::unsafe_arena_set_allocated_args(
    ::cedana::services::task::StartArgs* args) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(args_);
  }
  args_ = args;
  if (args) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.StartAttachArgs.Args)
}
inline ::cedana::services::task::StartArgs* StartAttachArgs::release_args() {
  auto temp = unsafe_arena_release_args();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cedana::services::task::StartArgs* StartAttachArgs::unsafe_arena_release_args() {
  // @@protoc_insertion_point(field_release:cedana.services.task.StartAttachArgs.Args)
  
  ::cedana::services::task::StartArgs* temp = args_;
  args_ = nullptr;
  return temp;
}
inline ::cedana::services::task::StartArgs* StartAttachArgs::_internal_mutable_args() {
  
  if (args_ == nullptr) {
    auto* p = CreateMaybeMessage<::cedana::services::task::StartArgs>(GetArena());
    args_ = p;
  }
  return args_;
}
inline ::cedana::services::task::StartArgs* StartAttachArgs::mutable_args() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.StartAttachArgs.Args)
  return _internal_mutable_args();
}
inline void StartAttachArgs::set_allocated_args(::cedana::services::task::StartArgs* args) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete args_;
  }
  if (args) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(args);
    if (message_arena != submessage_arena) {
      args = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, args, submessage_arena);
    }
    
  } else {
    
  }
  args_ = args;
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.StartAttachArgs.Args)
}

// string Stdin = 2[json_name = "Stdin"];
inline void StartAttachArgs::clear_stdin() {
  stdin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartAttachArgs::stdin() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.StartAttachArgs.Stdin)
  return _internal_stdin();
}
inline void StartAttachArgs::set_stdin(const std::string& value) {
  _internal_set_stdin(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.StartAttachArgs.Stdin)
}
inline std::string* StartAttachArgs::mutable_stdin() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.StartAttachArgs.Stdin)
  return _internal_mutable_stdin();
}
inline const std::string& StartAttachArgs::_internal_stdin() const {
  return stdin_.Get();
}
inline void StartAttachArgs::_internal_set_stdin(const std::string& value) {
  
  stdin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartAttachArgs::set_stdin(std::string&& value) {
  
  stdin_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.StartAttachArgs.Stdin)
}
inline void StartAttachArgs::set_stdin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stdin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.StartAttachArgs.Stdin)
}
inline void StartAttachArgs::set_stdin(const char* value,
    size_t size) {
  
  stdin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.StartAttachArgs.Stdin)
}
inline std::string* StartAttachArgs::_internal_mutable_stdin() {
  
  return stdin_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartAttachArgs::release_stdin() {
  // @@protoc_insertion_point(field_release:cedana.services.task.StartAttachArgs.Stdin)
  return stdin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartAttachArgs::set_allocated_stdin(std::string* stdin) {
  if (stdin != nullptr) {
    
  } else {
    
  }
  stdin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stdin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.StartAttachArgs.Stdin)
}
inline std::string* StartAttachArgs::unsafe_arena_release_stdin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.StartAttachArgs.Stdin)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stdin_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartAttachArgs::unsafe_arena_set_allocated_stdin(
    std::string* stdin) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stdin != nullptr) {
    
  } else {
    
  }
  stdin_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stdin, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.StartAttachArgs.Stdin)
}

// -------------------------------------------------------------------

// StartAttachResp

// string Stdout = 1[json_name = "Stdout"];
inline void StartAttachResp::clear_stdout() {
  stdout_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartAttachResp::stdout() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.StartAttachResp.Stdout)
  return _internal_stdout();
}
inline void StartAttachResp::set_stdout(const std::string& value) {
  _internal_set_stdout(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.StartAttachResp.Stdout)
}
inline std::string* StartAttachResp::mutable_stdout() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.StartAttachResp.Stdout)
  return _internal_mutable_stdout();
}
inline const std::string& StartAttachResp::_internal_stdout() const {
  return stdout_.Get();
}
inline void StartAttachResp::_internal_set_stdout(const std::string& value) {
  
  stdout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartAttachResp::set_stdout(std::string&& value) {
  
  stdout_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.StartAttachResp.Stdout)
}
inline void StartAttachResp::set_stdout(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stdout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.StartAttachResp.Stdout)
}
inline void StartAttachResp::set_stdout(const char* value,
    size_t size) {
  
  stdout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.StartAttachResp.Stdout)
}
inline std::string* StartAttachResp::_internal_mutable_stdout() {
  
  return stdout_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartAttachResp::release_stdout() {
  // @@protoc_insertion_point(field_release:cedana.services.task.StartAttachResp.Stdout)
  return stdout_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartAttachResp::set_allocated_stdout(std::string* stdout) {
  if (stdout != nullptr) {
    
  } else {
    
  }
  stdout_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stdout,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.StartAttachResp.Stdout)
}
inline std::string* StartAttachResp::unsafe_arena_release_stdout() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.StartAttachResp.Stdout)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stdout_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartAttachResp::unsafe_arena_set_allocated_stdout(
    std::string* stdout) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stdout != nullptr) {
    
  } else {
    
  }
  stdout_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stdout, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.StartAttachResp.Stdout)
}

// string Stderr = 2[json_name = "Stderr"];
inline void StartAttachResp::clear_stderr() {
  stderr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartAttachResp::stderr() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.StartAttachResp.Stderr)
  return _internal_stderr();
}
inline void StartAttachResp::set_stderr(const std::string& value) {
  _internal_set_stderr(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.StartAttachResp.Stderr)
}
inline std::string* StartAttachResp::mutable_stderr() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.StartAttachResp.Stderr)
  return _internal_mutable_stderr();
}
inline const std::string& StartAttachResp::_internal_stderr() const {
  return stderr_.Get();
}
inline void StartAttachResp::_internal_set_stderr(const std::string& value) {
  
  stderr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartAttachResp::set_stderr(std::string&& value) {
  
  stderr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.StartAttachResp.Stderr)
}
inline void StartAttachResp::set_stderr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stderr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.StartAttachResp.Stderr)
}
inline void StartAttachResp::set_stderr(const char* value,
    size_t size) {
  
  stderr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.StartAttachResp.Stderr)
}
inline std::string* StartAttachResp::_internal_mutable_stderr() {
  
  return stderr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartAttachResp::release_stderr() {
  // @@protoc_insertion_point(field_release:cedana.services.task.StartAttachResp.Stderr)
  return stderr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartAttachResp::set_allocated_stderr(std::string* stderr) {
  if (stderr != nullptr) {
    
  } else {
    
  }
  stderr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stderr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.StartAttachResp.Stderr)
}
inline std::string* StartAttachResp::unsafe_arena_release_stderr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.StartAttachResp.Stderr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stderr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartAttachResp::unsafe_arena_set_allocated_stderr(
    std::string* stderr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stderr != nullptr) {
    
  } else {
    
  }
  stderr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stderr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.StartAttachResp.Stderr)
}

// int32 ExitCode = 3[json_name = "ExitCode"];
inline void StartAttachResp::clear_exitcode() {
  exitcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartAttachResp::_internal_exitcode() const {
  return exitcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartAttachResp::exitcode() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.StartAttachResp.ExitCode)
  return _internal_exitcode();
}
inline void StartAttachResp::_internal_set_exitcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exitcode_ = value;
}
inline void StartAttachResp::set_exitcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_exitcode(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.StartAttachResp.ExitCode)
}

// -------------------------------------------------------------------

// RestoreAttachArgs

// .cedana.services.task.RestoreArgs Args = 1[json_name = "Args"];
inline bool RestoreAttachArgs::_internal_has_args() const {
  return this != internal_default_instance() && args_ != nullptr;
}
inline bool RestoreAttachArgs::has_args() const {
  return _internal_has_args();
}
inline void RestoreAttachArgs::clear_args() {
  if (GetArena() == nullptr && args_ != nullptr) {
    delete args_;
  }
  args_ = nullptr;
}
inline const ::cedana::services::task::RestoreArgs& RestoreAttachArgs::_internal_args() const {
  const ::cedana::services::task::RestoreArgs* p = args_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cedana::services::task::RestoreArgs*>(
      &::cedana::services::task::_RestoreArgs_default_instance_);
}
inline const ::cedana::services::task::RestoreArgs& RestoreAttachArgs::args() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RestoreAttachArgs.Args)
  return _internal_args();
}
inline void RestoreAttachArgs::unsafe_arena_set_allocated_args(
    ::cedana::services::task::RestoreArgs* args) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(args_);
  }
  args_ = args;
  if (args) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RestoreAttachArgs.Args)
}
inline ::cedana::services::task::RestoreArgs* RestoreAttachArgs::release_args() {
  auto temp = unsafe_arena_release_args();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cedana::services::task::RestoreArgs* RestoreAttachArgs::unsafe_arena_release_args() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RestoreAttachArgs.Args)
  
  ::cedana::services::task::RestoreArgs* temp = args_;
  args_ = nullptr;
  return temp;
}
inline ::cedana::services::task::RestoreArgs* RestoreAttachArgs::_internal_mutable_args() {
  
  if (args_ == nullptr) {
    auto* p = CreateMaybeMessage<::cedana::services::task::RestoreArgs>(GetArena());
    args_ = p;
  }
  return args_;
}
inline ::cedana::services::task::RestoreArgs* RestoreAttachArgs::mutable_args() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RestoreAttachArgs.Args)
  return _internal_mutable_args();
}
inline void RestoreAttachArgs::set_allocated_args(::cedana::services::task::RestoreArgs* args) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete args_;
  }
  if (args) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(args);
    if (message_arena != submessage_arena) {
      args = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, args, submessage_arena);
    }
    
  } else {
    
  }
  args_ = args;
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RestoreAttachArgs.Args)
}

// string Stdin = 2[json_name = "Stdin"];
inline void RestoreAttachArgs::clear_stdin() {
  stdin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RestoreAttachArgs::stdin() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RestoreAttachArgs.Stdin)
  return _internal_stdin();
}
inline void RestoreAttachArgs::set_stdin(const std::string& value) {
  _internal_set_stdin(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RestoreAttachArgs.Stdin)
}
inline std::string* RestoreAttachArgs::mutable_stdin() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RestoreAttachArgs.Stdin)
  return _internal_mutable_stdin();
}
inline const std::string& RestoreAttachArgs::_internal_stdin() const {
  return stdin_.Get();
}
inline void RestoreAttachArgs::_internal_set_stdin(const std::string& value) {
  
  stdin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RestoreAttachArgs::set_stdin(std::string&& value) {
  
  stdin_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RestoreAttachArgs.Stdin)
}
inline void RestoreAttachArgs::set_stdin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stdin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RestoreAttachArgs.Stdin)
}
inline void RestoreAttachArgs::set_stdin(const char* value,
    size_t size) {
  
  stdin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RestoreAttachArgs.Stdin)
}
inline std::string* RestoreAttachArgs::_internal_mutable_stdin() {
  
  return stdin_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RestoreAttachArgs::release_stdin() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RestoreAttachArgs.Stdin)
  return stdin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RestoreAttachArgs::set_allocated_stdin(std::string* stdin) {
  if (stdin != nullptr) {
    
  } else {
    
  }
  stdin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stdin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RestoreAttachArgs.Stdin)
}
inline std::string* RestoreAttachArgs::unsafe_arena_release_stdin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RestoreAttachArgs.Stdin)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stdin_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RestoreAttachArgs::unsafe_arena_set_allocated_stdin(
    std::string* stdin) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stdin != nullptr) {
    
  } else {
    
  }
  stdin_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stdin, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RestoreAttachArgs.Stdin)
}

// -------------------------------------------------------------------

// RestoreAttachResp

// string Stdout = 1[json_name = "Stdout"];
inline void RestoreAttachResp::clear_stdout() {
  stdout_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RestoreAttachResp::stdout() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RestoreAttachResp.Stdout)
  return _internal_stdout();
}
inline void RestoreAttachResp::set_stdout(const std::string& value) {
  _internal_set_stdout(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RestoreAttachResp.Stdout)
}
inline std::string* RestoreAttachResp::mutable_stdout() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RestoreAttachResp.Stdout)
  return _internal_mutable_stdout();
}
inline const std::string& RestoreAttachResp::_internal_stdout() const {
  return stdout_.Get();
}
inline void RestoreAttachResp::_internal_set_stdout(const std::string& value) {
  
  stdout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RestoreAttachResp::set_stdout(std::string&& value) {
  
  stdout_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RestoreAttachResp.Stdout)
}
inline void RestoreAttachResp::set_stdout(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stdout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RestoreAttachResp.Stdout)
}
inline void RestoreAttachResp::set_stdout(const char* value,
    size_t size) {
  
  stdout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RestoreAttachResp.Stdout)
}
inline std::string* RestoreAttachResp::_internal_mutable_stdout() {
  
  return stdout_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RestoreAttachResp::release_stdout() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RestoreAttachResp.Stdout)
  return stdout_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RestoreAttachResp::set_allocated_stdout(std::string* stdout) {
  if (stdout != nullptr) {
    
  } else {
    
  }
  stdout_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stdout,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RestoreAttachResp.Stdout)
}
inline std::string* RestoreAttachResp::unsafe_arena_release_stdout() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RestoreAttachResp.Stdout)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stdout_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RestoreAttachResp::unsafe_arena_set_allocated_stdout(
    std::string* stdout) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stdout != nullptr) {
    
  } else {
    
  }
  stdout_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stdout, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RestoreAttachResp.Stdout)
}

// string Stderr = 2[json_name = "Stderr"];
inline void RestoreAttachResp::clear_stderr() {
  stderr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RestoreAttachResp::stderr() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RestoreAttachResp.Stderr)
  return _internal_stderr();
}
inline void RestoreAttachResp::set_stderr(const std::string& value) {
  _internal_set_stderr(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RestoreAttachResp.Stderr)
}
inline std::string* RestoreAttachResp::mutable_stderr() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.RestoreAttachResp.Stderr)
  return _internal_mutable_stderr();
}
inline const std::string& RestoreAttachResp::_internal_stderr() const {
  return stderr_.Get();
}
inline void RestoreAttachResp::_internal_set_stderr(const std::string& value) {
  
  stderr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RestoreAttachResp::set_stderr(std::string&& value) {
  
  stderr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.RestoreAttachResp.Stderr)
}
inline void RestoreAttachResp::set_stderr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stderr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.RestoreAttachResp.Stderr)
}
inline void RestoreAttachResp::set_stderr(const char* value,
    size_t size) {
  
  stderr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.RestoreAttachResp.Stderr)
}
inline std::string* RestoreAttachResp::_internal_mutable_stderr() {
  
  return stderr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RestoreAttachResp::release_stderr() {
  // @@protoc_insertion_point(field_release:cedana.services.task.RestoreAttachResp.Stderr)
  return stderr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RestoreAttachResp::set_allocated_stderr(std::string* stderr) {
  if (stderr != nullptr) {
    
  } else {
    
  }
  stderr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stderr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.RestoreAttachResp.Stderr)
}
inline std::string* RestoreAttachResp::unsafe_arena_release_stderr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.RestoreAttachResp.Stderr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stderr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RestoreAttachResp::unsafe_arena_set_allocated_stderr(
    std::string* stderr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stderr != nullptr) {
    
  } else {
    
  }
  stderr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stderr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.RestoreAttachResp.Stderr)
}

// int32 ExitCode = 3[json_name = "ExitCode"];
inline void RestoreAttachResp::clear_exitcode() {
  exitcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RestoreAttachResp::_internal_exitcode() const {
  return exitcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RestoreAttachResp::exitcode() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.RestoreAttachResp.ExitCode)
  return _internal_exitcode();
}
inline void RestoreAttachResp::_internal_set_exitcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exitcode_ = value;
}
inline void RestoreAttachResp::set_exitcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_exitcode(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.RestoreAttachResp.ExitCode)
}

// -------------------------------------------------------------------

// DetailedHealthCheckRequest

// int32 UID = 1[json_name = "UID"];
inline void DetailedHealthCheckRequest::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetailedHealthCheckRequest::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetailedHealthCheckRequest::uid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.DetailedHealthCheckRequest.UID)
  return _internal_uid();
}
inline void DetailedHealthCheckRequest::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void DetailedHealthCheckRequest::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.DetailedHealthCheckRequest.UID)
}

// int32 GID = 2[json_name = "GID"];
inline void DetailedHealthCheckRequest::clear_gid() {
  gid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetailedHealthCheckRequest::_internal_gid() const {
  return gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetailedHealthCheckRequest::gid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.DetailedHealthCheckRequest.GID)
  return _internal_gid();
}
inline void DetailedHealthCheckRequest::_internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gid_ = value;
}
inline void DetailedHealthCheckRequest::set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.DetailedHealthCheckRequest.GID)
}

// repeated int32 Groups = 3[json_name = "Groups"];
inline int DetailedHealthCheckRequest::_internal_groups_size() const {
  return groups_.size();
}
inline int DetailedHealthCheckRequest::groups_size() const {
  return _internal_groups_size();
}
inline void DetailedHealthCheckRequest::clear_groups() {
  groups_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetailedHealthCheckRequest::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetailedHealthCheckRequest::groups(int index) const {
  // @@protoc_insertion_point(field_get:cedana.services.task.DetailedHealthCheckRequest.Groups)
  return _internal_groups(index);
}
inline void DetailedHealthCheckRequest::set_groups(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  groups_.Set(index, value);
  // @@protoc_insertion_point(field_set:cedana.services.task.DetailedHealthCheckRequest.Groups)
}
inline void DetailedHealthCheckRequest::_internal_add_groups(::PROTOBUF_NAMESPACE_ID::int32 value) {
  groups_.Add(value);
}
inline void DetailedHealthCheckRequest::add_groups(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_groups(value);
  // @@protoc_insertion_point(field_add:cedana.services.task.DetailedHealthCheckRequest.Groups)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DetailedHealthCheckRequest::_internal_groups() const {
  return groups_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DetailedHealthCheckRequest::groups() const {
  // @@protoc_insertion_point(field_list:cedana.services.task.DetailedHealthCheckRequest.Groups)
  return _internal_groups();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DetailedHealthCheckRequest::_internal_mutable_groups() {
  return &groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DetailedHealthCheckRequest::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:cedana.services.task.DetailedHealthCheckRequest.Groups)
  return _internal_mutable_groups();
}

// -------------------------------------------------------------------

// DetailedHealthCheckResponse

// .cedana.services.task.HealthCheckStats HealthCheckStats = 1[json_name = "HealthCheckStats"];
inline bool DetailedHealthCheckResponse::_internal_has_healthcheckstats() const {
  return this != internal_default_instance() && healthcheckstats_ != nullptr;
}
inline bool DetailedHealthCheckResponse::has_healthcheckstats() const {
  return _internal_has_healthcheckstats();
}
inline void DetailedHealthCheckResponse::clear_healthcheckstats() {
  if (GetArena() == nullptr && healthcheckstats_ != nullptr) {
    delete healthcheckstats_;
  }
  healthcheckstats_ = nullptr;
}
inline const ::cedana::services::task::HealthCheckStats& DetailedHealthCheckResponse::_internal_healthcheckstats() const {
  const ::cedana::services::task::HealthCheckStats* p = healthcheckstats_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cedana::services::task::HealthCheckStats*>(
      &::cedana::services::task::_HealthCheckStats_default_instance_);
}
inline const ::cedana::services::task::HealthCheckStats& DetailedHealthCheckResponse::healthcheckstats() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.DetailedHealthCheckResponse.HealthCheckStats)
  return _internal_healthcheckstats();
}
inline void DetailedHealthCheckResponse::unsafe_arena_set_allocated_healthcheckstats(
    ::cedana::services::task::HealthCheckStats* healthcheckstats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(healthcheckstats_);
  }
  healthcheckstats_ = healthcheckstats;
  if (healthcheckstats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.DetailedHealthCheckResponse.HealthCheckStats)
}
inline ::cedana::services::task::HealthCheckStats* DetailedHealthCheckResponse::release_healthcheckstats() {
  auto temp = unsafe_arena_release_healthcheckstats();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cedana::services::task::HealthCheckStats* DetailedHealthCheckResponse::unsafe_arena_release_healthcheckstats() {
  // @@protoc_insertion_point(field_release:cedana.services.task.DetailedHealthCheckResponse.HealthCheckStats)
  
  ::cedana::services::task::HealthCheckStats* temp = healthcheckstats_;
  healthcheckstats_ = nullptr;
  return temp;
}
inline ::cedana::services::task::HealthCheckStats* DetailedHealthCheckResponse::_internal_mutable_healthcheckstats() {
  
  if (healthcheckstats_ == nullptr) {
    auto* p = CreateMaybeMessage<::cedana::services::task::HealthCheckStats>(GetArena());
    healthcheckstats_ = p;
  }
  return healthcheckstats_;
}
inline ::cedana::services::task::HealthCheckStats* DetailedHealthCheckResponse::mutable_healthcheckstats() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.DetailedHealthCheckResponse.HealthCheckStats)
  return _internal_mutable_healthcheckstats();
}
inline void DetailedHealthCheckResponse::set_allocated_healthcheckstats(::cedana::services::task::HealthCheckStats* healthcheckstats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete healthcheckstats_;
  }
  if (healthcheckstats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(healthcheckstats);
    if (message_arena != submessage_arena) {
      healthcheckstats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, healthcheckstats, submessage_arena);
    }
    
  } else {
    
  }
  healthcheckstats_ = healthcheckstats;
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.DetailedHealthCheckResponse.HealthCheckStats)
}

// repeated string unhealthyReasons = 2[json_name = "unhealthyReasons"];
inline int DetailedHealthCheckResponse::_internal_unhealthyreasons_size() const {
  return unhealthyreasons_.size();
}
inline int DetailedHealthCheckResponse::unhealthyreasons_size() const {
  return _internal_unhealthyreasons_size();
}
inline void DetailedHealthCheckResponse::clear_unhealthyreasons() {
  unhealthyreasons_.Clear();
}
inline std::string* DetailedHealthCheckResponse::add_unhealthyreasons() {
  // @@protoc_insertion_point(field_add_mutable:cedana.services.task.DetailedHealthCheckResponse.unhealthyReasons)
  return _internal_add_unhealthyreasons();
}
inline const std::string& DetailedHealthCheckResponse::_internal_unhealthyreasons(int index) const {
  return unhealthyreasons_.Get(index);
}
inline const std::string& DetailedHealthCheckResponse::unhealthyreasons(int index) const {
  // @@protoc_insertion_point(field_get:cedana.services.task.DetailedHealthCheckResponse.unhealthyReasons)
  return _internal_unhealthyreasons(index);
}
inline std::string* DetailedHealthCheckResponse::mutable_unhealthyreasons(int index) {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.DetailedHealthCheckResponse.unhealthyReasons)
  return unhealthyreasons_.Mutable(index);
}
inline void DetailedHealthCheckResponse::set_unhealthyreasons(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:cedana.services.task.DetailedHealthCheckResponse.unhealthyReasons)
  unhealthyreasons_.Mutable(index)->assign(value);
}
inline void DetailedHealthCheckResponse::set_unhealthyreasons(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:cedana.services.task.DetailedHealthCheckResponse.unhealthyReasons)
  unhealthyreasons_.Mutable(index)->assign(std::move(value));
}
inline void DetailedHealthCheckResponse::set_unhealthyreasons(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  unhealthyreasons_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cedana.services.task.DetailedHealthCheckResponse.unhealthyReasons)
}
inline void DetailedHealthCheckResponse::set_unhealthyreasons(int index, const char* value, size_t size) {
  unhealthyreasons_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.DetailedHealthCheckResponse.unhealthyReasons)
}
inline std::string* DetailedHealthCheckResponse::_internal_add_unhealthyreasons() {
  return unhealthyreasons_.Add();
}
inline void DetailedHealthCheckResponse::add_unhealthyreasons(const std::string& value) {
  unhealthyreasons_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cedana.services.task.DetailedHealthCheckResponse.unhealthyReasons)
}
inline void DetailedHealthCheckResponse::add_unhealthyreasons(std::string&& value) {
  unhealthyreasons_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cedana.services.task.DetailedHealthCheckResponse.unhealthyReasons)
}
inline void DetailedHealthCheckResponse::add_unhealthyreasons(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  unhealthyreasons_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cedana.services.task.DetailedHealthCheckResponse.unhealthyReasons)
}
inline void DetailedHealthCheckResponse::add_unhealthyreasons(const char* value, size_t size) {
  unhealthyreasons_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cedana.services.task.DetailedHealthCheckResponse.unhealthyReasons)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DetailedHealthCheckResponse::unhealthyreasons() const {
  // @@protoc_insertion_point(field_list:cedana.services.task.DetailedHealthCheckResponse.unhealthyReasons)
  return unhealthyreasons_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DetailedHealthCheckResponse::mutable_unhealthyreasons() {
  // @@protoc_insertion_point(field_mutable_list:cedana.services.task.DetailedHealthCheckResponse.unhealthyReasons)
  return &unhealthyreasons_;
}

// -------------------------------------------------------------------

// HealthCheckStats

// string criuVersion = 1[json_name = "criuVersion"];
inline void HealthCheckStats::clear_criuversion() {
  criuversion_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HealthCheckStats::criuversion() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.HealthCheckStats.criuVersion)
  return _internal_criuversion();
}
inline void HealthCheckStats::set_criuversion(const std::string& value) {
  _internal_set_criuversion(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.HealthCheckStats.criuVersion)
}
inline std::string* HealthCheckStats::mutable_criuversion() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.HealthCheckStats.criuVersion)
  return _internal_mutable_criuversion();
}
inline const std::string& HealthCheckStats::_internal_criuversion() const {
  return criuversion_.Get();
}
inline void HealthCheckStats::_internal_set_criuversion(const std::string& value) {
  
  criuversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HealthCheckStats::set_criuversion(std::string&& value) {
  
  criuversion_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.HealthCheckStats.criuVersion)
}
inline void HealthCheckStats::set_criuversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  criuversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.HealthCheckStats.criuVersion)
}
inline void HealthCheckStats::set_criuversion(const char* value,
    size_t size) {
  
  criuversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.HealthCheckStats.criuVersion)
}
inline std::string* HealthCheckStats::_internal_mutable_criuversion() {
  
  return criuversion_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HealthCheckStats::release_criuversion() {
  // @@protoc_insertion_point(field_release:cedana.services.task.HealthCheckStats.criuVersion)
  return criuversion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HealthCheckStats::set_allocated_criuversion(std::string* criuversion) {
  if (criuversion != nullptr) {
    
  } else {
    
  }
  criuversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), criuversion,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.HealthCheckStats.criuVersion)
}
inline std::string* HealthCheckStats::unsafe_arena_release_criuversion() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.HealthCheckStats.criuVersion)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return criuversion_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HealthCheckStats::unsafe_arena_set_allocated_criuversion(
    std::string* criuversion) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (criuversion != nullptr) {
    
  } else {
    
  }
  criuversion_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      criuversion, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.HealthCheckStats.criuVersion)
}

// .cedanagpu.HealthCheckResponse GPUHealthCheck = 2[json_name = "GPUHealthCheck"];
inline bool HealthCheckStats::_internal_has_gpuhealthcheck() const {
  return this != internal_default_instance() && gpuhealthcheck_ != nullptr;
}
inline bool HealthCheckStats::has_gpuhealthcheck() const {
  return _internal_has_gpuhealthcheck();
}
inline const ::cedanagpu::HealthCheckResponse& HealthCheckStats::_internal_gpuhealthcheck() const {
  const ::cedanagpu::HealthCheckResponse* p = gpuhealthcheck_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cedanagpu::HealthCheckResponse*>(
      &::cedanagpu::_HealthCheckResponse_default_instance_);
}
inline const ::cedanagpu::HealthCheckResponse& HealthCheckStats::gpuhealthcheck() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.HealthCheckStats.GPUHealthCheck)
  return _internal_gpuhealthcheck();
}
inline void HealthCheckStats::unsafe_arena_set_allocated_gpuhealthcheck(
    ::cedanagpu::HealthCheckResponse* gpuhealthcheck) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gpuhealthcheck_);
  }
  gpuhealthcheck_ = gpuhealthcheck;
  if (gpuhealthcheck) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.HealthCheckStats.GPUHealthCheck)
}
inline ::cedanagpu::HealthCheckResponse* HealthCheckStats::release_gpuhealthcheck() {
  auto temp = unsafe_arena_release_gpuhealthcheck();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cedanagpu::HealthCheckResponse* HealthCheckStats::unsafe_arena_release_gpuhealthcheck() {
  // @@protoc_insertion_point(field_release:cedana.services.task.HealthCheckStats.GPUHealthCheck)
  
  ::cedanagpu::HealthCheckResponse* temp = gpuhealthcheck_;
  gpuhealthcheck_ = nullptr;
  return temp;
}
inline ::cedanagpu::HealthCheckResponse* HealthCheckStats::_internal_mutable_gpuhealthcheck() {
  
  if (gpuhealthcheck_ == nullptr) {
    auto* p = CreateMaybeMessage<::cedanagpu::HealthCheckResponse>(GetArena());
    gpuhealthcheck_ = p;
  }
  return gpuhealthcheck_;
}
inline ::cedanagpu::HealthCheckResponse* HealthCheckStats::mutable_gpuhealthcheck() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.HealthCheckStats.GPUHealthCheck)
  return _internal_mutable_gpuhealthcheck();
}
inline void HealthCheckStats::set_allocated_gpuhealthcheck(::cedanagpu::HealthCheckResponse* gpuhealthcheck) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gpuhealthcheck_);
  }
  if (gpuhealthcheck) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gpuhealthcheck)->GetArena();
    if (message_arena != submessage_arena) {
      gpuhealthcheck = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpuhealthcheck, submessage_arena);
    }
    
  } else {
    
  }
  gpuhealthcheck_ = gpuhealthcheck;
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.HealthCheckStats.GPUHealthCheck)
}

// -------------------------------------------------------------------

// GetConfigRequest

// -------------------------------------------------------------------

// GetConfigResponse

// string JSON = 1[json_name = "JSON"];
inline void GetConfigResponse::clear_json() {
  json_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetConfigResponse::json() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.GetConfigResponse.JSON)
  return _internal_json();
}
inline void GetConfigResponse::set_json(const std::string& value) {
  _internal_set_json(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.GetConfigResponse.JSON)
}
inline std::string* GetConfigResponse::mutable_json() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.GetConfigResponse.JSON)
  return _internal_mutable_json();
}
inline const std::string& GetConfigResponse::_internal_json() const {
  return json_.Get();
}
inline void GetConfigResponse::_internal_set_json(const std::string& value) {
  
  json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetConfigResponse::set_json(std::string&& value) {
  
  json_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.GetConfigResponse.JSON)
}
inline void GetConfigResponse::set_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.GetConfigResponse.JSON)
}
inline void GetConfigResponse::set_json(const char* value,
    size_t size) {
  
  json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.GetConfigResponse.JSON)
}
inline std::string* GetConfigResponse::_internal_mutable_json() {
  
  return json_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetConfigResponse::release_json() {
  // @@protoc_insertion_point(field_release:cedana.services.task.GetConfigResponse.JSON)
  return json_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetConfigResponse::set_allocated_json(std::string* json) {
  if (json != nullptr) {
    
  } else {
    
  }
  json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.GetConfigResponse.JSON)
}
inline std::string* GetConfigResponse::unsafe_arena_release_json() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.GetConfigResponse.JSON)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return json_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetConfigResponse::unsafe_arena_set_allocated_json(
    std::string* json) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (json != nullptr) {
    
  } else {
    
  }
  json_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      json, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.GetConfigResponse.JSON)
}

// -------------------------------------------------------------------

// QueueJobCheckpointRequest

// string ContainerName = 1[json_name = "ContainerName"];
inline void QueueJobCheckpointRequest::clear_containername() {
  containername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QueueJobCheckpointRequest::containername() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.QueueJobCheckpointRequest.ContainerName)
  return _internal_containername();
}
inline void QueueJobCheckpointRequest::set_containername(const std::string& value) {
  _internal_set_containername(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.QueueJobCheckpointRequest.ContainerName)
}
inline std::string* QueueJobCheckpointRequest::mutable_containername() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.QueueJobCheckpointRequest.ContainerName)
  return _internal_mutable_containername();
}
inline const std::string& QueueJobCheckpointRequest::_internal_containername() const {
  return containername_.Get();
}
inline void QueueJobCheckpointRequest::_internal_set_containername(const std::string& value) {
  
  containername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QueueJobCheckpointRequest::set_containername(std::string&& value) {
  
  containername_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.QueueJobCheckpointRequest.ContainerName)
}
inline void QueueJobCheckpointRequest::set_containername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  containername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.QueueJobCheckpointRequest.ContainerName)
}
inline void QueueJobCheckpointRequest::set_containername(const char* value,
    size_t size) {
  
  containername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.QueueJobCheckpointRequest.ContainerName)
}
inline std::string* QueueJobCheckpointRequest::_internal_mutable_containername() {
  
  return containername_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QueueJobCheckpointRequest::release_containername() {
  // @@protoc_insertion_point(field_release:cedana.services.task.QueueJobCheckpointRequest.ContainerName)
  return containername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueueJobCheckpointRequest::set_allocated_containername(std::string* containername) {
  if (containername != nullptr) {
    
  } else {
    
  }
  containername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), containername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.QueueJobCheckpointRequest.ContainerName)
}
inline std::string* QueueJobCheckpointRequest::unsafe_arena_release_containername() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.QueueJobCheckpointRequest.ContainerName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return containername_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QueueJobCheckpointRequest::unsafe_arena_set_allocated_containername(
    std::string* containername) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (containername != nullptr) {
    
  } else {
    
  }
  containername_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      containername, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.QueueJobCheckpointRequest.ContainerName)
}

// string Namespace = 2[json_name = "Namespace"];
inline void QueueJobCheckpointRequest::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QueueJobCheckpointRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.QueueJobCheckpointRequest.Namespace)
  return _internal_namespace_();
}
inline void QueueJobCheckpointRequest::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.QueueJobCheckpointRequest.Namespace)
}
inline std::string* QueueJobCheckpointRequest::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.QueueJobCheckpointRequest.Namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& QueueJobCheckpointRequest::_internal_namespace_() const {
  return namespace__.Get();
}
inline void QueueJobCheckpointRequest::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QueueJobCheckpointRequest::set_namespace_(std::string&& value) {
  
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.QueueJobCheckpointRequest.Namespace)
}
inline void QueueJobCheckpointRequest::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.QueueJobCheckpointRequest.Namespace)
}
inline void QueueJobCheckpointRequest::set_namespace_(const char* value,
    size_t size) {
  
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.QueueJobCheckpointRequest.Namespace)
}
inline std::string* QueueJobCheckpointRequest::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QueueJobCheckpointRequest::release_namespace_() {
  // @@protoc_insertion_point(field_release:cedana.services.task.QueueJobCheckpointRequest.Namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueueJobCheckpointRequest::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.QueueJobCheckpointRequest.Namespace)
}
inline std::string* QueueJobCheckpointRequest::unsafe_arena_release_namespace_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.QueueJobCheckpointRequest.Namespace)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return namespace__.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QueueJobCheckpointRequest::unsafe_arena_set_allocated_namespace_(
    std::string* namespace_) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      namespace_, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.QueueJobCheckpointRequest.Namespace)
}

// string PodName = 3[json_name = "PodName"];
inline void QueueJobCheckpointRequest::clear_podname() {
  podname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QueueJobCheckpointRequest::podname() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.QueueJobCheckpointRequest.PodName)
  return _internal_podname();
}
inline void QueueJobCheckpointRequest::set_podname(const std::string& value) {
  _internal_set_podname(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.QueueJobCheckpointRequest.PodName)
}
inline std::string* QueueJobCheckpointRequest::mutable_podname() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.QueueJobCheckpointRequest.PodName)
  return _internal_mutable_podname();
}
inline const std::string& QueueJobCheckpointRequest::_internal_podname() const {
  return podname_.Get();
}
inline void QueueJobCheckpointRequest::_internal_set_podname(const std::string& value) {
  
  podname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QueueJobCheckpointRequest::set_podname(std::string&& value) {
  
  podname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.QueueJobCheckpointRequest.PodName)
}
inline void QueueJobCheckpointRequest::set_podname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  podname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.QueueJobCheckpointRequest.PodName)
}
inline void QueueJobCheckpointRequest::set_podname(const char* value,
    size_t size) {
  
  podname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.QueueJobCheckpointRequest.PodName)
}
inline std::string* QueueJobCheckpointRequest::_internal_mutable_podname() {
  
  return podname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QueueJobCheckpointRequest::release_podname() {
  // @@protoc_insertion_point(field_release:cedana.services.task.QueueJobCheckpointRequest.PodName)
  return podname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueueJobCheckpointRequest::set_allocated_podname(std::string* podname) {
  if (podname != nullptr) {
    
  } else {
    
  }
  podname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), podname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.QueueJobCheckpointRequest.PodName)
}
inline std::string* QueueJobCheckpointRequest::unsafe_arena_release_podname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.QueueJobCheckpointRequest.PodName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return podname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QueueJobCheckpointRequest::unsafe_arena_set_allocated_podname(
    std::string* podname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (podname != nullptr) {
    
  } else {
    
  }
  podname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      podname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.QueueJobCheckpointRequest.PodName)
}

// string ImageName = 4[json_name = "ImageName"];
inline void QueueJobCheckpointRequest::clear_imagename() {
  imagename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QueueJobCheckpointRequest::imagename() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.QueueJobCheckpointRequest.ImageName)
  return _internal_imagename();
}
inline void QueueJobCheckpointRequest::set_imagename(const std::string& value) {
  _internal_set_imagename(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.QueueJobCheckpointRequest.ImageName)
}
inline std::string* QueueJobCheckpointRequest::mutable_imagename() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.QueueJobCheckpointRequest.ImageName)
  return _internal_mutable_imagename();
}
inline const std::string& QueueJobCheckpointRequest::_internal_imagename() const {
  return imagename_.Get();
}
inline void QueueJobCheckpointRequest::_internal_set_imagename(const std::string& value) {
  
  imagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QueueJobCheckpointRequest::set_imagename(std::string&& value) {
  
  imagename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.QueueJobCheckpointRequest.ImageName)
}
inline void QueueJobCheckpointRequest::set_imagename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.QueueJobCheckpointRequest.ImageName)
}
inline void QueueJobCheckpointRequest::set_imagename(const char* value,
    size_t size) {
  
  imagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.QueueJobCheckpointRequest.ImageName)
}
inline std::string* QueueJobCheckpointRequest::_internal_mutable_imagename() {
  
  return imagename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QueueJobCheckpointRequest::release_imagename() {
  // @@protoc_insertion_point(field_release:cedana.services.task.QueueJobCheckpointRequest.ImageName)
  return imagename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueueJobCheckpointRequest::set_allocated_imagename(std::string* imagename) {
  if (imagename != nullptr) {
    
  } else {
    
  }
  imagename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imagename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.QueueJobCheckpointRequest.ImageName)
}
inline std::string* QueueJobCheckpointRequest::unsafe_arena_release_imagename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.QueueJobCheckpointRequest.ImageName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return imagename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QueueJobCheckpointRequest::unsafe_arena_set_allocated_imagename(
    std::string* imagename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (imagename != nullptr) {
    
  } else {
    
  }
  imagename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      imagename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.QueueJobCheckpointRequest.ImageName)
}

// string Id = 5[json_name = "Id"];
inline void QueueJobCheckpointRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QueueJobCheckpointRequest::id() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.QueueJobCheckpointRequest.Id)
  return _internal_id();
}
inline void QueueJobCheckpointRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.QueueJobCheckpointRequest.Id)
}
inline std::string* QueueJobCheckpointRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.QueueJobCheckpointRequest.Id)
  return _internal_mutable_id();
}
inline const std::string& QueueJobCheckpointRequest::_internal_id() const {
  return id_.Get();
}
inline void QueueJobCheckpointRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QueueJobCheckpointRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.QueueJobCheckpointRequest.Id)
}
inline void QueueJobCheckpointRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.QueueJobCheckpointRequest.Id)
}
inline void QueueJobCheckpointRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.QueueJobCheckpointRequest.Id)
}
inline std::string* QueueJobCheckpointRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QueueJobCheckpointRequest::release_id() {
  // @@protoc_insertion_point(field_release:cedana.services.task.QueueJobCheckpointRequest.Id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueueJobCheckpointRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.QueueJobCheckpointRequest.Id)
}
inline std::string* QueueJobCheckpointRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.QueueJobCheckpointRequest.Id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QueueJobCheckpointRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.QueueJobCheckpointRequest.Id)
}

// -------------------------------------------------------------------

// QueueJobRestoreRequest

// string ContainerName = 1[json_name = "ContainerName"];
inline void QueueJobRestoreRequest::clear_containername() {
  containername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QueueJobRestoreRequest::containername() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.QueueJobRestoreRequest.ContainerName)
  return _internal_containername();
}
inline void QueueJobRestoreRequest::set_containername(const std::string& value) {
  _internal_set_containername(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.QueueJobRestoreRequest.ContainerName)
}
inline std::string* QueueJobRestoreRequest::mutable_containername() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.QueueJobRestoreRequest.ContainerName)
  return _internal_mutable_containername();
}
inline const std::string& QueueJobRestoreRequest::_internal_containername() const {
  return containername_.Get();
}
inline void QueueJobRestoreRequest::_internal_set_containername(const std::string& value) {
  
  containername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QueueJobRestoreRequest::set_containername(std::string&& value) {
  
  containername_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.QueueJobRestoreRequest.ContainerName)
}
inline void QueueJobRestoreRequest::set_containername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  containername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.QueueJobRestoreRequest.ContainerName)
}
inline void QueueJobRestoreRequest::set_containername(const char* value,
    size_t size) {
  
  containername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.QueueJobRestoreRequest.ContainerName)
}
inline std::string* QueueJobRestoreRequest::_internal_mutable_containername() {
  
  return containername_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QueueJobRestoreRequest::release_containername() {
  // @@protoc_insertion_point(field_release:cedana.services.task.QueueJobRestoreRequest.ContainerName)
  return containername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueueJobRestoreRequest::set_allocated_containername(std::string* containername) {
  if (containername != nullptr) {
    
  } else {
    
  }
  containername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), containername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.QueueJobRestoreRequest.ContainerName)
}
inline std::string* QueueJobRestoreRequest::unsafe_arena_release_containername() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.QueueJobRestoreRequest.ContainerName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return containername_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QueueJobRestoreRequest::unsafe_arena_set_allocated_containername(
    std::string* containername) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (containername != nullptr) {
    
  } else {
    
  }
  containername_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      containername, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.QueueJobRestoreRequest.ContainerName)
}

// string Namespace = 2[json_name = "Namespace"];
inline void QueueJobRestoreRequest::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QueueJobRestoreRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.QueueJobRestoreRequest.Namespace)
  return _internal_namespace_();
}
inline void QueueJobRestoreRequest::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.QueueJobRestoreRequest.Namespace)
}
inline std::string* QueueJobRestoreRequest::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.QueueJobRestoreRequest.Namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& QueueJobRestoreRequest::_internal_namespace_() const {
  return namespace__.Get();
}
inline void QueueJobRestoreRequest::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QueueJobRestoreRequest::set_namespace_(std::string&& value) {
  
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.QueueJobRestoreRequest.Namespace)
}
inline void QueueJobRestoreRequest::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.QueueJobRestoreRequest.Namespace)
}
inline void QueueJobRestoreRequest::set_namespace_(const char* value,
    size_t size) {
  
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.QueueJobRestoreRequest.Namespace)
}
inline std::string* QueueJobRestoreRequest::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QueueJobRestoreRequest::release_namespace_() {
  // @@protoc_insertion_point(field_release:cedana.services.task.QueueJobRestoreRequest.Namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueueJobRestoreRequest::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.QueueJobRestoreRequest.Namespace)
}
inline std::string* QueueJobRestoreRequest::unsafe_arena_release_namespace_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.QueueJobRestoreRequest.Namespace)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return namespace__.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QueueJobRestoreRequest::unsafe_arena_set_allocated_namespace_(
    std::string* namespace_) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      namespace_, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.QueueJobRestoreRequest.Namespace)
}

// string PodName = 3[json_name = "PodName"];
inline void QueueJobRestoreRequest::clear_podname() {
  podname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QueueJobRestoreRequest::podname() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.QueueJobRestoreRequest.PodName)
  return _internal_podname();
}
inline void QueueJobRestoreRequest::set_podname(const std::string& value) {
  _internal_set_podname(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.QueueJobRestoreRequest.PodName)
}
inline std::string* QueueJobRestoreRequest::mutable_podname() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.QueueJobRestoreRequest.PodName)
  return _internal_mutable_podname();
}
inline const std::string& QueueJobRestoreRequest::_internal_podname() const {
  return podname_.Get();
}
inline void QueueJobRestoreRequest::_internal_set_podname(const std::string& value) {
  
  podname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QueueJobRestoreRequest::set_podname(std::string&& value) {
  
  podname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.QueueJobRestoreRequest.PodName)
}
inline void QueueJobRestoreRequest::set_podname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  podname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.QueueJobRestoreRequest.PodName)
}
inline void QueueJobRestoreRequest::set_podname(const char* value,
    size_t size) {
  
  podname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.QueueJobRestoreRequest.PodName)
}
inline std::string* QueueJobRestoreRequest::_internal_mutable_podname() {
  
  return podname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QueueJobRestoreRequest::release_podname() {
  // @@protoc_insertion_point(field_release:cedana.services.task.QueueJobRestoreRequest.PodName)
  return podname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueueJobRestoreRequest::set_allocated_podname(std::string* podname) {
  if (podname != nullptr) {
    
  } else {
    
  }
  podname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), podname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.QueueJobRestoreRequest.PodName)
}
inline std::string* QueueJobRestoreRequest::unsafe_arena_release_podname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.QueueJobRestoreRequest.PodName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return podname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QueueJobRestoreRequest::unsafe_arena_set_allocated_podname(
    std::string* podname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (podname != nullptr) {
    
  } else {
    
  }
  podname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      podname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.QueueJobRestoreRequest.PodName)
}

// string SourceName = 4[json_name = "SourceName"];
inline void QueueJobRestoreRequest::clear_sourcename() {
  sourcename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QueueJobRestoreRequest::sourcename() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.QueueJobRestoreRequest.SourceName)
  return _internal_sourcename();
}
inline void QueueJobRestoreRequest::set_sourcename(const std::string& value) {
  _internal_set_sourcename(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.QueueJobRestoreRequest.SourceName)
}
inline std::string* QueueJobRestoreRequest::mutable_sourcename() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.QueueJobRestoreRequest.SourceName)
  return _internal_mutable_sourcename();
}
inline const std::string& QueueJobRestoreRequest::_internal_sourcename() const {
  return sourcename_.Get();
}
inline void QueueJobRestoreRequest::_internal_set_sourcename(const std::string& value) {
  
  sourcename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QueueJobRestoreRequest::set_sourcename(std::string&& value) {
  
  sourcename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.QueueJobRestoreRequest.SourceName)
}
inline void QueueJobRestoreRequest::set_sourcename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sourcename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.QueueJobRestoreRequest.SourceName)
}
inline void QueueJobRestoreRequest::set_sourcename(const char* value,
    size_t size) {
  
  sourcename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.QueueJobRestoreRequest.SourceName)
}
inline std::string* QueueJobRestoreRequest::_internal_mutable_sourcename() {
  
  return sourcename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QueueJobRestoreRequest::release_sourcename() {
  // @@protoc_insertion_point(field_release:cedana.services.task.QueueJobRestoreRequest.SourceName)
  return sourcename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueueJobRestoreRequest::set_allocated_sourcename(std::string* sourcename) {
  if (sourcename != nullptr) {
    
  } else {
    
  }
  sourcename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourcename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.QueueJobRestoreRequest.SourceName)
}
inline std::string* QueueJobRestoreRequest::unsafe_arena_release_sourcename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.QueueJobRestoreRequest.SourceName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sourcename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QueueJobRestoreRequest::unsafe_arena_set_allocated_sourcename(
    std::string* sourcename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sourcename != nullptr) {
    
  } else {
    
  }
  sourcename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sourcename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.QueueJobRestoreRequest.SourceName)
}

// string Id = 5[json_name = "Id"];
inline void QueueJobRestoreRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QueueJobRestoreRequest::id() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.QueueJobRestoreRequest.Id)
  return _internal_id();
}
inline void QueueJobRestoreRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.QueueJobRestoreRequest.Id)
}
inline std::string* QueueJobRestoreRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.QueueJobRestoreRequest.Id)
  return _internal_mutable_id();
}
inline const std::string& QueueJobRestoreRequest::_internal_id() const {
  return id_.Get();
}
inline void QueueJobRestoreRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QueueJobRestoreRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.QueueJobRestoreRequest.Id)
}
inline void QueueJobRestoreRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.QueueJobRestoreRequest.Id)
}
inline void QueueJobRestoreRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.QueueJobRestoreRequest.Id)
}
inline std::string* QueueJobRestoreRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QueueJobRestoreRequest::release_id() {
  // @@protoc_insertion_point(field_release:cedana.services.task.QueueJobRestoreRequest.Id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueueJobRestoreRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.QueueJobRestoreRequest.Id)
}
inline std::string* QueueJobRestoreRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.QueueJobRestoreRequest.Id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QueueJobRestoreRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.QueueJobRestoreRequest.Id)
}

// -------------------------------------------------------------------

// QueueJobID

// string JobID = 1[json_name = "JobID"];
inline void QueueJobID::clear_jobid() {
  jobid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QueueJobID::jobid() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.QueueJobID.JobID)
  return _internal_jobid();
}
inline void QueueJobID::set_jobid(const std::string& value) {
  _internal_set_jobid(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.QueueJobID.JobID)
}
inline std::string* QueueJobID::mutable_jobid() {
  // @@protoc_insertion_point(field_mutable:cedana.services.task.QueueJobID.JobID)
  return _internal_mutable_jobid();
}
inline const std::string& QueueJobID::_internal_jobid() const {
  return jobid_.Get();
}
inline void QueueJobID::_internal_set_jobid(const std::string& value) {
  
  jobid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QueueJobID::set_jobid(std::string&& value) {
  
  jobid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cedana.services.task.QueueJobID.JobID)
}
inline void QueueJobID::set_jobid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  jobid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cedana.services.task.QueueJobID.JobID)
}
inline void QueueJobID::set_jobid(const char* value,
    size_t size) {
  
  jobid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cedana.services.task.QueueJobID.JobID)
}
inline std::string* QueueJobID::_internal_mutable_jobid() {
  
  return jobid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QueueJobID::release_jobid() {
  // @@protoc_insertion_point(field_release:cedana.services.task.QueueJobID.JobID)
  return jobid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueueJobID::set_allocated_jobid(std::string* jobid) {
  if (jobid != nullptr) {
    
  } else {
    
  }
  jobid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jobid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cedana.services.task.QueueJobID.JobID)
}
inline std::string* QueueJobID::unsafe_arena_release_jobid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cedana.services.task.QueueJobID.JobID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return jobid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QueueJobID::unsafe_arena_set_allocated_jobid(
    std::string* jobid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (jobid != nullptr) {
    
  } else {
    
  }
  jobid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      jobid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cedana.services.task.QueueJobID.JobID)
}

// -------------------------------------------------------------------

// QueueJobStatus

// .cedana.services.task.QueueJobStatusEnum Status = 1[json_name = "Status"];
inline void QueueJobStatus::clear_status() {
  status_ = 0;
}
inline ::cedana::services::task::QueueJobStatusEnum QueueJobStatus::_internal_status() const {
  return static_cast< ::cedana::services::task::QueueJobStatusEnum >(status_);
}
inline ::cedana::services::task::QueueJobStatusEnum QueueJobStatus::status() const {
  // @@protoc_insertion_point(field_get:cedana.services.task.QueueJobStatus.Status)
  return _internal_status();
}
inline void QueueJobStatus::_internal_set_status(::cedana::services::task::QueueJobStatusEnum value) {
  
  status_ = value;
}
inline void QueueJobStatus::set_status(::cedana::services::task::QueueJobStatusEnum value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:cedana.services.task.QueueJobStatus.Status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace task
}  // namespace services
}  // namespace cedana

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::cedana::services::task::OpenFilesStat_StreamType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cedana::services::task::OpenFilesStat_StreamType>() {
  return ::cedana::services::task::OpenFilesStat_StreamType_descriptor();
}
template <> struct is_proto_enum< ::cedana::services::task::CheckpointReason_CheckpointReasonEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cedana::services::task::CheckpointReason_CheckpointReasonEnum>() {
  return ::cedana::services::task::CheckpointReason_CheckpointReasonEnum_descriptor();
}
template <> struct is_proto_enum< ::cedana::services::task::DumpType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cedana::services::task::DumpType>() {
  return ::cedana::services::task::DumpType_descriptor();
}
template <> struct is_proto_enum< ::cedana::services::task::ContainerRuntime> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cedana::services::task::ContainerRuntime>() {
  return ::cedana::services::task::ContainerRuntime_descriptor();
}
template <> struct is_proto_enum< ::cedana::services::task::CRType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cedana::services::task::CRType>() {
  return ::cedana::services::task::CRType_descriptor();
}
template <> struct is_proto_enum< ::cedana::services::task::JobState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cedana::services::task::JobState>() {
  return ::cedana::services::task::JobState_descriptor();
}
template <> struct is_proto_enum< ::cedana::services::task::CheckpointState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cedana::services::task::CheckpointState>() {
  return ::cedana::services::task::CheckpointState_descriptor();
}
template <> struct is_proto_enum< ::cedana::services::task::QueueJobStatusEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cedana::services::task::QueueJobStatusEnum>() {
  return ::cedana::services::task::QueueJobStatusEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_task_2eproto
