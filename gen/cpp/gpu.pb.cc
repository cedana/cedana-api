// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gpu.proto

#include "gpu.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_gpu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvailableCUDAAPIs_gpu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gpu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPURestoreStats_gpu_2eproto;
namespace cedanagpu {
class CheckpointRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckpointRequest> _instance;
} _CheckpointRequest_default_instance_;
class CheckpointResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckpointResponse> _instance;
} _CheckpointResponse_default_instance_;
class RestoreRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RestoreRequest> _instance;
} _RestoreRequest_default_instance_;
class RestoreResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RestoreResponse> _instance;
} _RestoreResponse_default_instance_;
class StartupPollRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartupPollRequest> _instance;
} _StartupPollRequest_default_instance_;
class StartupPollResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartupPollResponse> _instance;
} _StartupPollResponse_default_instance_;
class HealthCheckRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HealthCheckRequest> _instance;
} _HealthCheckRequest_default_instance_;
class HealthCheckResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HealthCheckResponse> _instance;
} _HealthCheckResponse_default_instance_;
class AvailableCUDAAPIsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AvailableCUDAAPIs> _instance;
} _AvailableCUDAAPIs_default_instance_;
class GPURestoreStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GPURestoreStats> _instance;
} _GPURestoreStats_default_instance_;
}  // namespace cedanagpu
static void InitDefaultsscc_info_AvailableCUDAAPIs_gpu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedanagpu::_AvailableCUDAAPIs_default_instance_;
    new (ptr) ::cedanagpu::AvailableCUDAAPIs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedanagpu::AvailableCUDAAPIs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvailableCUDAAPIs_gpu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AvailableCUDAAPIs_gpu_2eproto}, {}};

static void InitDefaultsscc_info_CheckpointRequest_gpu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedanagpu::_CheckpointRequest_default_instance_;
    new (ptr) ::cedanagpu::CheckpointRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedanagpu::CheckpointRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckpointRequest_gpu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CheckpointRequest_gpu_2eproto}, {}};

static void InitDefaultsscc_info_CheckpointResponse_gpu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedanagpu::_CheckpointResponse_default_instance_;
    new (ptr) ::cedanagpu::CheckpointResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedanagpu::CheckpointResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckpointResponse_gpu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CheckpointResponse_gpu_2eproto}, {}};

static void InitDefaultsscc_info_GPURestoreStats_gpu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedanagpu::_GPURestoreStats_default_instance_;
    new (ptr) ::cedanagpu::GPURestoreStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedanagpu::GPURestoreStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPURestoreStats_gpu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GPURestoreStats_gpu_2eproto}, {}};

static void InitDefaultsscc_info_HealthCheckRequest_gpu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedanagpu::_HealthCheckRequest_default_instance_;
    new (ptr) ::cedanagpu::HealthCheckRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedanagpu::HealthCheckRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HealthCheckRequest_gpu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HealthCheckRequest_gpu_2eproto}, {}};

static void InitDefaultsscc_info_HealthCheckResponse_gpu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedanagpu::_HealthCheckResponse_default_instance_;
    new (ptr) ::cedanagpu::HealthCheckResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedanagpu::HealthCheckResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HealthCheckResponse_gpu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HealthCheckResponse_gpu_2eproto}, {
      &scc_info_AvailableCUDAAPIs_gpu_2eproto.base,}};

static void InitDefaultsscc_info_RestoreRequest_gpu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedanagpu::_RestoreRequest_default_instance_;
    new (ptr) ::cedanagpu::RestoreRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedanagpu::RestoreRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RestoreRequest_gpu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RestoreRequest_gpu_2eproto}, {}};

static void InitDefaultsscc_info_RestoreResponse_gpu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedanagpu::_RestoreResponse_default_instance_;
    new (ptr) ::cedanagpu::RestoreResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedanagpu::RestoreResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RestoreResponse_gpu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RestoreResponse_gpu_2eproto}, {
      &scc_info_GPURestoreStats_gpu_2eproto.base,}};

static void InitDefaultsscc_info_StartupPollRequest_gpu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedanagpu::_StartupPollRequest_default_instance_;
    new (ptr) ::cedanagpu::StartupPollRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedanagpu::StartupPollRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartupPollRequest_gpu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartupPollRequest_gpu_2eproto}, {}};

static void InitDefaultsscc_info_StartupPollResponse_gpu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedanagpu::_StartupPollResponse_default_instance_;
    new (ptr) ::cedanagpu::StartupPollResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedanagpu::StartupPollResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartupPollResponse_gpu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartupPollResponse_gpu_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gpu_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_gpu_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gpu_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gpu_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedanagpu::CheckpointRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedanagpu::CheckpointRequest, directory_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedanagpu::CheckpointResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedanagpu::CheckpointResponse, success_),
  PROTOBUF_FIELD_OFFSET(::cedanagpu::CheckpointResponse, mempath_),
  PROTOBUF_FIELD_OFFSET(::cedanagpu::CheckpointResponse, ckptpath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedanagpu::RestoreRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedanagpu::RestoreRequest, directory_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedanagpu::RestoreResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedanagpu::RestoreResponse, success_),
  PROTOBUF_FIELD_OFFSET(::cedanagpu::RestoreResponse, gpurestorestats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedanagpu::StartupPollRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedanagpu::StartupPollResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedanagpu::StartupPollResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedanagpu::HealthCheckRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedanagpu::HealthCheckResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedanagpu::HealthCheckResponse, success_),
  PROTOBUF_FIELD_OFFSET(::cedanagpu::HealthCheckResponse, version_),
  PROTOBUF_FIELD_OFFSET(::cedanagpu::HealthCheckResponse, devicecount_),
  PROTOBUF_FIELD_OFFSET(::cedanagpu::HealthCheckResponse, availablecudaapis_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedanagpu::AvailableCUDAAPIs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedanagpu::AvailableCUDAAPIs, cudnnversion_),
  PROTOBUF_FIELD_OFFSET(::cedanagpu::AvailableCUDAAPIs, cublasversion_),
  PROTOBUF_FIELD_OFFSET(::cedanagpu::AvailableCUDAAPIs, ncclversion_),
  PROTOBUF_FIELD_OFFSET(::cedanagpu::AvailableCUDAAPIs, driverversion_),
  PROTOBUF_FIELD_OFFSET(::cedanagpu::AvailableCUDAAPIs, runtimeversion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedanagpu::GPURestoreStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedanagpu::GPURestoreStats, copymemtime_),
  PROTOBUF_FIELD_OFFSET(::cedanagpu::GPURestoreStats, replaycallstime_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cedanagpu::CheckpointRequest)},
  { 6, -1, sizeof(::cedanagpu::CheckpointResponse)},
  { 14, -1, sizeof(::cedanagpu::RestoreRequest)},
  { 20, -1, sizeof(::cedanagpu::RestoreResponse)},
  { 27, -1, sizeof(::cedanagpu::StartupPollRequest)},
  { 32, -1, sizeof(::cedanagpu::StartupPollResponse)},
  { 38, -1, sizeof(::cedanagpu::HealthCheckRequest)},
  { 43, -1, sizeof(::cedanagpu::HealthCheckResponse)},
  { 52, -1, sizeof(::cedanagpu::AvailableCUDAAPIs)},
  { 62, -1, sizeof(::cedanagpu::GPURestoreStats)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedanagpu::_CheckpointRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedanagpu::_CheckpointResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedanagpu::_RestoreRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedanagpu::_RestoreResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedanagpu::_StartupPollRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedanagpu::_StartupPollResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedanagpu::_HealthCheckRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedanagpu::_HealthCheckResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedanagpu::_AvailableCUDAAPIs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedanagpu::_GPURestoreStats_default_instance_),
};

const char descriptor_table_protodef_gpu_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tgpu.proto\022\tcedanagpu\"1\n\021CheckpointRequ"
  "est\022\034\n\tdirectory\030\001 \001(\tR\tdirectory\"d\n\022Che"
  "ckpointResponse\022\030\n\007success\030\001 \001(\010R\007succes"
  "s\022\030\n\007memPath\030\002 \001(\tR\007memPath\022\032\n\010ckptPath\030"
  "\003 \001(\tR\010ckptPath\".\n\016RestoreRequest\022\034\n\tdir"
  "ectory\030\001 \001(\tR\tdirectory\"q\n\017RestoreRespon"
  "se\022\030\n\007success\030\001 \001(\010R\007success\022D\n\017gpuResto"
  "reStats\030\002 \001(\0132\032.cedanagpu.GPURestoreStat"
  "sR\017gpuRestoreStats\"\024\n\022StartupPollRequest"
  "\"/\n\023StartupPollResponse\022\030\n\007success\030\001 \001(\010"
  "R\007success\"\024\n\022HealthCheckRequest\"\267\001\n\023Heal"
  "thCheckResponse\022\030\n\007success\030\001 \001(\010R\007succes"
  "s\022\030\n\007version\030\002 \001(\tR\007version\022 \n\013deviceCou"
  "nt\030\003 \001(\005R\013deviceCount\022J\n\021availableCUDAAP"
  "Is\030\004 \001(\0132\034.cedanagpu.AvailableCUDAAPIsR\021"
  "availableCUDAAPIs\"\315\001\n\021AvailableCUDAAPIs\022"
  "\"\n\014cuDNNVersion\030\001 \001(\005R\014cuDNNVersion\022$\n\rc"
  "uBLASVersion\030\002 \001(\005R\rcuBLASVersion\022 \n\013ncc"
  "lVersion\030\003 \001(\005R\013ncclVersion\022$\n\rdriverVer"
  "sion\030\004 \001(\005R\rdriverVersion\022&\n\016runtimeVers"
  "ion\030\005 \001(\005R\016runtimeVersion\"]\n\017GPURestoreS"
  "tats\022 \n\013copyMemTime\030\001 \001(\003R\013copyMemTime\022("
  "\n\017replayCallsTime\030\002 \001(\003R\017replayCallsTime"
  "2\274\002\n\tCedanaGPU\022K\n\nCheckpoint\022\034.cedanagpu"
  ".CheckpointRequest\032\035.cedanagpu.Checkpoin"
  "tResponse\"\000\022B\n\007Restore\022\031.cedanagpu.Resto"
  "reRequest\032\032.cedanagpu.RestoreResponse\"\000\022"
  "N\n\013StartupPoll\022\035.cedanagpu.StartupPollRe"
  "quest\032\036.cedanagpu.StartupPollResponse\"\000\022"
  "N\n\013HealthCheck\022\035.cedanagpu.HealthCheckRe"
  "quest\032\036.cedanagpu.HealthCheckResponse\"\000B"
  "m\n\rcom.cedanagpuB\010GpuProtoP\001Z\016cedana-api"
  "/gpu\242\002\003CXX\252\002\tCedanagpu\312\002\tCedanagpu\342\002\025Ced"
  "anagpu\\GPBMetadata\352\002\tCedanagpub\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gpu_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gpu_2eproto_sccs[10] = {
  &scc_info_AvailableCUDAAPIs_gpu_2eproto.base,
  &scc_info_CheckpointRequest_gpu_2eproto.base,
  &scc_info_CheckpointResponse_gpu_2eproto.base,
  &scc_info_GPURestoreStats_gpu_2eproto.base,
  &scc_info_HealthCheckRequest_gpu_2eproto.base,
  &scc_info_HealthCheckResponse_gpu_2eproto.base,
  &scc_info_RestoreRequest_gpu_2eproto.base,
  &scc_info_RestoreResponse_gpu_2eproto.base,
  &scc_info_StartupPollRequest_gpu_2eproto.base,
  &scc_info_StartupPollResponse_gpu_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gpu_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gpu_2eproto = {
  false, false, descriptor_table_protodef_gpu_2eproto, "gpu.proto", 1358,
  &descriptor_table_gpu_2eproto_once, descriptor_table_gpu_2eproto_sccs, descriptor_table_gpu_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_gpu_2eproto::offsets,
  file_level_metadata_gpu_2eproto, 10, file_level_enum_descriptors_gpu_2eproto, file_level_service_descriptors_gpu_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gpu_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gpu_2eproto)), true);
namespace cedanagpu {

// ===================================================================

void CheckpointRequest::InitAsDefaultInstance() {
}
class CheckpointRequest::_Internal {
 public:
};

CheckpointRequest::CheckpointRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedanagpu.CheckpointRequest)
}
CheckpointRequest::CheckpointRequest(const CheckpointRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_directory().empty()) {
    directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_directory(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:cedanagpu.CheckpointRequest)
}

void CheckpointRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckpointRequest_gpu_2eproto.base);
  directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CheckpointRequest::~CheckpointRequest() {
  // @@protoc_insertion_point(destructor:cedanagpu.CheckpointRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckpointRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  directory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CheckpointRequest::ArenaDtor(void* object) {
  CheckpointRequest* _this = reinterpret_cast< CheckpointRequest* >(object);
  (void)_this;
}
void CheckpointRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckpointRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckpointRequest& CheckpointRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckpointRequest_gpu_2eproto.base);
  return *internal_default_instance();
}


void CheckpointRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cedanagpu.CheckpointRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  directory_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckpointRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string directory = 1[json_name = "directory"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_directory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedanagpu.CheckpointRequest.directory"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckpointRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedanagpu.CheckpointRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string directory = 1[json_name = "directory"];
  if (this->directory().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_directory().data(), static_cast<int>(this->_internal_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedanagpu.CheckpointRequest.directory");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_directory(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedanagpu.CheckpointRequest)
  return target;
}

size_t CheckpointRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedanagpu.CheckpointRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string directory = 1[json_name = "directory"];
  if (this->directory().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_directory());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckpointRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedanagpu.CheckpointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckpointRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckpointRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedanagpu.CheckpointRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedanagpu.CheckpointRequest)
    MergeFrom(*source);
  }
}

void CheckpointRequest::MergeFrom(const CheckpointRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedanagpu.CheckpointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.directory().size() > 0) {
    _internal_set_directory(from._internal_directory());
  }
}

void CheckpointRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedanagpu.CheckpointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckpointRequest::CopyFrom(const CheckpointRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedanagpu.CheckpointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckpointRequest::IsInitialized() const {
  return true;
}

void CheckpointRequest::InternalSwap(CheckpointRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  directory_.Swap(&other->directory_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckpointRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckpointResponse::InitAsDefaultInstance() {
}
class CheckpointResponse::_Internal {
 public:
};

CheckpointResponse::CheckpointResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedanagpu.CheckpointResponse)
}
CheckpointResponse::CheckpointResponse(const CheckpointResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mempath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mempath().empty()) {
    mempath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mempath(),
      GetArena());
  }
  ckptpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ckptpath().empty()) {
    ckptpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ckptpath(),
      GetArena());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:cedanagpu.CheckpointResponse)
}

void CheckpointResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckpointResponse_gpu_2eproto.base);
  mempath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ckptpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

CheckpointResponse::~CheckpointResponse() {
  // @@protoc_insertion_point(destructor:cedanagpu.CheckpointResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckpointResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mempath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ckptpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CheckpointResponse::ArenaDtor(void* object) {
  CheckpointResponse* _this = reinterpret_cast< CheckpointResponse* >(object);
  (void)_this;
}
void CheckpointResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckpointResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckpointResponse& CheckpointResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckpointResponse_gpu_2eproto.base);
  return *internal_default_instance();
}


void CheckpointResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cedanagpu.CheckpointResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mempath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ckptpath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckpointResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1[json_name = "success"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string memPath = 2[json_name = "memPath"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mempath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedanagpu.CheckpointResponse.memPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ckptPath = 3[json_name = "ckptPath"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ckptpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedanagpu.CheckpointResponse.ckptPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckpointResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedanagpu.CheckpointResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1[json_name = "success"];
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string memPath = 2[json_name = "memPath"];
  if (this->mempath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mempath().data(), static_cast<int>(this->_internal_mempath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedanagpu.CheckpointResponse.memPath");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mempath(), target);
  }

  // string ckptPath = 3[json_name = "ckptPath"];
  if (this->ckptpath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ckptpath().data(), static_cast<int>(this->_internal_ckptpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedanagpu.CheckpointResponse.ckptPath");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ckptpath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedanagpu.CheckpointResponse)
  return target;
}

size_t CheckpointResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedanagpu.CheckpointResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string memPath = 2[json_name = "memPath"];
  if (this->mempath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mempath());
  }

  // string ckptPath = 3[json_name = "ckptPath"];
  if (this->ckptpath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ckptpath());
  }

  // bool success = 1[json_name = "success"];
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckpointResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedanagpu.CheckpointResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckpointResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckpointResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedanagpu.CheckpointResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedanagpu.CheckpointResponse)
    MergeFrom(*source);
  }
}

void CheckpointResponse::MergeFrom(const CheckpointResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedanagpu.CheckpointResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mempath().size() > 0) {
    _internal_set_mempath(from._internal_mempath());
  }
  if (from.ckptpath().size() > 0) {
    _internal_set_ckptpath(from._internal_ckptpath());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void CheckpointResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedanagpu.CheckpointResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckpointResponse::CopyFrom(const CheckpointResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedanagpu.CheckpointResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckpointResponse::IsInitialized() const {
  return true;
}

void CheckpointResponse::InternalSwap(CheckpointResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mempath_.Swap(&other->mempath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ckptpath_.Swap(&other->ckptpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckpointResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RestoreRequest::InitAsDefaultInstance() {
}
class RestoreRequest::_Internal {
 public:
};

RestoreRequest::RestoreRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedanagpu.RestoreRequest)
}
RestoreRequest::RestoreRequest(const RestoreRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_directory().empty()) {
    directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_directory(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:cedanagpu.RestoreRequest)
}

void RestoreRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RestoreRequest_gpu_2eproto.base);
  directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RestoreRequest::~RestoreRequest() {
  // @@protoc_insertion_point(destructor:cedanagpu.RestoreRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RestoreRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  directory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RestoreRequest::ArenaDtor(void* object) {
  RestoreRequest* _this = reinterpret_cast< RestoreRequest* >(object);
  (void)_this;
}
void RestoreRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RestoreRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RestoreRequest& RestoreRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RestoreRequest_gpu_2eproto.base);
  return *internal_default_instance();
}


void RestoreRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cedanagpu.RestoreRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  directory_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RestoreRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string directory = 1[json_name = "directory"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_directory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedanagpu.RestoreRequest.directory"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RestoreRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedanagpu.RestoreRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string directory = 1[json_name = "directory"];
  if (this->directory().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_directory().data(), static_cast<int>(this->_internal_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedanagpu.RestoreRequest.directory");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_directory(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedanagpu.RestoreRequest)
  return target;
}

size_t RestoreRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedanagpu.RestoreRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string directory = 1[json_name = "directory"];
  if (this->directory().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_directory());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestoreRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedanagpu.RestoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RestoreRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RestoreRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedanagpu.RestoreRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedanagpu.RestoreRequest)
    MergeFrom(*source);
  }
}

void RestoreRequest::MergeFrom(const RestoreRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedanagpu.RestoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.directory().size() > 0) {
    _internal_set_directory(from._internal_directory());
  }
}

void RestoreRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedanagpu.RestoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestoreRequest::CopyFrom(const RestoreRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedanagpu.RestoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestoreRequest::IsInitialized() const {
  return true;
}

void RestoreRequest::InternalSwap(RestoreRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  directory_.Swap(&other->directory_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RestoreRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RestoreResponse::InitAsDefaultInstance() {
  ::cedanagpu::_RestoreResponse_default_instance_._instance.get_mutable()->gpurestorestats_ = const_cast< ::cedanagpu::GPURestoreStats*>(
      ::cedanagpu::GPURestoreStats::internal_default_instance());
}
class RestoreResponse::_Internal {
 public:
  static const ::cedanagpu::GPURestoreStats& gpurestorestats(const RestoreResponse* msg);
};

const ::cedanagpu::GPURestoreStats&
RestoreResponse::_Internal::gpurestorestats(const RestoreResponse* msg) {
  return *msg->gpurestorestats_;
}
RestoreResponse::RestoreResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedanagpu.RestoreResponse)
}
RestoreResponse::RestoreResponse(const RestoreResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gpurestorestats()) {
    gpurestorestats_ = new ::cedanagpu::GPURestoreStats(*from.gpurestorestats_);
  } else {
    gpurestorestats_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:cedanagpu.RestoreResponse)
}

void RestoreResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RestoreResponse_gpu_2eproto.base);
  ::memset(&gpurestorestats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&gpurestorestats_)) + sizeof(success_));
}

RestoreResponse::~RestoreResponse() {
  // @@protoc_insertion_point(destructor:cedanagpu.RestoreResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RestoreResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gpurestorestats_;
}

void RestoreResponse::ArenaDtor(void* object) {
  RestoreResponse* _this = reinterpret_cast< RestoreResponse* >(object);
  (void)_this;
}
void RestoreResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RestoreResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RestoreResponse& RestoreResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RestoreResponse_gpu_2eproto.base);
  return *internal_default_instance();
}


void RestoreResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cedanagpu.RestoreResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && gpurestorestats_ != nullptr) {
    delete gpurestorestats_;
  }
  gpurestorestats_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RestoreResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1[json_name = "success"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedanagpu.GPURestoreStats gpuRestoreStats = 2[json_name = "gpuRestoreStats"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gpurestorestats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RestoreResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedanagpu.RestoreResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1[json_name = "success"];
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .cedanagpu.GPURestoreStats gpuRestoreStats = 2[json_name = "gpuRestoreStats"];
  if (this->has_gpurestorestats()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::gpurestorestats(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedanagpu.RestoreResponse)
  return target;
}

size_t RestoreResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedanagpu.RestoreResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cedanagpu.GPURestoreStats gpuRestoreStats = 2[json_name = "gpuRestoreStats"];
  if (this->has_gpurestorestats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gpurestorestats_);
  }

  // bool success = 1[json_name = "success"];
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestoreResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedanagpu.RestoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RestoreResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RestoreResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedanagpu.RestoreResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedanagpu.RestoreResponse)
    MergeFrom(*source);
  }
}

void RestoreResponse::MergeFrom(const RestoreResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedanagpu.RestoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gpurestorestats()) {
    _internal_mutable_gpurestorestats()->::cedanagpu::GPURestoreStats::MergeFrom(from._internal_gpurestorestats());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void RestoreResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedanagpu.RestoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestoreResponse::CopyFrom(const RestoreResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedanagpu.RestoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestoreResponse::IsInitialized() const {
  return true;
}

void RestoreResponse::InternalSwap(RestoreResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RestoreResponse, success_)
      + sizeof(RestoreResponse::success_)
      - PROTOBUF_FIELD_OFFSET(RestoreResponse, gpurestorestats_)>(
          reinterpret_cast<char*>(&gpurestorestats_),
          reinterpret_cast<char*>(&other->gpurestorestats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RestoreResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartupPollRequest::InitAsDefaultInstance() {
}
class StartupPollRequest::_Internal {
 public:
};

StartupPollRequest::StartupPollRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedanagpu.StartupPollRequest)
}
StartupPollRequest::StartupPollRequest(const StartupPollRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cedanagpu.StartupPollRequest)
}

void StartupPollRequest::SharedCtor() {
}

StartupPollRequest::~StartupPollRequest() {
  // @@protoc_insertion_point(destructor:cedanagpu.StartupPollRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartupPollRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StartupPollRequest::ArenaDtor(void* object) {
  StartupPollRequest* _this = reinterpret_cast< StartupPollRequest* >(object);
  (void)_this;
}
void StartupPollRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartupPollRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartupPollRequest& StartupPollRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartupPollRequest_gpu_2eproto.base);
  return *internal_default_instance();
}


void StartupPollRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cedanagpu.StartupPollRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartupPollRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartupPollRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedanagpu.StartupPollRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedanagpu.StartupPollRequest)
  return target;
}

size_t StartupPollRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedanagpu.StartupPollRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartupPollRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedanagpu.StartupPollRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartupPollRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartupPollRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedanagpu.StartupPollRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedanagpu.StartupPollRequest)
    MergeFrom(*source);
  }
}

void StartupPollRequest::MergeFrom(const StartupPollRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedanagpu.StartupPollRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StartupPollRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedanagpu.StartupPollRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartupPollRequest::CopyFrom(const StartupPollRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedanagpu.StartupPollRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartupPollRequest::IsInitialized() const {
  return true;
}

void StartupPollRequest::InternalSwap(StartupPollRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartupPollRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartupPollResponse::InitAsDefaultInstance() {
}
class StartupPollResponse::_Internal {
 public:
};

StartupPollResponse::StartupPollResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedanagpu.StartupPollResponse)
}
StartupPollResponse::StartupPollResponse(const StartupPollResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:cedanagpu.StartupPollResponse)
}

void StartupPollResponse::SharedCtor() {
  success_ = false;
}

StartupPollResponse::~StartupPollResponse() {
  // @@protoc_insertion_point(destructor:cedanagpu.StartupPollResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartupPollResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StartupPollResponse::ArenaDtor(void* object) {
  StartupPollResponse* _this = reinterpret_cast< StartupPollResponse* >(object);
  (void)_this;
}
void StartupPollResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartupPollResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartupPollResponse& StartupPollResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartupPollResponse_gpu_2eproto.base);
  return *internal_default_instance();
}


void StartupPollResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cedanagpu.StartupPollResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartupPollResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1[json_name = "success"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartupPollResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedanagpu.StartupPollResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1[json_name = "success"];
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedanagpu.StartupPollResponse)
  return target;
}

size_t StartupPollResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedanagpu.StartupPollResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1[json_name = "success"];
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartupPollResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedanagpu.StartupPollResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StartupPollResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartupPollResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedanagpu.StartupPollResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedanagpu.StartupPollResponse)
    MergeFrom(*source);
  }
}

void StartupPollResponse::MergeFrom(const StartupPollResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedanagpu.StartupPollResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void StartupPollResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedanagpu.StartupPollResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartupPollResponse::CopyFrom(const StartupPollResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedanagpu.StartupPollResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartupPollResponse::IsInitialized() const {
  return true;
}

void StartupPollResponse::InternalSwap(StartupPollResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartupPollResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HealthCheckRequest::InitAsDefaultInstance() {
}
class HealthCheckRequest::_Internal {
 public:
};

HealthCheckRequest::HealthCheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedanagpu.HealthCheckRequest)
}
HealthCheckRequest::HealthCheckRequest(const HealthCheckRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cedanagpu.HealthCheckRequest)
}

void HealthCheckRequest::SharedCtor() {
}

HealthCheckRequest::~HealthCheckRequest() {
  // @@protoc_insertion_point(destructor:cedanagpu.HealthCheckRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HealthCheckRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HealthCheckRequest::ArenaDtor(void* object) {
  HealthCheckRequest* _this = reinterpret_cast< HealthCheckRequest* >(object);
  (void)_this;
}
void HealthCheckRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HealthCheckRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HealthCheckRequest& HealthCheckRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HealthCheckRequest_gpu_2eproto.base);
  return *internal_default_instance();
}


void HealthCheckRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cedanagpu.HealthCheckRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthCheckRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HealthCheckRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedanagpu.HealthCheckRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedanagpu.HealthCheckRequest)
  return target;
}

size_t HealthCheckRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedanagpu.HealthCheckRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HealthCheckRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedanagpu.HealthCheckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthCheckRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HealthCheckRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedanagpu.HealthCheckRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedanagpu.HealthCheckRequest)
    MergeFrom(*source);
  }
}

void HealthCheckRequest::MergeFrom(const HealthCheckRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedanagpu.HealthCheckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void HealthCheckRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedanagpu.HealthCheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthCheckRequest::CopyFrom(const HealthCheckRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedanagpu.HealthCheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheckRequest::IsInitialized() const {
  return true;
}

void HealthCheckRequest::InternalSwap(HealthCheckRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthCheckRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HealthCheckResponse::InitAsDefaultInstance() {
  ::cedanagpu::_HealthCheckResponse_default_instance_._instance.get_mutable()->availablecudaapis_ = const_cast< ::cedanagpu::AvailableCUDAAPIs*>(
      ::cedanagpu::AvailableCUDAAPIs::internal_default_instance());
}
class HealthCheckResponse::_Internal {
 public:
  static const ::cedanagpu::AvailableCUDAAPIs& availablecudaapis(const HealthCheckResponse* msg);
};

const ::cedanagpu::AvailableCUDAAPIs&
HealthCheckResponse::_Internal::availablecudaapis(const HealthCheckResponse* msg) {
  return *msg->availablecudaapis_;
}
HealthCheckResponse::HealthCheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedanagpu.HealthCheckResponse)
}
HealthCheckResponse::HealthCheckResponse(const HealthCheckResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  if (from._internal_has_availablecudaapis()) {
    availablecudaapis_ = new ::cedanagpu::AvailableCUDAAPIs(*from.availablecudaapis_);
  } else {
    availablecudaapis_ = nullptr;
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&devicecount_) -
    reinterpret_cast<char*>(&success_)) + sizeof(devicecount_));
  // @@protoc_insertion_point(copy_constructor:cedanagpu.HealthCheckResponse)
}

void HealthCheckResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HealthCheckResponse_gpu_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&availablecudaapis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&devicecount_) -
      reinterpret_cast<char*>(&availablecudaapis_)) + sizeof(devicecount_));
}

HealthCheckResponse::~HealthCheckResponse() {
  // @@protoc_insertion_point(destructor:cedanagpu.HealthCheckResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HealthCheckResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete availablecudaapis_;
}

void HealthCheckResponse::ArenaDtor(void* object) {
  HealthCheckResponse* _this = reinterpret_cast< HealthCheckResponse* >(object);
  (void)_this;
}
void HealthCheckResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HealthCheckResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HealthCheckResponse& HealthCheckResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HealthCheckResponse_gpu_2eproto.base);
  return *internal_default_instance();
}


void HealthCheckResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cedanagpu.HealthCheckResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && availablecudaapis_ != nullptr) {
    delete availablecudaapis_;
  }
  availablecudaapis_ = nullptr;
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&devicecount_) -
      reinterpret_cast<char*>(&success_)) + sizeof(devicecount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthCheckResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1[json_name = "success"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 2[json_name = "version"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedanagpu.HealthCheckResponse.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 deviceCount = 3[json_name = "deviceCount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          devicecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedanagpu.AvailableCUDAAPIs availableCUDAAPIs = 4[json_name = "availableCUDAAPIs"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_availablecudaapis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HealthCheckResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedanagpu.HealthCheckResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1[json_name = "success"];
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string version = 2[json_name = "version"];
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedanagpu.HealthCheckResponse.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // int32 deviceCount = 3[json_name = "deviceCount"];
  if (this->devicecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_devicecount(), target);
  }

  // .cedanagpu.AvailableCUDAAPIs availableCUDAAPIs = 4[json_name = "availableCUDAAPIs"];
  if (this->has_availablecudaapis()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::availablecudaapis(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedanagpu.HealthCheckResponse)
  return target;
}

size_t HealthCheckResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedanagpu.HealthCheckResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 2[json_name = "version"];
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .cedanagpu.AvailableCUDAAPIs availableCUDAAPIs = 4[json_name = "availableCUDAAPIs"];
  if (this->has_availablecudaapis()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *availablecudaapis_);
  }

  // bool success = 1[json_name = "success"];
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // int32 deviceCount = 3[json_name = "deviceCount"];
  if (this->devicecount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_devicecount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HealthCheckResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedanagpu.HealthCheckResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthCheckResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HealthCheckResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedanagpu.HealthCheckResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedanagpu.HealthCheckResponse)
    MergeFrom(*source);
  }
}

void HealthCheckResponse::MergeFrom(const HealthCheckResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedanagpu.HealthCheckResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.has_availablecudaapis()) {
    _internal_mutable_availablecudaapis()->::cedanagpu::AvailableCUDAAPIs::MergeFrom(from._internal_availablecudaapis());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.devicecount() != 0) {
    _internal_set_devicecount(from._internal_devicecount());
  }
}

void HealthCheckResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedanagpu.HealthCheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthCheckResponse::CopyFrom(const HealthCheckResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedanagpu.HealthCheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheckResponse::IsInitialized() const {
  return true;
}

void HealthCheckResponse::InternalSwap(HealthCheckResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HealthCheckResponse, devicecount_)
      + sizeof(HealthCheckResponse::devicecount_)
      - PROTOBUF_FIELD_OFFSET(HealthCheckResponse, availablecudaapis_)>(
          reinterpret_cast<char*>(&availablecudaapis_),
          reinterpret_cast<char*>(&other->availablecudaapis_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthCheckResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AvailableCUDAAPIs::InitAsDefaultInstance() {
}
class AvailableCUDAAPIs::_Internal {
 public:
};

AvailableCUDAAPIs::AvailableCUDAAPIs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedanagpu.AvailableCUDAAPIs)
}
AvailableCUDAAPIs::AvailableCUDAAPIs(const AvailableCUDAAPIs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cudnnversion_, &from.cudnnversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&runtimeversion_) -
    reinterpret_cast<char*>(&cudnnversion_)) + sizeof(runtimeversion_));
  // @@protoc_insertion_point(copy_constructor:cedanagpu.AvailableCUDAAPIs)
}

void AvailableCUDAAPIs::SharedCtor() {
  ::memset(&cudnnversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&runtimeversion_) -
      reinterpret_cast<char*>(&cudnnversion_)) + sizeof(runtimeversion_));
}

AvailableCUDAAPIs::~AvailableCUDAAPIs() {
  // @@protoc_insertion_point(destructor:cedanagpu.AvailableCUDAAPIs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AvailableCUDAAPIs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AvailableCUDAAPIs::ArenaDtor(void* object) {
  AvailableCUDAAPIs* _this = reinterpret_cast< AvailableCUDAAPIs* >(object);
  (void)_this;
}
void AvailableCUDAAPIs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AvailableCUDAAPIs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AvailableCUDAAPIs& AvailableCUDAAPIs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AvailableCUDAAPIs_gpu_2eproto.base);
  return *internal_default_instance();
}


void AvailableCUDAAPIs::Clear() {
// @@protoc_insertion_point(message_clear_start:cedanagpu.AvailableCUDAAPIs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cudnnversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&runtimeversion_) -
      reinterpret_cast<char*>(&cudnnversion_)) + sizeof(runtimeversion_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AvailableCUDAAPIs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cuDNNVersion = 1[json_name = "cuDNNVersion"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cudnnversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cuBLASVersion = 2[json_name = "cuBLASVersion"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cublasversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ncclVersion = 3[json_name = "ncclVersion"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ncclversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 driverVersion = 4[json_name = "driverVersion"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          driverversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 runtimeVersion = 5[json_name = "runtimeVersion"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          runtimeversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AvailableCUDAAPIs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedanagpu.AvailableCUDAAPIs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cuDNNVersion = 1[json_name = "cuDNNVersion"];
  if (this->cudnnversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cudnnversion(), target);
  }

  // int32 cuBLASVersion = 2[json_name = "cuBLASVersion"];
  if (this->cublasversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cublasversion(), target);
  }

  // int32 ncclVersion = 3[json_name = "ncclVersion"];
  if (this->ncclversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ncclversion(), target);
  }

  // int32 driverVersion = 4[json_name = "driverVersion"];
  if (this->driverversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_driverversion(), target);
  }

  // int32 runtimeVersion = 5[json_name = "runtimeVersion"];
  if (this->runtimeversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_runtimeversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedanagpu.AvailableCUDAAPIs)
  return target;
}

size_t AvailableCUDAAPIs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedanagpu.AvailableCUDAAPIs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cuDNNVersion = 1[json_name = "cuDNNVersion"];
  if (this->cudnnversion() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cudnnversion());
  }

  // int32 cuBLASVersion = 2[json_name = "cuBLASVersion"];
  if (this->cublasversion() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cublasversion());
  }

  // int32 ncclVersion = 3[json_name = "ncclVersion"];
  if (this->ncclversion() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ncclversion());
  }

  // int32 driverVersion = 4[json_name = "driverVersion"];
  if (this->driverversion() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_driverversion());
  }

  // int32 runtimeVersion = 5[json_name = "runtimeVersion"];
  if (this->runtimeversion() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_runtimeversion());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AvailableCUDAAPIs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedanagpu.AvailableCUDAAPIs)
  GOOGLE_DCHECK_NE(&from, this);
  const AvailableCUDAAPIs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AvailableCUDAAPIs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedanagpu.AvailableCUDAAPIs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedanagpu.AvailableCUDAAPIs)
    MergeFrom(*source);
  }
}

void AvailableCUDAAPIs::MergeFrom(const AvailableCUDAAPIs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedanagpu.AvailableCUDAAPIs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cudnnversion() != 0) {
    _internal_set_cudnnversion(from._internal_cudnnversion());
  }
  if (from.cublasversion() != 0) {
    _internal_set_cublasversion(from._internal_cublasversion());
  }
  if (from.ncclversion() != 0) {
    _internal_set_ncclversion(from._internal_ncclversion());
  }
  if (from.driverversion() != 0) {
    _internal_set_driverversion(from._internal_driverversion());
  }
  if (from.runtimeversion() != 0) {
    _internal_set_runtimeversion(from._internal_runtimeversion());
  }
}

void AvailableCUDAAPIs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedanagpu.AvailableCUDAAPIs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvailableCUDAAPIs::CopyFrom(const AvailableCUDAAPIs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedanagpu.AvailableCUDAAPIs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvailableCUDAAPIs::IsInitialized() const {
  return true;
}

void AvailableCUDAAPIs::InternalSwap(AvailableCUDAAPIs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AvailableCUDAAPIs, runtimeversion_)
      + sizeof(AvailableCUDAAPIs::runtimeversion_)
      - PROTOBUF_FIELD_OFFSET(AvailableCUDAAPIs, cudnnversion_)>(
          reinterpret_cast<char*>(&cudnnversion_),
          reinterpret_cast<char*>(&other->cudnnversion_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AvailableCUDAAPIs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GPURestoreStats::InitAsDefaultInstance() {
}
class GPURestoreStats::_Internal {
 public:
};

GPURestoreStats::GPURestoreStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedanagpu.GPURestoreStats)
}
GPURestoreStats::GPURestoreStats(const GPURestoreStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&copymemtime_, &from.copymemtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&replaycallstime_) -
    reinterpret_cast<char*>(&copymemtime_)) + sizeof(replaycallstime_));
  // @@protoc_insertion_point(copy_constructor:cedanagpu.GPURestoreStats)
}

void GPURestoreStats::SharedCtor() {
  ::memset(&copymemtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replaycallstime_) -
      reinterpret_cast<char*>(&copymemtime_)) + sizeof(replaycallstime_));
}

GPURestoreStats::~GPURestoreStats() {
  // @@protoc_insertion_point(destructor:cedanagpu.GPURestoreStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GPURestoreStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GPURestoreStats::ArenaDtor(void* object) {
  GPURestoreStats* _this = reinterpret_cast< GPURestoreStats* >(object);
  (void)_this;
}
void GPURestoreStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GPURestoreStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GPURestoreStats& GPURestoreStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GPURestoreStats_gpu_2eproto.base);
  return *internal_default_instance();
}


void GPURestoreStats::Clear() {
// @@protoc_insertion_point(message_clear_start:cedanagpu.GPURestoreStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&copymemtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replaycallstime_) -
      reinterpret_cast<char*>(&copymemtime_)) + sizeof(replaycallstime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GPURestoreStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 copyMemTime = 1[json_name = "copyMemTime"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          copymemtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 replayCallsTime = 2[json_name = "replayCallsTime"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          replaycallstime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPURestoreStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedanagpu.GPURestoreStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 copyMemTime = 1[json_name = "copyMemTime"];
  if (this->copymemtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_copymemtime(), target);
  }

  // int64 replayCallsTime = 2[json_name = "replayCallsTime"];
  if (this->replaycallstime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_replaycallstime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedanagpu.GPURestoreStats)
  return target;
}

size_t GPURestoreStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedanagpu.GPURestoreStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 copyMemTime = 1[json_name = "copyMemTime"];
  if (this->copymemtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_copymemtime());
  }

  // int64 replayCallsTime = 2[json_name = "replayCallsTime"];
  if (this->replaycallstime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_replaycallstime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPURestoreStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedanagpu.GPURestoreStats)
  GOOGLE_DCHECK_NE(&from, this);
  const GPURestoreStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GPURestoreStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedanagpu.GPURestoreStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedanagpu.GPURestoreStats)
    MergeFrom(*source);
  }
}

void GPURestoreStats::MergeFrom(const GPURestoreStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedanagpu.GPURestoreStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.copymemtime() != 0) {
    _internal_set_copymemtime(from._internal_copymemtime());
  }
  if (from.replaycallstime() != 0) {
    _internal_set_replaycallstime(from._internal_replaycallstime());
  }
}

void GPURestoreStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedanagpu.GPURestoreStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPURestoreStats::CopyFrom(const GPURestoreStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedanagpu.GPURestoreStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPURestoreStats::IsInitialized() const {
  return true;
}

void GPURestoreStats::InternalSwap(GPURestoreStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GPURestoreStats, replaycallstime_)
      + sizeof(GPURestoreStats::replaycallstime_)
      - PROTOBUF_FIELD_OFFSET(GPURestoreStats, copymemtime_)>(
          reinterpret_cast<char*>(&copymemtime_),
          reinterpret_cast<char*>(&other->copymemtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GPURestoreStats::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace cedanagpu
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cedanagpu::CheckpointRequest* Arena::CreateMaybeMessage< ::cedanagpu::CheckpointRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedanagpu::CheckpointRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cedanagpu::CheckpointResponse* Arena::CreateMaybeMessage< ::cedanagpu::CheckpointResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedanagpu::CheckpointResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cedanagpu::RestoreRequest* Arena::CreateMaybeMessage< ::cedanagpu::RestoreRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedanagpu::RestoreRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cedanagpu::RestoreResponse* Arena::CreateMaybeMessage< ::cedanagpu::RestoreResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedanagpu::RestoreResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cedanagpu::StartupPollRequest* Arena::CreateMaybeMessage< ::cedanagpu::StartupPollRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedanagpu::StartupPollRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cedanagpu::StartupPollResponse* Arena::CreateMaybeMessage< ::cedanagpu::StartupPollResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedanagpu::StartupPollResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cedanagpu::HealthCheckRequest* Arena::CreateMaybeMessage< ::cedanagpu::HealthCheckRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedanagpu::HealthCheckRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cedanagpu::HealthCheckResponse* Arena::CreateMaybeMessage< ::cedanagpu::HealthCheckResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedanagpu::HealthCheckResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cedanagpu::AvailableCUDAAPIs* Arena::CreateMaybeMessage< ::cedanagpu::AvailableCUDAAPIs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedanagpu::AvailableCUDAAPIs >(arena);
}
template<> PROTOBUF_NOINLINE ::cedanagpu::GPURestoreStats* Arena::CreateMaybeMessage< ::cedanagpu::GPURestoreStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedanagpu::GPURestoreStats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
