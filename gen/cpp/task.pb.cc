// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto

#include "task.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Addr_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPUInfo_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckpointFileStats_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConnectionStat_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerInfo_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerdContainer_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerdRootfsDumpArgs_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CriuOpts_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DumpStats_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HealthCheckStats_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostInfo_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoryInfo_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpenFilesStat_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProcessInfo_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ProcessState_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteState_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RestoreArgs_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RestoreStats_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RuncContainer_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RuncDumpArgs_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RuncOpts_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_task_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartArgs_task_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gpu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPURestoreStats_gpu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gpu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HealthCheckResponse_gpu_2eproto;
namespace cedana {
namespace services {
namespace task {
class DumpStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DumpStats> _instance;
} _DumpStats_default_instance_;
class CheckpointFileStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckpointFileStats> _instance;
} _CheckpointFileStats_default_instance_;
class RestoreStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RestoreStats> _instance;
} _RestoreStats_default_instance_;
class CRIOImagePushArgsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CRIOImagePushArgs> _instance;
} _CRIOImagePushArgs_default_instance_;
class CRIOImagePushRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CRIOImagePushResp> _instance;
} _CRIOImagePushResp_default_instance_;
class CRIORootfsDumpArgsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CRIORootfsDumpArgs> _instance;
} _CRIORootfsDumpArgs_default_instance_;
class CRIORootfsDumpRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CRIORootfsDumpResp> _instance;
} _CRIORootfsDumpResp_default_instance_;
class StartArgsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartArgs> _instance;
} _StartArgs_default_instance_;
class StartRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartResp> _instance;
} _StartResp_default_instance_;
class DumpArgsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DumpArgs> _instance;
} _DumpArgs_default_instance_;
class DumpRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DumpResp> _instance;
} _DumpResp_default_instance_;
class RestoreArgsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RestoreArgs> _instance;
} _RestoreArgs_default_instance_;
class RestoreRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RestoreResp> _instance;
} _RestoreResp_default_instance_;
class QueryArgsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryArgs> _instance;
} _QueryArgs_default_instance_;
class QueryRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryResp> _instance;
} _QueryResp_default_instance_;
class ContainerdDumpArgsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerdDumpArgs> _instance;
} _ContainerdDumpArgs_default_instance_;
class ContainerdDumpRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerdDumpResp> _instance;
} _ContainerdDumpResp_default_instance_;
class ContainerdRestoreArgsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerdRestoreArgs> _instance;
} _ContainerdRestoreArgs_default_instance_;
class ContainerdRestoreRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerdRestoreResp> _instance;
} _ContainerdRestoreResp_default_instance_;
class ContainerdQueryArgsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerdQueryArgs> _instance;
} _ContainerdQueryArgs_default_instance_;
class ContainerdQueryRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerdQueryResp> _instance;
} _ContainerdQueryResp_default_instance_;
class ContainerdContainerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerdContainer> _instance;
} _ContainerdContainer_default_instance_;
class ContainerdRootfsDumpArgsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerdRootfsDumpArgs> _instance;
} _ContainerdRootfsDumpArgs_default_instance_;
class ContainerdRootfsDumpRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerdRootfsDumpResp> _instance;
} _ContainerdRootfsDumpResp_default_instance_;
class ContainerdRootfsRestoreArgsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerdRootfsRestoreArgs> _instance;
} _ContainerdRootfsRestoreArgs_default_instance_;
class ContainerdRootfsRestoreRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerdRootfsRestoreResp> _instance;
} _ContainerdRootfsRestoreResp_default_instance_;
class RuncDumpArgsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RuncDumpArgs> _instance;
} _RuncDumpArgs_default_instance_;
class RuncDumpRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RuncDumpResp> _instance;
} _RuncDumpResp_default_instance_;
class CriuOptsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CriuOpts> _instance;
} _CriuOpts_default_instance_;
class RuncRestoreArgsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RuncRestoreArgs> _instance;
} _RuncRestoreArgs_default_instance_;
class RuncRestoreRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RuncRestoreResp> _instance;
} _RuncRestoreResp_default_instance_;
class RuncOptsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RuncOpts> _instance;
} _RuncOpts_default_instance_;
class RuncQueryArgsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RuncQueryArgs> _instance;
} _RuncQueryArgs_default_instance_;
class RuncQueryRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RuncQueryResp> _instance;
} _RuncQueryResp_default_instance_;
class RuncContainerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RuncContainer> _instance;
} _RuncContainer_default_instance_;
class RuncGetPausePidArgsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RuncGetPausePidArgs> _instance;
} _RuncGetPausePidArgs_default_instance_;
class RuncGetPausePidRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RuncGetPausePidResp> _instance;
} _RuncGetPausePidResp_default_instance_;
class LogStreamingArgsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogStreamingArgs> _instance;
} _LogStreamingArgs_default_instance_;
class LogStreamingRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogStreamingResp> _instance;
} _LogStreamingResp_default_instance_;
class ProcessStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessState> _instance;
} _ProcessState_default_instance_;
class RemoteStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteState> _instance;
} _RemoteState_default_instance_;
class ProcessInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessInfo> _instance;
} _ProcessInfo_default_instance_;
class HostInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostInfo> _instance;
} _HostInfo_default_instance_;
class CPUInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CPUInfo> _instance;
} _CPUInfo_default_instance_;
class MemoryInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemoryInfo> _instance;
} _MemoryInfo_default_instance_;
class OpenFilesStatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpenFilesStat> _instance;
} _OpenFilesStat_default_instance_;
class ConnectionStatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectionStat> _instance;
} _ConnectionStat_default_instance_;
class AddrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Addr> _instance;
} _Addr_default_instance_;
class ProcessStateStreamingArgsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessStateStreamingArgs> _instance;
} _ProcessStateStreamingArgs_default_instance_;
class CheckpointReasonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckpointReason> _instance;
} _CheckpointReason_default_instance_;
class StartAttachArgsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartAttachArgs> _instance;
} _StartAttachArgs_default_instance_;
class StartAttachRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartAttachResp> _instance;
} _StartAttachResp_default_instance_;
class RestoreAttachArgsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RestoreAttachArgs> _instance;
} _RestoreAttachArgs_default_instance_;
class RestoreAttachRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RestoreAttachResp> _instance;
} _RestoreAttachResp_default_instance_;
class DetailedHealthCheckRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetailedHealthCheckRequest> _instance;
} _DetailedHealthCheckRequest_default_instance_;
class DetailedHealthCheckResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetailedHealthCheckResponse> _instance;
} _DetailedHealthCheckResponse_default_instance_;
class HealthCheckStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HealthCheckStats> _instance;
} _HealthCheckStats_default_instance_;
class GetConfigRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetConfigRequest> _instance;
} _GetConfigRequest_default_instance_;
class GetConfigResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetConfigResponse> _instance;
} _GetConfigResponse_default_instance_;
class QueueJobCheckpointRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueueJobCheckpointRequest> _instance;
} _QueueJobCheckpointRequest_default_instance_;
class QueueJobRestoreRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueueJobRestoreRequest> _instance;
} _QueueJobRestoreRequest_default_instance_;
class QueueJobIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueueJobID> _instance;
} _QueueJobID_default_instance_;
class QueueJobStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueueJobStatus> _instance;
} _QueueJobStatus_default_instance_;
class ContainerInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerInfoRequest> _instance;
} _ContainerInfoRequest_default_instance_;
class ContainerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerInfo> _instance;
} _ContainerInfo_default_instance_;
class ContainersInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainersInfo> _instance;
} _ContainersInfo_default_instance_;
}  // namespace task
}  // namespace services
}  // namespace cedana
static void InitDefaultsscc_info_Addr_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_Addr_default_instance_;
    new (ptr) ::cedana::services::task::Addr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::Addr::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Addr_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Addr_task_2eproto}, {}};

static void InitDefaultsscc_info_CPUInfo_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_CPUInfo_default_instance_;
    new (ptr) ::cedana::services::task::CPUInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::CPUInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPUInfo_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CPUInfo_task_2eproto}, {}};

static void InitDefaultsscc_info_CRIOImagePushArgs_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_CRIOImagePushArgs_default_instance_;
    new (ptr) ::cedana::services::task::CRIOImagePushArgs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::CRIOImagePushArgs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CRIOImagePushArgs_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CRIOImagePushArgs_task_2eproto}, {}};

static void InitDefaultsscc_info_CRIOImagePushResp_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_CRIOImagePushResp_default_instance_;
    new (ptr) ::cedana::services::task::CRIOImagePushResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::CRIOImagePushResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CRIOImagePushResp_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CRIOImagePushResp_task_2eproto}, {}};

static void InitDefaultsscc_info_CRIORootfsDumpArgs_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_CRIORootfsDumpArgs_default_instance_;
    new (ptr) ::cedana::services::task::CRIORootfsDumpArgs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::CRIORootfsDumpArgs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CRIORootfsDumpArgs_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CRIORootfsDumpArgs_task_2eproto}, {}};

static void InitDefaultsscc_info_CRIORootfsDumpResp_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_CRIORootfsDumpResp_default_instance_;
    new (ptr) ::cedana::services::task::CRIORootfsDumpResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::CRIORootfsDumpResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CRIORootfsDumpResp_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CRIORootfsDumpResp_task_2eproto}, {}};

static void InitDefaultsscc_info_CheckpointFileStats_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_CheckpointFileStats_default_instance_;
    new (ptr) ::cedana::services::task::CheckpointFileStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::CheckpointFileStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckpointFileStats_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CheckpointFileStats_task_2eproto}, {}};

static void InitDefaultsscc_info_CheckpointReason_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_CheckpointReason_default_instance_;
    new (ptr) ::cedana::services::task::CheckpointReason();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::CheckpointReason::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckpointReason_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CheckpointReason_task_2eproto}, {}};

static void InitDefaultsscc_info_ConnectionStat_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_ConnectionStat_default_instance_;
    new (ptr) ::cedana::services::task::ConnectionStat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::ConnectionStat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConnectionStat_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ConnectionStat_task_2eproto}, {
      &scc_info_Addr_task_2eproto.base,}};

static void InitDefaultsscc_info_ContainerInfo_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_ContainerInfo_default_instance_;
    new (ptr) ::cedana::services::task::ContainerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::ContainerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerInfo_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerInfo_task_2eproto}, {}};

static void InitDefaultsscc_info_ContainerInfoRequest_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_ContainerInfoRequest_default_instance_;
    new (ptr) ::cedana::services::task::ContainerInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::ContainerInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerInfoRequest_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerInfoRequest_task_2eproto}, {}};

static void InitDefaultsscc_info_ContainerdContainer_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_ContainerdContainer_default_instance_;
    new (ptr) ::cedana::services::task::ContainerdContainer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::ContainerdContainer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerdContainer_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerdContainer_task_2eproto}, {}};

static void InitDefaultsscc_info_ContainerdDumpArgs_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_ContainerdDumpArgs_default_instance_;
    new (ptr) ::cedana::services::task::ContainerdDumpArgs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::ContainerdDumpArgs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ContainerdDumpArgs_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ContainerdDumpArgs_task_2eproto}, {
      &scc_info_RuncDumpArgs_task_2eproto.base,
      &scc_info_ContainerdRootfsDumpArgs_task_2eproto.base,}};

static void InitDefaultsscc_info_ContainerdDumpResp_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_ContainerdDumpResp_default_instance_;
    new (ptr) ::cedana::services::task::ContainerdDumpResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::ContainerdDumpResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerdDumpResp_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerdDumpResp_task_2eproto}, {}};

static void InitDefaultsscc_info_ContainerdQueryArgs_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_ContainerdQueryArgs_default_instance_;
    new (ptr) ::cedana::services::task::ContainerdQueryArgs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::ContainerdQueryArgs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerdQueryArgs_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerdQueryArgs_task_2eproto}, {}};

static void InitDefaultsscc_info_ContainerdQueryResp_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_ContainerdQueryResp_default_instance_;
    new (ptr) ::cedana::services::task::ContainerdQueryResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::ContainerdQueryResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContainerdQueryResp_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ContainerdQueryResp_task_2eproto}, {
      &scc_info_ContainerdContainer_task_2eproto.base,}};

static void InitDefaultsscc_info_ContainerdRestoreArgs_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_ContainerdRestoreArgs_default_instance_;
    new (ptr) ::cedana::services::task::ContainerdRestoreArgs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::ContainerdRestoreArgs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerdRestoreArgs_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerdRestoreArgs_task_2eproto}, {}};

static void InitDefaultsscc_info_ContainerdRestoreResp_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_ContainerdRestoreResp_default_instance_;
    new (ptr) ::cedana::services::task::ContainerdRestoreResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::ContainerdRestoreResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerdRestoreResp_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerdRestoreResp_task_2eproto}, {}};

static void InitDefaultsscc_info_ContainerdRootfsDumpArgs_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_ContainerdRootfsDumpArgs_default_instance_;
    new (ptr) ::cedana::services::task::ContainerdRootfsDumpArgs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::ContainerdRootfsDumpArgs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerdRootfsDumpArgs_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerdRootfsDumpArgs_task_2eproto}, {}};

static void InitDefaultsscc_info_ContainerdRootfsDumpResp_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_ContainerdRootfsDumpResp_default_instance_;
    new (ptr) ::cedana::services::task::ContainerdRootfsDumpResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::ContainerdRootfsDumpResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerdRootfsDumpResp_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerdRootfsDumpResp_task_2eproto}, {}};

static void InitDefaultsscc_info_ContainerdRootfsRestoreArgs_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_ContainerdRootfsRestoreArgs_default_instance_;
    new (ptr) ::cedana::services::task::ContainerdRootfsRestoreArgs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::ContainerdRootfsRestoreArgs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerdRootfsRestoreArgs_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerdRootfsRestoreArgs_task_2eproto}, {}};

static void InitDefaultsscc_info_ContainerdRootfsRestoreResp_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_ContainerdRootfsRestoreResp_default_instance_;
    new (ptr) ::cedana::services::task::ContainerdRootfsRestoreResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::ContainerdRootfsRestoreResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerdRootfsRestoreResp_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerdRootfsRestoreResp_task_2eproto}, {}};

static void InitDefaultsscc_info_ContainersInfo_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_ContainersInfo_default_instance_;
    new (ptr) ::cedana::services::task::ContainersInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::ContainersInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContainersInfo_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ContainersInfo_task_2eproto}, {
      &scc_info_ContainerInfo_task_2eproto.base,}};

static void InitDefaultsscc_info_CriuOpts_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_CriuOpts_default_instance_;
    new (ptr) ::cedana::services::task::CriuOpts();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::CriuOpts::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CriuOpts_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CriuOpts_task_2eproto}, {}};

static void InitDefaultsscc_info_DetailedHealthCheckRequest_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_DetailedHealthCheckRequest_default_instance_;
    new (ptr) ::cedana::services::task::DetailedHealthCheckRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::DetailedHealthCheckRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DetailedHealthCheckRequest_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DetailedHealthCheckRequest_task_2eproto}, {}};

static void InitDefaultsscc_info_DetailedHealthCheckResponse_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_DetailedHealthCheckResponse_default_instance_;
    new (ptr) ::cedana::services::task::DetailedHealthCheckResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::DetailedHealthCheckResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetailedHealthCheckResponse_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DetailedHealthCheckResponse_task_2eproto}, {
      &scc_info_HealthCheckStats_task_2eproto.base,}};

static void InitDefaultsscc_info_DumpArgs_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_DumpArgs_default_instance_;
    new (ptr) ::cedana::services::task::DumpArgs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::DumpArgs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DumpArgs_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DumpArgs_task_2eproto}, {
      &scc_info_CriuOpts_task_2eproto.base,}};

static void InitDefaultsscc_info_DumpResp_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_DumpResp_default_instance_;
    new (ptr) ::cedana::services::task::DumpResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::DumpResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DumpResp_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DumpResp_task_2eproto}, {
      &scc_info_ProcessState_task_2eproto.base,
      &scc_info_DumpStats_task_2eproto.base,}};

static void InitDefaultsscc_info_DumpStats_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_DumpStats_default_instance_;
    new (ptr) ::cedana::services::task::DumpStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::DumpStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DumpStats_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DumpStats_task_2eproto}, {
      &scc_info_CheckpointFileStats_task_2eproto.base,}};

static void InitDefaultsscc_info_GetConfigRequest_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_GetConfigRequest_default_instance_;
    new (ptr) ::cedana::services::task::GetConfigRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::GetConfigRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetConfigRequest_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetConfigRequest_task_2eproto}, {}};

static void InitDefaultsscc_info_GetConfigResponse_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_GetConfigResponse_default_instance_;
    new (ptr) ::cedana::services::task::GetConfigResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::GetConfigResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetConfigResponse_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetConfigResponse_task_2eproto}, {}};

static void InitDefaultsscc_info_HealthCheckStats_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_HealthCheckStats_default_instance_;
    new (ptr) ::cedana::services::task::HealthCheckStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::HealthCheckStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HealthCheckStats_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HealthCheckStats_task_2eproto}, {
      &scc_info_HealthCheckResponse_gpu_2eproto.base,}};

static void InitDefaultsscc_info_HostInfo_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_HostInfo_default_instance_;
    new (ptr) ::cedana::services::task::HostInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::HostInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostInfo_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HostInfo_task_2eproto}, {}};

static void InitDefaultsscc_info_LogStreamingArgs_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_LogStreamingArgs_default_instance_;
    new (ptr) ::cedana::services::task::LogStreamingArgs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::LogStreamingArgs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogStreamingArgs_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogStreamingArgs_task_2eproto}, {}};

static void InitDefaultsscc_info_LogStreamingResp_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_LogStreamingResp_default_instance_;
    new (ptr) ::cedana::services::task::LogStreamingResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::LogStreamingResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogStreamingResp_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogStreamingResp_task_2eproto}, {}};

static void InitDefaultsscc_info_MemoryInfo_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_MemoryInfo_default_instance_;
    new (ptr) ::cedana::services::task::MemoryInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::MemoryInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoryInfo_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MemoryInfo_task_2eproto}, {}};

static void InitDefaultsscc_info_OpenFilesStat_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_OpenFilesStat_default_instance_;
    new (ptr) ::cedana::services::task::OpenFilesStat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::OpenFilesStat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpenFilesStat_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OpenFilesStat_task_2eproto}, {}};

static void InitDefaultsscc_info_ProcessInfo_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_ProcessInfo_default_instance_;
    new (ptr) ::cedana::services::task::ProcessInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::ProcessInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProcessInfo_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ProcessInfo_task_2eproto}, {
      &scc_info_OpenFilesStat_task_2eproto.base,
      &scc_info_ConnectionStat_task_2eproto.base,}};

static void InitDefaultsscc_info_ProcessState_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_ProcessState_default_instance_;
    new (ptr) ::cedana::services::task::ProcessState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::ProcessState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ProcessState_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_ProcessState_task_2eproto}, {
      &scc_info_ProcessInfo_task_2eproto.base,
      &scc_info_RemoteState_task_2eproto.base,
      &scc_info_HostInfo_task_2eproto.base,
      &scc_info_CPUInfo_task_2eproto.base,
      &scc_info_MemoryInfo_task_2eproto.base,}};

static void InitDefaultsscc_info_ProcessStateStreamingArgs_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_ProcessStateStreamingArgs_default_instance_;
    new (ptr) ::cedana::services::task::ProcessStateStreamingArgs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::ProcessStateStreamingArgs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessStateStreamingArgs_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessStateStreamingArgs_task_2eproto}, {}};

static void InitDefaultsscc_info_QueryArgs_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_QueryArgs_default_instance_;
    new (ptr) ::cedana::services::task::QueryArgs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::QueryArgs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryArgs_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryArgs_task_2eproto}, {}};

static void InitDefaultsscc_info_QueryResp_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_QueryResp_default_instance_;
    new (ptr) ::cedana::services::task::QueryResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::QueryResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryResp_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QueryResp_task_2eproto}, {
      &scc_info_ProcessState_task_2eproto.base,}};

static void InitDefaultsscc_info_QueueJobCheckpointRequest_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_QueueJobCheckpointRequest_default_instance_;
    new (ptr) ::cedana::services::task::QueueJobCheckpointRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::QueueJobCheckpointRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueueJobCheckpointRequest_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueueJobCheckpointRequest_task_2eproto}, {}};

static void InitDefaultsscc_info_QueueJobID_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_QueueJobID_default_instance_;
    new (ptr) ::cedana::services::task::QueueJobID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::QueueJobID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueueJobID_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueueJobID_task_2eproto}, {}};

static void InitDefaultsscc_info_QueueJobRestoreRequest_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_QueueJobRestoreRequest_default_instance_;
    new (ptr) ::cedana::services::task::QueueJobRestoreRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::QueueJobRestoreRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueueJobRestoreRequest_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueueJobRestoreRequest_task_2eproto}, {}};

static void InitDefaultsscc_info_QueueJobStatus_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_QueueJobStatus_default_instance_;
    new (ptr) ::cedana::services::task::QueueJobStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::QueueJobStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueueJobStatus_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueueJobStatus_task_2eproto}, {}};

static void InitDefaultsscc_info_RemoteState_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_RemoteState_default_instance_;
    new (ptr) ::cedana::services::task::RemoteState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::RemoteState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteState_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoteState_task_2eproto}, {}};

static void InitDefaultsscc_info_RestoreArgs_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_RestoreArgs_default_instance_;
    new (ptr) ::cedana::services::task::RestoreArgs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::RestoreArgs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RestoreArgs_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RestoreArgs_task_2eproto}, {
      &scc_info_CriuOpts_task_2eproto.base,}};

static void InitDefaultsscc_info_RestoreAttachArgs_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_RestoreAttachArgs_default_instance_;
    new (ptr) ::cedana::services::task::RestoreAttachArgs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::RestoreAttachArgs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RestoreAttachArgs_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RestoreAttachArgs_task_2eproto}, {
      &scc_info_RestoreArgs_task_2eproto.base,}};

static void InitDefaultsscc_info_RestoreAttachResp_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_RestoreAttachResp_default_instance_;
    new (ptr) ::cedana::services::task::RestoreAttachResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::RestoreAttachResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RestoreAttachResp_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RestoreAttachResp_task_2eproto}, {}};

static void InitDefaultsscc_info_RestoreResp_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_RestoreResp_default_instance_;
    new (ptr) ::cedana::services::task::RestoreResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::RestoreResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RestoreResp_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RestoreResp_task_2eproto}, {
      &scc_info_ProcessState_task_2eproto.base,
      &scc_info_RestoreStats_task_2eproto.base,}};

static void InitDefaultsscc_info_RestoreStats_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_RestoreStats_default_instance_;
    new (ptr) ::cedana::services::task::RestoreStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::RestoreStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RestoreStats_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RestoreStats_task_2eproto}, {
      &scc_info_CheckpointFileStats_task_2eproto.base,
      &scc_info_GPURestoreStats_gpu_2eproto.base,}};

static void InitDefaultsscc_info_RuncContainer_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_RuncContainer_default_instance_;
    new (ptr) ::cedana::services::task::RuncContainer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::RuncContainer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RuncContainer_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RuncContainer_task_2eproto}, {}};

static void InitDefaultsscc_info_RuncDumpArgs_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_RuncDumpArgs_default_instance_;
    new (ptr) ::cedana::services::task::RuncDumpArgs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::RuncDumpArgs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RuncDumpArgs_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RuncDumpArgs_task_2eproto}, {
      &scc_info_CriuOpts_task_2eproto.base,
      &scc_info_ProcessState_task_2eproto.base,}};

static void InitDefaultsscc_info_RuncDumpResp_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_RuncDumpResp_default_instance_;
    new (ptr) ::cedana::services::task::RuncDumpResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::RuncDumpResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RuncDumpResp_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RuncDumpResp_task_2eproto}, {
      &scc_info_ProcessState_task_2eproto.base,
      &scc_info_DumpStats_task_2eproto.base,}};

static void InitDefaultsscc_info_RuncGetPausePidArgs_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_RuncGetPausePidArgs_default_instance_;
    new (ptr) ::cedana::services::task::RuncGetPausePidArgs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::RuncGetPausePidArgs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RuncGetPausePidArgs_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RuncGetPausePidArgs_task_2eproto}, {}};

static void InitDefaultsscc_info_RuncGetPausePidResp_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_RuncGetPausePidResp_default_instance_;
    new (ptr) ::cedana::services::task::RuncGetPausePidResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::RuncGetPausePidResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RuncGetPausePidResp_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RuncGetPausePidResp_task_2eproto}, {}};

static void InitDefaultsscc_info_RuncOpts_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_RuncOpts_default_instance_;
    new (ptr) ::cedana::services::task::RuncOpts();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::RuncOpts::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RuncOpts_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RuncOpts_task_2eproto}, {}};

static void InitDefaultsscc_info_RuncQueryArgs_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_RuncQueryArgs_default_instance_;
    new (ptr) ::cedana::services::task::RuncQueryArgs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::RuncQueryArgs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RuncQueryArgs_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RuncQueryArgs_task_2eproto}, {}};

static void InitDefaultsscc_info_RuncQueryResp_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_RuncQueryResp_default_instance_;
    new (ptr) ::cedana::services::task::RuncQueryResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::RuncQueryResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RuncQueryResp_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RuncQueryResp_task_2eproto}, {
      &scc_info_RuncContainer_task_2eproto.base,}};

static void InitDefaultsscc_info_RuncRestoreArgs_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_RuncRestoreArgs_default_instance_;
    new (ptr) ::cedana::services::task::RuncRestoreArgs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::RuncRestoreArgs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RuncRestoreArgs_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RuncRestoreArgs_task_2eproto}, {
      &scc_info_RuncOpts_task_2eproto.base,
      &scc_info_CriuOpts_task_2eproto.base,}};

static void InitDefaultsscc_info_RuncRestoreResp_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_RuncRestoreResp_default_instance_;
    new (ptr) ::cedana::services::task::RuncRestoreResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::RuncRestoreResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RuncRestoreResp_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RuncRestoreResp_task_2eproto}, {
      &scc_info_ProcessState_task_2eproto.base,
      &scc_info_RestoreStats_task_2eproto.base,}};

static void InitDefaultsscc_info_StartArgs_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_StartArgs_default_instance_;
    new (ptr) ::cedana::services::task::StartArgs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::StartArgs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartArgs_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartArgs_task_2eproto}, {}};

static void InitDefaultsscc_info_StartAttachArgs_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_StartAttachArgs_default_instance_;
    new (ptr) ::cedana::services::task::StartAttachArgs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::StartAttachArgs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StartAttachArgs_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StartAttachArgs_task_2eproto}, {
      &scc_info_StartArgs_task_2eproto.base,}};

static void InitDefaultsscc_info_StartAttachResp_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_StartAttachResp_default_instance_;
    new (ptr) ::cedana::services::task::StartAttachResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::StartAttachResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartAttachResp_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartAttachResp_task_2eproto}, {}};

static void InitDefaultsscc_info_StartResp_task_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cedana::services::task::_StartResp_default_instance_;
    new (ptr) ::cedana::services::task::StartResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cedana::services::task::StartResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartResp_task_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartResp_task_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_task_2eproto[66];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_task_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_task_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_task_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::DumpStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::DumpStats, dumptype_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::DumpStats, prepareduration_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::DumpStats, criuduration_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::DumpStats, gpuduration_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::DumpStats, uploadduration_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::DumpStats, containerruntime_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::DumpStats, kubernetes_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::DumpStats, checkpointfilestats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CheckpointFileStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CheckpointFileStats, size_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CheckpointFileStats, duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RestoreStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RestoreStats, dumptype_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RestoreStats, containerruntime_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RestoreStats, prepareduration_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RestoreStats, criuduration_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RestoreStats, gpuduration_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RestoreStats, downloadduration_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RestoreStats, checkpointfilestats_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RestoreStats, gpurestorestats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CRIOImagePushArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CRIOImagePushArgs, originalimageref_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CRIOImagePushArgs, newimageref_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CRIOImagePushArgs, rootfsdiffpath_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CRIOImagePushArgs, containerstorage_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CRIOImagePushArgs, registryauthtokenpush_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CRIOImagePushArgs, registryauthtokenpull_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CRIOImagePushResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CRIOImagePushResp, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CRIORootfsDumpArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CRIORootfsDumpArgs, containerid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CRIORootfsDumpArgs, dest_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CRIORootfsDumpArgs, containerstorage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CRIORootfsDumpResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CRIORootfsDumpResp, dest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::StartArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::StartArgs, task_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::StartArgs, jid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::StartArgs, workingdir_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::StartArgs, env_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::StartArgs, logoutputfile_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::StartArgs, uid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::StartArgs, gid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::StartArgs, gpu_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::StartArgs, groups_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::StartResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::StartResp, message_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::StartResp, pid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::StartResp, jid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::DumpArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::DumpArgs, pid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::DumpArgs, dir_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::DumpArgs, type_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::DumpArgs, jid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::DumpArgs, gpu_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::DumpArgs, stream_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::DumpArgs, criuopts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::DumpResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::DumpResp, message_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::DumpResp, checkpointid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::DumpResp, uploadid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::DumpResp, state_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::DumpResp, dumpstats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RestoreArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RestoreArgs, type_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RestoreArgs, checkpointid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RestoreArgs, checkpointpath_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RestoreArgs, jid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RestoreArgs, uid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RestoreArgs, gid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RestoreArgs, groups_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RestoreArgs, stream_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RestoreArgs, criuopts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RestoreResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RestoreResp, message_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RestoreResp, newpid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RestoreResp, state_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RestoreResp, restorestats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::QueryArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::QueryArgs, pids_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::QueryArgs, jids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::QueryResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::QueryResp, processes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdDumpArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdDumpArgs, runcdumpargs_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdDumpArgs, containerdrootfsdumpargs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdDumpResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdDumpResp, checkpointpath_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdDumpResp, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdRestoreArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdRestoreArgs, imgpath_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdRestoreArgs, containerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdRestoreResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdRestoreResp, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdQueryArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdQueryArgs, root_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdQueryArgs, namespace__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdQueryResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdQueryResp, containers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdContainer, containername_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdContainer, imagename_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdContainer, sandboxid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdContainer, sandboxname_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdContainer, sandboxnamespace_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdContainer, sandboxuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdRootfsDumpArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdRootfsDumpArgs, containerid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdRootfsDumpArgs, imageref_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdRootfsDumpArgs, address_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdRootfsDumpArgs, namespace__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdRootfsDumpResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdRootfsDumpResp, imageref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdRootfsRestoreArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdRootfsRestoreArgs, containerid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdRootfsRestoreArgs, imageref_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdRootfsRestoreArgs, address_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdRootfsRestoreArgs, namespace__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdRootfsRestoreResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerdRootfsRestoreResp, imageref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncDumpArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncDumpArgs, root_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncDumpArgs, checkpointpath_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncDumpArgs, containerid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncDumpArgs, criuopts_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncDumpArgs, type_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncDumpArgs, state_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncDumpArgs, gpu_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncDumpArgs, pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncDumpResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncDumpResp, message_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncDumpResp, checkpointid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncDumpResp, uploadid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncDumpResp, state_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncDumpResp, dumpstats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CriuOpts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CriuOpts, imagesdirectory_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CriuOpts, workdirectory_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CriuOpts, parentimage_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CriuOpts, leaverunning_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CriuOpts, tcpestablished_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CriuOpts, externalunixconnections_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CriuOpts, shelljob_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CriuOpts, filelocks_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CriuOpts, predump_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CriuOpts, stream_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CriuOpts, emptyns_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CriuOpts, autodedup_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CriuOpts, lazypages_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CriuOpts, statusfd_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CriuOpts, lsmprofile_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CriuOpts, lsmmountcontext_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CriuOpts, external_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncRestoreArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncRestoreArgs, containerid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncRestoreArgs, imagepath_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncRestoreArgs, opts_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncRestoreArgs, type_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncRestoreArgs, checkpointid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncRestoreArgs, criuopts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncRestoreResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncRestoreResp, message_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncRestoreResp, state_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncRestoreResp, restorestats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncOpts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncOpts, root_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncOpts, containerid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncOpts, bundle_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncOpts, systemdcgroup_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncOpts, nopivot_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncOpts, nomountfallback_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncOpts, nonewkeyring_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncOpts, rootless_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncOpts, nosubreaper_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncOpts, keep_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncOpts, consolesocket_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncOpts, detach_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncOpts, pidfile_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncOpts, preservefds_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncOpts, netpid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncQueryArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncQueryArgs, root_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncQueryArgs, namespace__),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncQueryArgs, containernames_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncQueryArgs, sandboxnames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncQueryResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncQueryResp, containers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncContainer, id_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncContainer, bundlepath_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncContainer, containername_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncContainer, imagename_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncContainer, sandboxid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncContainer, sandboxname_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncContainer, sandboxuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncGetPausePidArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncGetPausePidArgs, bundlepath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncGetPausePidResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RuncGetPausePidResp, pausepid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::LogStreamingArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::LogStreamingArgs, timestamp_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::LogStreamingArgs, source_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::LogStreamingArgs, level_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::LogStreamingArgs, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::LogStreamingResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::LogStreamingResp, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ProcessState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ProcessState, pid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ProcessState, task_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ProcessState, containerid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ProcessState, startedat_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ProcessState, processinfo_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ProcessState, checkpointpath_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ProcessState, checkpointstate_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ProcessState, jobstate_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ProcessState, remotestate_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ProcessState, gpucheckpointed_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ProcessState, jid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ProcessState, hostinfo_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ProcessState, cpuinfo_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ProcessState, memoryinfo_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ProcessState, uids_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ProcessState, gids_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ProcessState, groups_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RemoteState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RemoteState, checkpointid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RemoteState, uploadid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RemoteState, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ProcessInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ProcessInfo, pid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ProcessInfo, attachedtohardwareaccel_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ProcessInfo, openfds_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ProcessInfo, workingdir_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ProcessInfo, openconnections_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ProcessInfo, memorypercent_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ProcessInfo, isrunning_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ProcessInfo, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::HostInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::HostInfo, hostid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::HostInfo, hostname_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::HostInfo, os_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::HostInfo, platform_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::HostInfo, kernelversion_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::HostInfo, kernelarch_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::HostInfo, virtualizationsystem_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::HostInfo, virtualizationrole_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CPUInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CPUInfo, count_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CPUInfo, cpu_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CPUInfo, vendorid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CPUInfo, family_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CPUInfo, physicalid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::MemoryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::MemoryInfo, total_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::MemoryInfo, available_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::MemoryInfo, used_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::OpenFilesStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::OpenFilesStat, path_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::OpenFilesStat, fd_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::OpenFilesStat, mode_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::OpenFilesStat, stream_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ConnectionStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ConnectionStat, fd_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ConnectionStat, family_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ConnectionStat, type_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ConnectionStat, laddr_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ConnectionStat, raddr_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ConnectionStat, status_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ConnectionStat, uids_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ConnectionStat, pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::Addr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::Addr, ip_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::Addr, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ProcessStateStreamingArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ProcessStateStreamingArgs, jid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CheckpointReason, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::CheckpointReason, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::StartAttachArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::StartAttachArgs, args_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::StartAttachArgs, stdin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::StartAttachResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::StartAttachResp, stdout_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::StartAttachResp, stderr_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::StartAttachResp, exitcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RestoreAttachArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RestoreAttachArgs, args_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RestoreAttachArgs, stdin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RestoreAttachResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RestoreAttachResp, stdout_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RestoreAttachResp, stderr_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::RestoreAttachResp, exitcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::DetailedHealthCheckRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::DetailedHealthCheckRequest, uid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::DetailedHealthCheckRequest, gid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::DetailedHealthCheckRequest, groups_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::DetailedHealthCheckResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::DetailedHealthCheckResponse, healthcheckstats_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::DetailedHealthCheckResponse, unhealthyreasons_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::HealthCheckStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::HealthCheckStats, criuversion_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::HealthCheckStats, gpuhealthcheck_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::GetConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::GetConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::GetConfigResponse, json_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::QueueJobCheckpointRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::QueueJobCheckpointRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::QueueJobCheckpointRequest, containername_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::QueueJobCheckpointRequest, namespace__),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::QueueJobCheckpointRequest, podname_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::QueueJobCheckpointRequest, imagename_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::QueueJobCheckpointRequest, id_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::QueueJobCheckpointRequest, runtimeroot_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::QueueJobCheckpointRequest, runtimesock_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::QueueJobRestoreRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::QueueJobRestoreRequest, containername_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::QueueJobRestoreRequest, namespace__),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::QueueJobRestoreRequest, podname_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::QueueJobRestoreRequest, sourcename_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::QueueJobRestoreRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::QueueJobID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::QueueJobID, jobid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::QueueJobStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::QueueJobStatus, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerInfo, cputime_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerInfo, cpuloadavg_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerInfo, maxmemory_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerInfo, currentmemory_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerInfo, networkio_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerInfo, diskio_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerInfo, containername_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerInfo, daemonid_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerInfo, labels_),
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainerInfo, image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainersInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cedana::services::task::ContainersInfo, containers_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cedana::services::task::DumpStats)},
  { 13, -1, sizeof(::cedana::services::task::CheckpointFileStats)},
  { 20, -1, sizeof(::cedana::services::task::RestoreStats)},
  { 33, -1, sizeof(::cedana::services::task::CRIOImagePushArgs)},
  { 44, -1, sizeof(::cedana::services::task::CRIOImagePushResp)},
  { 50, -1, sizeof(::cedana::services::task::CRIORootfsDumpArgs)},
  { 58, -1, sizeof(::cedana::services::task::CRIORootfsDumpResp)},
  { 64, -1, sizeof(::cedana::services::task::StartArgs)},
  { 78, -1, sizeof(::cedana::services::task::StartResp)},
  { 86, -1, sizeof(::cedana::services::task::DumpArgs)},
  { 98, -1, sizeof(::cedana::services::task::DumpResp)},
  { 108, -1, sizeof(::cedana::services::task::RestoreArgs)},
  { 122, -1, sizeof(::cedana::services::task::RestoreResp)},
  { 131, -1, sizeof(::cedana::services::task::QueryArgs)},
  { 138, -1, sizeof(::cedana::services::task::QueryResp)},
  { 144, -1, sizeof(::cedana::services::task::ContainerdDumpArgs)},
  { 151, -1, sizeof(::cedana::services::task::ContainerdDumpResp)},
  { 158, -1, sizeof(::cedana::services::task::ContainerdRestoreArgs)},
  { 165, -1, sizeof(::cedana::services::task::ContainerdRestoreResp)},
  { 171, -1, sizeof(::cedana::services::task::ContainerdQueryArgs)},
  { 178, -1, sizeof(::cedana::services::task::ContainerdQueryResp)},
  { 184, -1, sizeof(::cedana::services::task::ContainerdContainer)},
  { 195, -1, sizeof(::cedana::services::task::ContainerdRootfsDumpArgs)},
  { 204, -1, sizeof(::cedana::services::task::ContainerdRootfsDumpResp)},
  { 210, -1, sizeof(::cedana::services::task::ContainerdRootfsRestoreArgs)},
  { 219, -1, sizeof(::cedana::services::task::ContainerdRootfsRestoreResp)},
  { 225, -1, sizeof(::cedana::services::task::RuncDumpArgs)},
  { 238, -1, sizeof(::cedana::services::task::RuncDumpResp)},
  { 248, -1, sizeof(::cedana::services::task::CriuOpts)},
  { 270, -1, sizeof(::cedana::services::task::RuncRestoreArgs)},
  { 281, -1, sizeof(::cedana::services::task::RuncRestoreResp)},
  { 289, -1, sizeof(::cedana::services::task::RuncOpts)},
  { 309, -1, sizeof(::cedana::services::task::RuncQueryArgs)},
  { 318, -1, sizeof(::cedana::services::task::RuncQueryResp)},
  { 324, -1, sizeof(::cedana::services::task::RuncContainer)},
  { 336, -1, sizeof(::cedana::services::task::RuncGetPausePidArgs)},
  { 342, -1, sizeof(::cedana::services::task::RuncGetPausePidResp)},
  { 348, -1, sizeof(::cedana::services::task::LogStreamingArgs)},
  { 357, -1, sizeof(::cedana::services::task::LogStreamingResp)},
  { 363, -1, sizeof(::cedana::services::task::ProcessState)},
  { 385, -1, sizeof(::cedana::services::task::RemoteState)},
  { 393, -1, sizeof(::cedana::services::task::ProcessInfo)},
  { 406, -1, sizeof(::cedana::services::task::HostInfo)},
  { 419, -1, sizeof(::cedana::services::task::CPUInfo)},
  { 429, -1, sizeof(::cedana::services::task::MemoryInfo)},
  { 437, -1, sizeof(::cedana::services::task::OpenFilesStat)},
  { 446, -1, sizeof(::cedana::services::task::ConnectionStat)},
  { 459, -1, sizeof(::cedana::services::task::Addr)},
  { 466, -1, sizeof(::cedana::services::task::ProcessStateStreamingArgs)},
  { 472, -1, sizeof(::cedana::services::task::CheckpointReason)},
  { 478, -1, sizeof(::cedana::services::task::StartAttachArgs)},
  { 485, -1, sizeof(::cedana::services::task::StartAttachResp)},
  { 493, -1, sizeof(::cedana::services::task::RestoreAttachArgs)},
  { 500, -1, sizeof(::cedana::services::task::RestoreAttachResp)},
  { 508, -1, sizeof(::cedana::services::task::DetailedHealthCheckRequest)},
  { 516, -1, sizeof(::cedana::services::task::DetailedHealthCheckResponse)},
  { 523, -1, sizeof(::cedana::services::task::HealthCheckStats)},
  { 530, -1, sizeof(::cedana::services::task::GetConfigRequest)},
  { 535, -1, sizeof(::cedana::services::task::GetConfigResponse)},
  { 541, 553, sizeof(::cedana::services::task::QueueJobCheckpointRequest)},
  { 560, -1, sizeof(::cedana::services::task::QueueJobRestoreRequest)},
  { 570, -1, sizeof(::cedana::services::task::QueueJobID)},
  { 576, -1, sizeof(::cedana::services::task::QueueJobStatus)},
  { 582, -1, sizeof(::cedana::services::task::ContainerInfoRequest)},
  { 587, -1, sizeof(::cedana::services::task::ContainerInfo)},
  { 602, -1, sizeof(::cedana::services::task::ContainersInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_DumpStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_CheckpointFileStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_RestoreStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_CRIOImagePushArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_CRIOImagePushResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_CRIORootfsDumpArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_CRIORootfsDumpResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_StartArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_StartResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_DumpArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_DumpResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_RestoreArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_RestoreResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_QueryArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_QueryResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_ContainerdDumpArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_ContainerdDumpResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_ContainerdRestoreArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_ContainerdRestoreResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_ContainerdQueryArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_ContainerdQueryResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_ContainerdContainer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_ContainerdRootfsDumpArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_ContainerdRootfsDumpResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_ContainerdRootfsRestoreArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_ContainerdRootfsRestoreResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_RuncDumpArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_RuncDumpResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_CriuOpts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_RuncRestoreArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_RuncRestoreResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_RuncOpts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_RuncQueryArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_RuncQueryResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_RuncContainer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_RuncGetPausePidArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_RuncGetPausePidResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_LogStreamingArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_LogStreamingResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_ProcessState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_RemoteState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_ProcessInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_HostInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_CPUInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_MemoryInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_OpenFilesStat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_ConnectionStat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_Addr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_ProcessStateStreamingArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_CheckpointReason_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_StartAttachArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_StartAttachResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_RestoreAttachArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_RestoreAttachResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_DetailedHealthCheckRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_DetailedHealthCheckResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_HealthCheckStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_GetConfigRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_GetConfigResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_QueueJobCheckpointRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_QueueJobRestoreRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_QueueJobID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_QueueJobStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_ContainerInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_ContainerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedana::services::task::_ContainersInfo_default_instance_),
};

const char descriptor_table_protodef_task_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ntask.proto\022\024cedana.services.task\032\036goog"
  "le/protobuf/wrappers.proto\032\tgpu.proto\"\260\003"
  "\n\tDumpStats\022:\n\010DumpType\030\001 \001(\0162\036.cedana.s"
  "ervices.task.DumpTypeR\010DumpType\022(\n\017Prepa"
  "reDuration\030\002 \001(\003R\017PrepareDuration\022\"\n\014CRI"
  "UDuration\030\003 \001(\003R\014CRIUDuration\022 \n\013GPUDura"
  "tion\030\004 \001(\003R\013GPUDuration\022&\n\016UploadDuratio"
  "n\030\005 \001(\003R\016UploadDuration\022R\n\020ContainerRunt"
  "ime\030\006 \001(\0162&.cedana.services.task.Contain"
  "erRuntimeR\020ContainerRuntime\022\036\n\nKubernete"
  "s\030\007 \001(\010R\nKubernetes\022[\n\023CheckpointFileSta"
  "ts\030\010 \001(\0132).cedana.services.task.Checkpoi"
  "ntFileStatsR\023CheckpointFileStats\"E\n\023Chec"
  "kpointFileStats\022\022\n\004Size\030\001 \001(\003R\004Size\022\032\n\010D"
  "uration\030\002 \001(\003R\010Duration\"\335\003\n\014RestoreStats"
  "\022:\n\010DumpType\030\001 \001(\0162\036.cedana.services.tas"
  "k.DumpTypeR\010DumpType\022R\n\020ContainerRuntime"
  "\030\002 \001(\0162&.cedana.services.task.ContainerR"
  "untimeR\020ContainerRuntime\022(\n\017PrepareDurat"
  "ion\030\003 \001(\003R\017PrepareDuration\022\"\n\014CRIUDurati"
  "on\030\004 \001(\003R\014CRIUDuration\022 \n\013GPUDuration\030\005 "
  "\001(\003R\013GPUDuration\022*\n\020DownloadDuration\030\006 \001"
  "(\003R\020DownloadDuration\022[\n\023CheckpointFileSt"
  "ats\030\007 \001(\0132).cedana.services.task.Checkpo"
  "intFileStatsR\023CheckpointFileStats\022D\n\017GPU"
  "RestoreStats\030\010 \001(\0132\032.cedanagpu.GPURestor"
  "eStatsR\017GPURestoreStats\"\241\002\n\021CRIOImagePus"
  "hArgs\022*\n\020OriginalImageRef\030\001 \001(\tR\020Origina"
  "lImageRef\022 \n\013NewImageRef\030\002 \001(\tR\013NewImage"
  "Ref\022&\n\016RootfsDiffPath\030\003 \001(\tR\016RootfsDiffP"
  "ath\022*\n\020ContainerStorage\030\004 \001(\tR\020Container"
  "Storage\0224\n\025RegistryAuthTokenPush\030\005 \001(\tR\025"
  "RegistryAuthTokenPush\0224\n\025RegistryAuthTok"
  "enPull\030\006 \001(\tR\025RegistryAuthTokenPull\"-\n\021C"
  "RIOImagePushResp\022\030\n\007Message\030\001 \001(\tR\007Messa"
  "ge\"v\n\022CRIORootfsDumpArgs\022 \n\013ContainerID\030"
  "\001 \001(\tR\013ContainerID\022\022\n\004Dest\030\002 \001(\tR\004Dest\022*"
  "\n\020ContainerStorage\030\003 \001(\tR\020ContainerStora"
  "ge\"(\n\022CRIORootfsDumpResp\022\022\n\004Dest\030\001 \001(\tR\004"
  "Dest\"\327\001\n\tStartArgs\022\022\n\004Task\030\001 \001(\tR\004Task\022\020"
  "\n\003JID\030\002 \001(\tR\003JID\022\036\n\nWorkingDir\030\003 \001(\tR\nWo"
  "rkingDir\022\020\n\003Env\030\004 \003(\tR\003Env\022$\n\rLogOutputF"
  "ile\030\005 \001(\tR\rLogOutputFile\022\020\n\003UID\030\006 \001(\005R\003U"
  "ID\022\020\n\003GID\030\007 \001(\005R\003GID\022\020\n\003GPU\030\010 \001(\010R\003GPU\022\026"
  "\n\006Groups\030\t \003(\005R\006Groups\"I\n\tStartResp\022\030\n\007M"
  "essage\030\001 \001(\tR\007Message\022\020\n\003PID\030\002 \001(\005R\003PID\022"
  "\020\n\003JID\030\003 \001(\tR\003JID\"\330\001\n\010DumpArgs\022\020\n\003PID\030\001 "
  "\001(\005R\003PID\022\020\n\003Dir\030\002 \001(\tR\003Dir\0220\n\004Type\030\003 \001(\016"
  "2\034.cedana.services.task.CRTypeR\004Type\022\020\n\003"
  "JID\030\004 \001(\tR\003JID\022\020\n\003GPU\030\005 \001(\010R\003GPU\022\026\n\006Stre"
  "am\030\006 \001(\010R\006Stream\022:\n\010CriuOpts\030\007 \001(\0132\036.ced"
  "ana.services.task.CriuOptsR\010CriuOpts\"\335\001\n"
  "\010DumpResp\022\030\n\007Message\030\001 \001(\tR\007Message\022\"\n\014C"
  "heckpointID\030\002 \001(\tR\014CheckpointID\022\032\n\010Uploa"
  "dID\030\003 \001(\tR\010UploadID\0228\n\005State\030\004 \001(\0132\".ced"
  "ana.services.task.ProcessStateR\005State\022=\n"
  "\tDumpStats\030\005 \001(\0132\037.cedana.services.task."
  "DumpStatsR\tDumpStats\"\255\002\n\013RestoreArgs\0220\n\004"
  "Type\030\001 \001(\0162\034.cedana.services.task.CRType"
  "R\004Type\022\"\n\014CheckpointID\030\002 \001(\tR\014Checkpoint"
  "ID\022&\n\016CheckpointPath\030\003 \001(\tR\016CheckpointPa"
  "th\022\020\n\003JID\030\004 \001(\tR\003JID\022\020\n\003UID\030\005 \001(\005R\003UID\022\020"
  "\n\003GID\030\006 \001(\005R\003GID\022\026\n\006Groups\030\007 \003(\005R\006Groups"
  "\022\026\n\006Stream\030\010 \001(\010R\006Stream\022:\n\010CriuOpts\030\t \001"
  "(\0132\036.cedana.services.task.CriuOptsR\010Criu"
  "Opts\"\301\001\n\013RestoreResp\022\030\n\007Message\030\001 \001(\tR\007M"
  "essage\022\026\n\006NewPID\030\002 \001(\005R\006NewPID\0228\n\005State\030"
  "\003 \001(\0132\".cedana.services.task.ProcessStat"
  "eR\005State\022F\n\014RestoreStats\030\006 \001(\0132\".cedana."
  "services.task.RestoreStatsR\014RestoreStats"
  "\"3\n\tQueryArgs\022\022\n\004PIDs\030\001 \003(\005R\004PIDs\022\022\n\004JID"
  "s\030\002 \003(\tR\004JIDs\"M\n\tQueryResp\022@\n\tProcesses\030"
  "\001 \003(\0132\".cedana.services.task.ProcessStat"
  "eR\tProcesses\"\310\001\n\022ContainerdDumpArgs\022F\n\014R"
  "uncDumpArgs\030\001 \001(\0132\".cedana.services.task"
  ".RuncDumpArgsR\014RuncDumpArgs\022j\n\030Container"
  "dRootfsDumpArgs\030\002 \001(\0132..cedana.services."
  "task.ContainerdRootfsDumpArgsR\030Container"
  "dRootfsDumpArgs\"V\n\022ContainerdDumpResp\022&\n"
  "\016CheckpointPath\030\001 \001(\tR\016CheckpointPath\022\030\n"
  "\007Message\030\002 \001(\tR\007Message\"S\n\025ContainerdRes"
  "toreArgs\022\030\n\007ImgPath\030\001 \001(\tR\007ImgPath\022 \n\013Co"
  "ntainerID\030\002 \001(\tR\013ContainerID\"1\n\025Containe"
  "rdRestoreResp\022\030\n\007Message\030\001 \001(\tR\007Message\""
  "G\n\023ContainerdQueryArgs\022\022\n\004Root\030\001 \001(\tR\004Ro"
  "ot\022\034\n\tNamespace\030\002 \001(\tR\tNamespace\"`\n\023Cont"
  "ainerdQueryResp\022I\n\nContainers\030\001 \003(\0132).ce"
  "dana.services.task.ContainerdContainerR\n"
  "Containers\"\345\001\n\023ContainerdContainer\022$\n\rCo"
  "ntainerName\030\001 \001(\tR\rContainerName\022\034\n\tImag"
  "eName\030\002 \001(\tR\tImageName\022\034\n\tSandboxId\030\003 \001("
  "\tR\tSandboxId\022 \n\013SandboxName\030\004 \001(\tR\013Sandb"
  "oxName\022*\n\020SandboxNamespace\030\005 \001(\tR\020Sandbo"
  "xNamespace\022\036\n\nSandboxUid\030\006 \001(\tR\nSandboxU"
  "id\"\220\001\n\030ContainerdRootfsDumpArgs\022 \n\013Conta"
  "inerID\030\001 \001(\tR\013ContainerID\022\032\n\010ImageRef\030\002 "
  "\001(\tR\010ImageRef\022\030\n\007Address\030\003 \001(\tR\007Address\022"
  "\034\n\tNamespace\030\004 \001(\tR\tNamespace\"6\n\030Contain"
  "erdRootfsDumpResp\022\032\n\010ImageRef\030\001 \001(\tR\010Ima"
  "geRef\"\223\001\n\033ContainerdRootfsRestoreArgs\022 \n"
  "\013ContainerID\030\001 \001(\tR\013ContainerID\022\032\n\010Image"
  "Ref\030\002 \001(\tR\010ImageRef\022\030\n\007Address\030\003 \001(\tR\007Ad"
  "dress\022\034\n\tNamespace\030\004 \001(\tR\tNamespace\"9\n\033C"
  "ontainerdRootfsRestoreResp\022\032\n\010ImageRef\030\001"
  " \001(\tR\010ImageRef\"\270\002\n\014RuncDumpArgs\022\022\n\004Root\030"
  "\001 \001(\tR\004Root\022&\n\016CheckpointPath\030\002 \001(\tR\016Che"
  "ckpointPath\022 \n\013ContainerID\030\003 \001(\tR\013Contai"
  "nerID\022:\n\010CriuOpts\030\004 \001(\0132\036.cedana.service"
  "s.task.CriuOptsR\010CriuOpts\0220\n\004Type\030\005 \001(\0162"
  "\034.cedana.services.task.CRTypeR\004Type\0228\n\005s"
  "tate\030\006 \001(\0132\".cedana.services.task.Proces"
  "sStateR\005state\022\020\n\003GPU\030\007 \001(\010R\003GPU\022\020\n\003pid\030\010"
  " \001(\005R\003pid\"\341\001\n\014RuncDumpResp\022\030\n\007Message\030\001 "
  "\001(\tR\007Message\022\"\n\014CheckpointID\030\002 \001(\tR\014Chec"
  "kpointID\022\032\n\010UploadID\030\003 \001(\tR\010UploadID\0228\n\005"
  "State\030\004 \001(\0132\".cedana.services.task.Proce"
  "ssStateR\005State\022=\n\tDumpStats\030\005 \001(\0132\037.ceda"
  "na.services.task.DumpStatsR\tDumpStats\"\306\004"
  "\n\010CriuOpts\022(\n\017ImagesDirectory\030\001 \001(\tR\017Ima"
  "gesDirectory\022$\n\rWorkDirectory\030\002 \001(\tR\rWor"
  "kDirectory\022 \n\013ParentImage\030\003 \001(\tR\013ParentI"
  "mage\022\"\n\014LeaveRunning\030\004 \001(\010R\014LeaveRunning"
  "\022&\n\016TcpEstablished\030\005 \001(\010R\016TcpEstablished"
  "\0228\n\027ExternalUnixConnections\030\006 \001(\010R\027Exter"
  "nalUnixConnections\022\032\n\010ShellJob\030\007 \001(\010R\010Sh"
  "ellJob\022\034\n\tFileLocks\030\010 \001(\010R\tFileLocks\022\030\n\007"
  "PreDump\030\t \001(\010R\007PreDump\022\026\n\006Stream\030\n \001(\010R\006"
  "Stream\022\030\n\007EmptyNs\030\014 \001(\005R\007EmptyNs\022\034\n\tAuto"
  "Dedup\030\r \001(\010R\tAutoDedup\022\034\n\tLazyPages\030\016 \001("
  "\010R\tLazyPages\022\032\n\010StatusFd\030\017 \001(\005R\010StatusFd"
  "\022\036\n\nLsmProfile\030\020 \001(\tR\nLsmProfile\022(\n\017LsmM"
  "ountContext\030\021 \001(\tR\017LsmMountContext\022\032\n\010Ex"
  "ternal\030\022 \003(\tR\010External\"\227\002\n\017RuncRestoreAr"
  "gs\022 \n\013ContainerID\030\001 \001(\tR\013ContainerID\022\034\n\t"
  "ImagePath\030\002 \001(\tR\tImagePath\0222\n\004Opts\030\003 \001(\013"
  "2\036.cedana.services.task.RuncOptsR\004Opts\0220"
  "\n\004Type\030\004 \001(\0162\034.cedana.services.task.CRTy"
  "peR\004Type\022\"\n\014CheckpointID\030\005 \001(\tR\014Checkpoi"
  "ntID\022:\n\010CriuOpts\030\006 \001(\0132\036.cedana.services"
  ".task.CriuOptsR\010CriuOpts\"\255\001\n\017RuncRestore"
  "Resp\022\030\n\007Message\030\001 \001(\tR\007Message\0228\n\005State\030"
  "\002 \001(\0132\".cedana.services.task.ProcessStat"
  "eR\005State\022F\n\014RestoreStats\030\003 \001(\0132\".cedana."
  "services.task.RestoreStatsR\014RestoreStats"
  "\"\312\003\n\010RuncOpts\022\022\n\004Root\030\001 \001(\tR\004Root\022 \n\013Con"
  "tainerID\030\002 \001(\tR\013ContainerID\022\026\n\006Bundle\030\003 "
  "\001(\tR\006Bundle\022$\n\rSystemdCgroup\030\004 \001(\010R\rSyst"
  "emdCgroup\022\030\n\007NoPivot\030\005 \001(\010R\007NoPivot\022(\n\017N"
  "oMountFallback\030\006 \001(\010R\017NoMountFallback\022\"\n"
  "\014NoNewKeyring\030\007 \001(\010R\014NoNewKeyring\022\032\n\010Roo"
  "tless\030\010 \001(\tR\010Rootless\022 \n\013NoSubreaper\030\t \001"
  "(\010R\013NoSubreaper\022\022\n\004Keep\030\n \001(\010R\004Keep\022$\n\rC"
  "onsoleSocket\030\013 \001(\tR\rConsoleSocket\022\026\n\006Det"
  "ach\030\014 \001(\010R\006Detach\022\030\n\007PidFile\030\r \001(\tR\007PidF"
  "ile\022 \n\013PreserveFds\030\016 \001(\005R\013PreserveFds\022\026\n"
  "\006NetPid\030\017 \001(\005R\006NetPid\"\215\001\n\rRuncQueryArgs\022"
  "\022\n\004Root\030\001 \001(\tR\004Root\022\034\n\tNamespace\030\002 \001(\tR\t"
  "Namespace\022&\n\016ContainerNames\030\003 \003(\tR\016Conta"
  "inerNames\022\"\n\014SandboxNames\030\004 \003(\tR\014Sandbox"
  "Names\"T\n\rRuncQueryResp\022C\n\nContainers\030\001 \003"
  "(\0132#.cedana.services.task.RuncContainerR"
  "\nContainers\"\343\001\n\rRuncContainer\022\016\n\002ID\030\001 \001("
  "\tR\002ID\022\036\n\nBundlePath\030\002 \001(\tR\nBundlePath\022$\n"
  "\rContainerName\030\003 \001(\tR\rContainerName\022\034\n\tI"
  "mageName\030\004 \001(\tR\tImageName\022\034\n\tSandboxId\030\005"
  " \001(\tR\tSandboxId\022 \n\013SandboxName\030\006 \001(\tR\013Sa"
  "ndboxName\022\036\n\nSandboxUid\030\007 \001(\tR\nSandboxUi"
  "d\"5\n\023RuncGetPausePidArgs\022\036\n\nBundlePath\030\001"
  " \001(\tR\nBundlePath\"1\n\023RuncGetPausePidResp\022"
  "\032\n\010PausePid\030\001 \001(\003R\010PausePid\"p\n\020LogStream"
  "ingArgs\022\034\n\tTimestamp\030\001 \001(\tR\tTimestamp\022\026\n"
  "\006Source\030\002 \001(\tR\006Source\022\024\n\005Level\030\003 \001(\tR\005Le"
  "vel\022\020\n\003Msg\030\004 \001(\tR\003Msg\"*\n\020LogStreamingRes"
  "p\022\026\n\006Status\030\001 \001(\tR\006Status\"\346\005\n\014ProcessSta"
  "te\022\020\n\003PID\030\001 \001(\005R\003PID\022\022\n\004Task\030\002 \001(\tR\004Task"
  "\022 \n\013ContainerID\030\004 \001(\tR\013ContainerID\022\034\n\tSt"
  "artedAt\030\005 \001(\tR\tStartedAt\022C\n\013ProcessInfo\030"
  "\006 \001(\0132!.cedana.services.task.ProcessInfo"
  "R\013ProcessInfo\022&\n\016CheckpointPath\030\007 \001(\tR\016C"
  "heckpointPath\022O\n\017CheckpointState\030\010 \001(\0162%"
  ".cedana.services.task.CheckpointStateR\017C"
  "heckpointState\022:\n\010JobState\030\t \001(\0162\036.cedan"
  "a.services.task.JobStateR\010JobState\022C\n\013Re"
  "moteState\030\n \003(\0132!.cedana.services.task.R"
  "emoteStateR\013RemoteState\022(\n\017GPUCheckpoint"
  "ed\030\013 \001(\010R\017GPUCheckpointed\022\020\n\003JID\030\014 \001(\tR\003"
  "JID\022:\n\010HostInfo\030\r \001(\0132\036.cedana.services."
  "task.HostInfoR\010HostInfo\0227\n\007CPUInfo\030\016 \001(\013"
  "2\035.cedana.services.task.CPUInfoR\007CPUInfo"
  "\022@\n\nMemoryInfo\030\017 \001(\0132 .cedana.services.t"
  "ask.MemoryInfoR\nMemoryInfo\022\022\n\004UIDs\030\020 \003(\005"
  "R\004UIDs\022\022\n\004GIDs\030\021 \003(\005R\004GIDs\022\026\n\006Groups\030\022 \003"
  "(\005R\006Groups\"k\n\013RemoteState\022\"\n\014CheckpointI"
  "D\030\001 \001(\tR\014CheckpointID\022\032\n\010UploadID\030\002 \001(\tR"
  "\010UploadID\022\034\n\tTimestamp\030\003 \001(\003R\tTimestamp\""
  "\344\002\n\013ProcessInfo\022\020\n\003PID\030\001 \001(\005R\003PID\0228\n\027Att"
  "achedToHardwareAccel\030\002 \001(\010R\027AttachedToHa"
  "rdwareAccel\022=\n\007OpenFds\030\003 \003(\0132#.cedana.se"
  "rvices.task.OpenFilesStatR\007OpenFds\022\036\n\nWo"
  "rkingDir\030\004 \001(\tR\nWorkingDir\022N\n\017OpenConnec"
  "tions\030\005 \003(\0132$.cedana.services.task.Conne"
  "ctionStatR\017OpenConnections\022$\n\rMemoryPerc"
  "ent\030\006 \001(\002R\rMemoryPercent\022\034\n\tIsRunning\030\007 "
  "\001(\010R\tIsRunning\022\026\n\006Status\030\010 \001(\tR\006Status\"\224"
  "\002\n\010HostInfo\022\026\n\006HostID\030\001 \001(\tR\006HostID\022\032\n\010H"
  "ostname\030\004 \001(\tR\010Hostname\022\016\n\002OS\030\005 \001(\tR\002OS\022"
  "\032\n\010Platform\030\006 \001(\tR\010Platform\022$\n\rKernelVer"
  "sion\030\007 \001(\tR\rKernelVersion\022\036\n\nKernelArch\030"
  "\010 \001(\tR\nKernelArch\0222\n\024VirtualizationSyste"
  "m\030\t \001(\tR\024VirtualizationSystem\022.\n\022Virtual"
  "izationRole\030\n \001(\tR\022VirtualizationRole\"\205\001"
  "\n\007CPUInfo\022\024\n\005Count\030\001 \001(\005R\005Count\022\020\n\003CPU\030\002"
  " \001(\005R\003CPU\022\032\n\010VendorID\030\003 \001(\tR\010VendorID\022\026\n"
  "\006Family\030\004 \001(\tR\006Family\022\036\n\nPhysicalID\030\005 \001("
  "\tR\nPhysicalID\"T\n\nMemoryInfo\022\024\n\005Total\030\001 \001"
  "(\004R\005Total\022\034\n\tAvailable\030\002 \001(\004R\tAvailable\022"
  "\022\n\004Used\030\003 \001(\004R\004Used\"\312\001\n\rOpenFilesStat\022\022\n"
  "\004Path\030\001 \001(\tR\004Path\022\016\n\002Fd\030\002 \001(\004R\002Fd\022\022\n\004Mod"
  "e\030\003 \001(\tR\004Mode\022F\n\006Stream\030\005 \001(\0162..cedana.s"
  "ervices.task.OpenFilesStat.StreamTypeR\006S"
  "tream\"9\n\nStreamType\022\t\n\005STDIN\020\000\022\n\n\006STDOUT"
  "\020\001\022\n\n\006STDERR\020\002\022\010\n\004NONE\020\003\"\356\001\n\016ConnectionS"
  "tat\022\016\n\002Fd\030\001 \001(\rR\002Fd\022\026\n\006Family\030\002 \001(\rR\006Fam"
  "ily\022\022\n\004Type\030\003 \001(\rR\004Type\0220\n\005Laddr\030\004 \001(\0132\032"
  ".cedana.services.task.AddrR\005Laddr\0220\n\005Rad"
  "dr\030\005 \001(\0132\032.cedana.services.task.AddrR\005Ra"
  "ddr\022\026\n\006Status\030\006 \001(\tR\006Status\022\022\n\004UIDs\030\007 \003("
  "\005R\004UIDs\022\020\n\003PID\030\010 \001(\005R\003PID\"*\n\004Addr\022\016\n\002IP\030"
  "\001 \001(\tR\002IP\022\022\n\004Port\030\002 \001(\rR\004Port\"-\n\031Process"
  "StateStreamingArgs\022\020\n\003JID\030\001 \001(\tR\003JID\"\275\001\n"
  "\020CheckpointReason\022S\n\006Reason\030\001 \001(\0162;.ceda"
  "na.services.task.CheckpointReason.Checkp"
  "ointReasonEnumR\006Reason\"T\n\024CheckpointReas"
  "onEnum\022\030\n\024INSTANCE_TERMINATION\020\000\022\023\n\017JOB_"
  "TERMINATION\020\001\022\r\n\tHEARTBEAT\020\002\"\\\n\017StartAtt"
  "achArgs\0223\n\004Args\030\001 \001(\0132\037.cedana.services."
  "task.StartArgsR\004Args\022\024\n\005Stdin\030\002 \001(\tR\005Std"
  "in\"]\n\017StartAttachResp\022\026\n\006Stdout\030\001 \001(\tR\006S"
  "tdout\022\026\n\006Stderr\030\002 \001(\tR\006Stderr\022\032\n\010ExitCod"
  "e\030\003 \001(\005R\010ExitCode\"`\n\021RestoreAttachArgs\0225"
  "\n\004Args\030\001 \001(\0132!.cedana.services.task.Rest"
  "oreArgsR\004Args\022\024\n\005Stdin\030\002 \001(\tR\005Stdin\"_\n\021R"
  "estoreAttachResp\022\026\n\006Stdout\030\001 \001(\tR\006Stdout"
  "\022\026\n\006Stderr\030\002 \001(\tR\006Stderr\022\032\n\010ExitCode\030\003 \001"
  "(\005R\010ExitCode\"X\n\032DetailedHealthCheckReque"
  "st\022\020\n\003UID\030\001 \001(\005R\003UID\022\020\n\003GID\030\002 \001(\005R\003GID\022\026"
  "\n\006Groups\030\003 \003(\005R\006Groups\"\235\001\n\033DetailedHealt"
  "hCheckResponse\022R\n\020HealthCheckStats\030\001 \001(\013"
  "2&.cedana.services.task.HealthCheckStats"
  "R\020HealthCheckStats\022*\n\020unhealthyReasons\030\002"
  " \003(\tR\020unhealthyReasons\"|\n\020HealthCheckSta"
  "ts\022 \n\013criuVersion\030\001 \001(\tR\013criuVersion\022F\n\016"
  "GPUHealthCheck\030\002 \001(\0132\036.cedanagpu.HealthC"
  "heckResponseR\016GPUHealthCheck\"\022\n\020GetConfi"
  "gRequest\"\'\n\021GetConfigResponse\022\022\n\004JSON\030\001 "
  "\001(\tR\004JSON\"\225\002\n\031QueueJobCheckpointRequest\022"
  "$\n\rContainerName\030\001 \001(\tR\rContainerName\022\034\n"
  "\tNamespace\030\002 \001(\tR\tNamespace\022\030\n\007PodName\030\003"
  " \001(\tR\007PodName\022\034\n\tImageName\030\004 \001(\tR\tImageN"
  "ame\022\016\n\002Id\030\005 \001(\tR\002Id\022%\n\013RuntimeRoot\030\006 \001(\t"
  "H\000R\013RuntimeRoot\210\001\001\022%\n\013RuntimeSock\030\007 \001(\tH"
  "\001R\013RuntimeSock\210\001\001B\016\n\014_RuntimeRootB\016\n\014_Ru"
  "ntimeSock\"\246\001\n\026QueueJobRestoreRequest\022$\n\r"
  "ContainerName\030\001 \001(\tR\rContainerName\022\034\n\tNa"
  "mespace\030\002 \001(\tR\tNamespace\022\030\n\007PodName\030\003 \001("
  "\tR\007PodName\022\036\n\nSourceName\030\004 \001(\tR\nSourceNa"
  "me\022\016\n\002Id\030\005 \001(\tR\002Id\"\"\n\nQueueJobID\022\024\n\005JobI"
  "D\030\001 \001(\tR\005JobID\"R\n\016QueueJobStatus\022@\n\006Stat"
  "us\030\001 \001(\0162(.cedana.services.task.QueueJob"
  "StatusEnumR\006Status\"\026\n\024ContainerInfoReque"
  "st\"\263\002\n\rContainerInfo\022\030\n\007CpuTime\030\001 \001(\001R\007C"
  "puTime\022\036\n\nCpuLoadAvg\030\002 \001(\001R\nCpuLoadAvg\022\034"
  "\n\tMaxMemory\030\003 \001(\001R\tMaxMemory\022$\n\rCurrentM"
  "emory\030\004 \001(\001R\rCurrentMemory\022\034\n\tNetworkIO\030"
  "\005 \001(\001R\tNetworkIO\022\026\n\006DiskIO\030\006 \001(\001R\006DiskIO"
  "\022$\n\rContainerName\030\007 \001(\tR\rContainerName\022\032"
  "\n\010DaemonId\030\010 \001(\tR\010DaemonId\022\026\n\006Labels\030\t \003"
  "(\tR\006Labels\022\024\n\005Image\030\n \001(\tR\005Image\"U\n\016Cont"
  "ainersInfo\022C\n\ncontainers\030\001 \003(\0132#.cedana."
  "services.task.ContainerInfoR\ncontainers*"
  "7\n\010DumpType\022\013\n\007PROCESS\020\000\022\010\n\004RUNC\020\001\022\010\n\004KA"
  "TA\020\002\022\n\n\006ROOTFS\020\003*,\n\020ContainerRuntime\022\010\n\004"
  "CRIO\020\000\022\016\n\nCONTAINERD\020\001*\037\n\006CRType\022\t\n\005LOCA"
  "L\020\000\022\n\n\006REMOTE\020\001*p\n\010JobState\022\026\n\022JOB_START"
  "UP_FAILED\020\000\022\016\n\nJOB_KILLED\020\001\022\014\n\010JOB_IDLE\020"
  "\002\022\017\n\013JOB_RUNNING\020\003\022\017\n\013JOB_PENDING\020\004\022\014\n\010J"
  "OB_DONE\020\005*\\\n\017CheckpointState\022\020\n\014CHECKPOI"
  "NTED\020\000\022\025\n\021CHECKPOINT_FAILED\020\001\022\014\n\010RESTORE"
  "D\020\002\022\022\n\016RESTORE_FAILED\020\003*\252\001\n\022QueueJobStat"
  "usEnum\022\025\n\021StatusUnvalidated\020\000\022\021\n\rStatusW"
  "aiting\020\001\022\020\n\014StatusActive\020\002\022\016\n\nStatusFail"
  "\020\003\022\021\n\rStatusSuccess\020\004\022\021\n\rStatusInvalid\020\005"
  "\022\017\n\013StatusEnded\020\006\022\021\n\rStatusUnknown\020\0072\275\024\n"
  "\013TaskService\022I\n\005Start\022\037.cedana.services."
  "task.StartArgs\032\037.cedana.services.task.St"
  "artResp\022F\n\004Dump\022\036.cedana.services.task.D"
  "umpArgs\032\036.cedana.services.task.DumpResp\022"
  "O\n\007Restore\022!.cedana.services.task.Restor"
  "eArgs\032!.cedana.services.task.RestoreResp"
  "\022I\n\005Query\022\037.cedana.services.task.QueryAr"
  "gs\032\037.cedana.services.task.QueryResp\022d\n\016C"
  "ontainerdDump\022(.cedana.services.task.Con"
  "tainerdDumpArgs\032(.cedana.services.task.C"
  "ontainerdDumpResp\022m\n\021ContainerdRestore\022+"
  ".cedana.services.task.ContainerdRestoreA"
  "rgs\032+.cedana.services.task.ContainerdRes"
  "toreResp\022g\n\017ContainerdQuery\022).cedana.ser"
  "vices.task.ContainerdQueryArgs\032).cedana."
  "services.task.ContainerdQueryResp\022v\n\024Con"
  "tainerdRootfsDump\022..cedana.services.task"
  ".ContainerdRootfsDumpArgs\032..cedana.servi"
  "ces.task.ContainerdRootfsDumpResp\022\177\n\027Con"
  "tainerdRootfsRestore\0221.cedana.services.t"
  "ask.ContainerdRootfsRestoreArgs\0321.cedana"
  ".services.task.ContainerdRootfsRestoreRe"
  "sp\022R\n\010RuncDump\022\".cedana.services.task.Ru"
  "ncDumpArgs\032\".cedana.services.task.RuncDu"
  "mpResp\022[\n\013RuncRestore\022%.cedana.services."
  "task.RuncRestoreArgs\032%.cedana.services.t"
  "ask.RuncRestoreResp\022U\n\tRuncQuery\022#.cedan"
  "a.services.task.RuncQueryArgs\032#.cedana.s"
  "ervices.task.RuncQueryResp\022g\n\017RuncGetPau"
  "sePid\022).cedana.services.task.RuncGetPaus"
  "ePidArgs\032).cedana.services.task.RuncGetP"
  "ausePidResp\022d\n\016CRIORootfsDump\022(.cedana.s"
  "ervices.task.CRIORootfsDumpArgs\032(.cedana"
  ".services.task.CRIORootfsDumpResp\022a\n\rCRI"
  "OImagePush\022\'.cedana.services.task.CRIOIm"
  "agePushArgs\032\'.cedana.services.task.CRIOI"
  "magePushResp\022_\n\013StartAttach\022%.cedana.ser"
  "vices.task.StartAttachArgs\032%.cedana.serv"
  "ices.task.StartAttachResp(\0010\001\022e\n\rRestore"
  "Attach\022\'.cedana.services.task.RestoreAtt"
  "achArgs\032\'.cedana.services.task.RestoreAt"
  "tachResp(\0010\001\022b\n\014LogStreaming\022&.cedana.se"
  "rvices.task.LogStreamingResp\032&.cedana.se"
  "rvices.task.LogStreamingArgs(\0010\001\022n\n\025Proc"
  "essStateStreaming\022/.cedana.services.task"
  ".ProcessStateStreamingArgs\032\".cedana.serv"
  "ices.task.ProcessState0\001\022|\n\023DetailedHeal"
  "thCheck\0220.cedana.services.task.DetailedH"
  "ealthCheckRequest\0321.cedana.services.task"
  ".DetailedHealthCheckResponse\"\000\022J\n\010KataDu"
  "mp\022\036.cedana.services.task.DumpArgs\032\036.ced"
  "ana.services.task.DumpResp\022S\n\013KataRestor"
  "e\022!.cedana.services.task.RestoreArgs\032!.c"
  "edana.services.task.RestoreResp\022^\n\tGetCo"
  "nfig\022&.cedana.services.task.GetConfigReq"
  "uest\032\'.cedana.services.task.GetConfigRes"
  "ponse\"\000\022^\n\017QueueCheckpoint\022/.cedana.serv"
  "ices.task.QueueJobCheckpointRequest\032\032.go"
  "ogle.protobuf.BoolValue\022X\n\014QueueRestore\022"
  ",.cedana.services.task.QueueJobRestoreRe"
  "quest\032\032.google.protobuf.BoolValue\022S\n\tJob"
  "Status\022 .cedana.services.task.QueueJobID"
  "\032$.cedana.services.task.QueueJobStatus\022d"
  "\n\020GetContainerInfo\022*.cedana.services.tas"
  "k.ContainerInfoRequest\032$.cedana.services"
  ".task.ContainersInfoB\250\001\n\030com.cedana.serv"
  "ices.taskB\tTaskProtoP\001Z\017cedana-api/task\242"
  "\002\003CST\252\002\024Cedana.Services.Task\312\002\024Cedana\\Se"
  "rvices\\Task\342\002 Cedana\\Services\\Task\\GPBMe"
  "tadata\352\002\026Cedana::Services::Taskb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_task_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_gpu_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_task_2eproto_sccs[66] = {
  &scc_info_Addr_task_2eproto.base,
  &scc_info_CPUInfo_task_2eproto.base,
  &scc_info_CRIOImagePushArgs_task_2eproto.base,
  &scc_info_CRIOImagePushResp_task_2eproto.base,
  &scc_info_CRIORootfsDumpArgs_task_2eproto.base,
  &scc_info_CRIORootfsDumpResp_task_2eproto.base,
  &scc_info_CheckpointFileStats_task_2eproto.base,
  &scc_info_CheckpointReason_task_2eproto.base,
  &scc_info_ConnectionStat_task_2eproto.base,
  &scc_info_ContainerInfo_task_2eproto.base,
  &scc_info_ContainerInfoRequest_task_2eproto.base,
  &scc_info_ContainerdContainer_task_2eproto.base,
  &scc_info_ContainerdDumpArgs_task_2eproto.base,
  &scc_info_ContainerdDumpResp_task_2eproto.base,
  &scc_info_ContainerdQueryArgs_task_2eproto.base,
  &scc_info_ContainerdQueryResp_task_2eproto.base,
  &scc_info_ContainerdRestoreArgs_task_2eproto.base,
  &scc_info_ContainerdRestoreResp_task_2eproto.base,
  &scc_info_ContainerdRootfsDumpArgs_task_2eproto.base,
  &scc_info_ContainerdRootfsDumpResp_task_2eproto.base,
  &scc_info_ContainerdRootfsRestoreArgs_task_2eproto.base,
  &scc_info_ContainerdRootfsRestoreResp_task_2eproto.base,
  &scc_info_ContainersInfo_task_2eproto.base,
  &scc_info_CriuOpts_task_2eproto.base,
  &scc_info_DetailedHealthCheckRequest_task_2eproto.base,
  &scc_info_DetailedHealthCheckResponse_task_2eproto.base,
  &scc_info_DumpArgs_task_2eproto.base,
  &scc_info_DumpResp_task_2eproto.base,
  &scc_info_DumpStats_task_2eproto.base,
  &scc_info_GetConfigRequest_task_2eproto.base,
  &scc_info_GetConfigResponse_task_2eproto.base,
  &scc_info_HealthCheckStats_task_2eproto.base,
  &scc_info_HostInfo_task_2eproto.base,
  &scc_info_LogStreamingArgs_task_2eproto.base,
  &scc_info_LogStreamingResp_task_2eproto.base,
  &scc_info_MemoryInfo_task_2eproto.base,
  &scc_info_OpenFilesStat_task_2eproto.base,
  &scc_info_ProcessInfo_task_2eproto.base,
  &scc_info_ProcessState_task_2eproto.base,
  &scc_info_ProcessStateStreamingArgs_task_2eproto.base,
  &scc_info_QueryArgs_task_2eproto.base,
  &scc_info_QueryResp_task_2eproto.base,
  &scc_info_QueueJobCheckpointRequest_task_2eproto.base,
  &scc_info_QueueJobID_task_2eproto.base,
  &scc_info_QueueJobRestoreRequest_task_2eproto.base,
  &scc_info_QueueJobStatus_task_2eproto.base,
  &scc_info_RemoteState_task_2eproto.base,
  &scc_info_RestoreArgs_task_2eproto.base,
  &scc_info_RestoreAttachArgs_task_2eproto.base,
  &scc_info_RestoreAttachResp_task_2eproto.base,
  &scc_info_RestoreResp_task_2eproto.base,
  &scc_info_RestoreStats_task_2eproto.base,
  &scc_info_RuncContainer_task_2eproto.base,
  &scc_info_RuncDumpArgs_task_2eproto.base,
  &scc_info_RuncDumpResp_task_2eproto.base,
  &scc_info_RuncGetPausePidArgs_task_2eproto.base,
  &scc_info_RuncGetPausePidResp_task_2eproto.base,
  &scc_info_RuncOpts_task_2eproto.base,
  &scc_info_RuncQueryArgs_task_2eproto.base,
  &scc_info_RuncQueryResp_task_2eproto.base,
  &scc_info_RuncRestoreArgs_task_2eproto.base,
  &scc_info_RuncRestoreResp_task_2eproto.base,
  &scc_info_StartArgs_task_2eproto.base,
  &scc_info_StartAttachArgs_task_2eproto.base,
  &scc_info_StartAttachResp_task_2eproto.base,
  &scc_info_StartResp_task_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_task_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_task_2eproto = {
  false, false, descriptor_table_protodef_task_2eproto, "task.proto", 14519,
  &descriptor_table_task_2eproto_once, descriptor_table_task_2eproto_sccs, descriptor_table_task_2eproto_deps, 66, 2,
  schemas, file_default_instances, TableStruct_task_2eproto::offsets,
  file_level_metadata_task_2eproto, 66, file_level_enum_descriptors_task_2eproto, file_level_service_descriptors_task_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_task_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_task_2eproto)), true);
namespace cedana {
namespace services {
namespace task {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpenFilesStat_StreamType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_task_2eproto);
  return file_level_enum_descriptors_task_2eproto[0];
}
bool OpenFilesStat_StreamType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr OpenFilesStat_StreamType OpenFilesStat::STDIN;
constexpr OpenFilesStat_StreamType OpenFilesStat::STDOUT;
constexpr OpenFilesStat_StreamType OpenFilesStat::STDERR;
constexpr OpenFilesStat_StreamType OpenFilesStat::NONE;
constexpr OpenFilesStat_StreamType OpenFilesStat::StreamType_MIN;
constexpr OpenFilesStat_StreamType OpenFilesStat::StreamType_MAX;
constexpr int OpenFilesStat::StreamType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CheckpointReason_CheckpointReasonEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_task_2eproto);
  return file_level_enum_descriptors_task_2eproto[1];
}
bool CheckpointReason_CheckpointReasonEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CheckpointReason_CheckpointReasonEnum CheckpointReason::INSTANCE_TERMINATION;
constexpr CheckpointReason_CheckpointReasonEnum CheckpointReason::JOB_TERMINATION;
constexpr CheckpointReason_CheckpointReasonEnum CheckpointReason::HEARTBEAT;
constexpr CheckpointReason_CheckpointReasonEnum CheckpointReason::CheckpointReasonEnum_MIN;
constexpr CheckpointReason_CheckpointReasonEnum CheckpointReason::CheckpointReasonEnum_MAX;
constexpr int CheckpointReason::CheckpointReasonEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DumpType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_task_2eproto);
  return file_level_enum_descriptors_task_2eproto[2];
}
bool DumpType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContainerRuntime_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_task_2eproto);
  return file_level_enum_descriptors_task_2eproto[3];
}
bool ContainerRuntime_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CRType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_task_2eproto);
  return file_level_enum_descriptors_task_2eproto[4];
}
bool CRType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JobState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_task_2eproto);
  return file_level_enum_descriptors_task_2eproto[5];
}
bool JobState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CheckpointState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_task_2eproto);
  return file_level_enum_descriptors_task_2eproto[6];
}
bool CheckpointState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QueueJobStatusEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_task_2eproto);
  return file_level_enum_descriptors_task_2eproto[7];
}
bool QueueJobStatusEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void DumpStats::InitAsDefaultInstance() {
  ::cedana::services::task::_DumpStats_default_instance_._instance.get_mutable()->checkpointfilestats_ = const_cast< ::cedana::services::task::CheckpointFileStats*>(
      ::cedana::services::task::CheckpointFileStats::internal_default_instance());
}
class DumpStats::_Internal {
 public:
  static const ::cedana::services::task::CheckpointFileStats& checkpointfilestats(const DumpStats* msg);
};

const ::cedana::services::task::CheckpointFileStats&
DumpStats::_Internal::checkpointfilestats(const DumpStats* msg) {
  return *msg->checkpointfilestats_;
}
DumpStats::DumpStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.DumpStats)
}
DumpStats::DumpStats(const DumpStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_checkpointfilestats()) {
    checkpointfilestats_ = new ::cedana::services::task::CheckpointFileStats(*from.checkpointfilestats_);
  } else {
    checkpointfilestats_ = nullptr;
  }
  ::memcpy(&prepareduration_, &from.prepareduration_,
    static_cast<size_t>(reinterpret_cast<char*>(&kubernetes_) -
    reinterpret_cast<char*>(&prepareduration_)) + sizeof(kubernetes_));
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.DumpStats)
}

void DumpStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DumpStats_task_2eproto.base);
  ::memset(&checkpointfilestats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kubernetes_) -
      reinterpret_cast<char*>(&checkpointfilestats_)) + sizeof(kubernetes_));
}

DumpStats::~DumpStats() {
  // @@protoc_insertion_point(destructor:cedana.services.task.DumpStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DumpStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete checkpointfilestats_;
}

void DumpStats::ArenaDtor(void* object) {
  DumpStats* _this = reinterpret_cast< DumpStats* >(object);
  (void)_this;
}
void DumpStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DumpStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DumpStats& DumpStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DumpStats_task_2eproto.base);
  return *internal_default_instance();
}


void DumpStats::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.DumpStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && checkpointfilestats_ != nullptr) {
    delete checkpointfilestats_;
  }
  checkpointfilestats_ = nullptr;
  ::memset(&prepareduration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kubernetes_) -
      reinterpret_cast<char*>(&prepareduration_)) + sizeof(kubernetes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DumpStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cedana.services.task.DumpType DumpType = 1[json_name = "DumpType"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dumptype(static_cast<::cedana::services::task::DumpType>(val));
        } else goto handle_unusual;
        continue;
      // int64 PrepareDuration = 2[json_name = "PrepareDuration"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          prepareduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 CRIUDuration = 3[json_name = "CRIUDuration"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          criuduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 GPUDuration = 4[json_name = "GPUDuration"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          gpuduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 UploadDuration = 5[json_name = "UploadDuration"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          uploadduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedana.services.task.ContainerRuntime ContainerRuntime = 6[json_name = "ContainerRuntime"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_containerruntime(static_cast<::cedana::services::task::ContainerRuntime>(val));
        } else goto handle_unusual;
        continue;
      // bool Kubernetes = 7[json_name = "Kubernetes"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          kubernetes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedana.services.task.CheckpointFileStats CheckpointFileStats = 8[json_name = "CheckpointFileStats"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_checkpointfilestats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DumpStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.DumpStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cedana.services.task.DumpType DumpType = 1[json_name = "DumpType"];
  if (this->dumptype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_dumptype(), target);
  }

  // int64 PrepareDuration = 2[json_name = "PrepareDuration"];
  if (this->prepareduration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_prepareduration(), target);
  }

  // int64 CRIUDuration = 3[json_name = "CRIUDuration"];
  if (this->criuduration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_criuduration(), target);
  }

  // int64 GPUDuration = 4[json_name = "GPUDuration"];
  if (this->gpuduration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_gpuduration(), target);
  }

  // int64 UploadDuration = 5[json_name = "UploadDuration"];
  if (this->uploadduration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_uploadduration(), target);
  }

  // .cedana.services.task.ContainerRuntime ContainerRuntime = 6[json_name = "ContainerRuntime"];
  if (this->containerruntime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_containerruntime(), target);
  }

  // bool Kubernetes = 7[json_name = "Kubernetes"];
  if (this->kubernetes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_kubernetes(), target);
  }

  // .cedana.services.task.CheckpointFileStats CheckpointFileStats = 8[json_name = "CheckpointFileStats"];
  if (this->has_checkpointfilestats()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::checkpointfilestats(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.DumpStats)
  return target;
}

size_t DumpStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.DumpStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cedana.services.task.CheckpointFileStats CheckpointFileStats = 8[json_name = "CheckpointFileStats"];
  if (this->has_checkpointfilestats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *checkpointfilestats_);
  }

  // int64 PrepareDuration = 2[json_name = "PrepareDuration"];
  if (this->prepareduration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_prepareduration());
  }

  // int64 CRIUDuration = 3[json_name = "CRIUDuration"];
  if (this->criuduration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_criuduration());
  }

  // .cedana.services.task.DumpType DumpType = 1[json_name = "DumpType"];
  if (this->dumptype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dumptype());
  }

  // .cedana.services.task.ContainerRuntime ContainerRuntime = 6[json_name = "ContainerRuntime"];
  if (this->containerruntime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_containerruntime());
  }

  // int64 GPUDuration = 4[json_name = "GPUDuration"];
  if (this->gpuduration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gpuduration());
  }

  // int64 UploadDuration = 5[json_name = "UploadDuration"];
  if (this->uploadduration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_uploadduration());
  }

  // bool Kubernetes = 7[json_name = "Kubernetes"];
  if (this->kubernetes() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DumpStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.DumpStats)
  GOOGLE_DCHECK_NE(&from, this);
  const DumpStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DumpStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.DumpStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.DumpStats)
    MergeFrom(*source);
  }
}

void DumpStats::MergeFrom(const DumpStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.DumpStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_checkpointfilestats()) {
    _internal_mutable_checkpointfilestats()->::cedana::services::task::CheckpointFileStats::MergeFrom(from._internal_checkpointfilestats());
  }
  if (from.prepareduration() != 0) {
    _internal_set_prepareduration(from._internal_prepareduration());
  }
  if (from.criuduration() != 0) {
    _internal_set_criuduration(from._internal_criuduration());
  }
  if (from.dumptype() != 0) {
    _internal_set_dumptype(from._internal_dumptype());
  }
  if (from.containerruntime() != 0) {
    _internal_set_containerruntime(from._internal_containerruntime());
  }
  if (from.gpuduration() != 0) {
    _internal_set_gpuduration(from._internal_gpuduration());
  }
  if (from.uploadduration() != 0) {
    _internal_set_uploadduration(from._internal_uploadduration());
  }
  if (from.kubernetes() != 0) {
    _internal_set_kubernetes(from._internal_kubernetes());
  }
}

void DumpStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.DumpStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DumpStats::CopyFrom(const DumpStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.DumpStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DumpStats::IsInitialized() const {
  return true;
}

void DumpStats::InternalSwap(DumpStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DumpStats, kubernetes_)
      + sizeof(DumpStats::kubernetes_)
      - PROTOBUF_FIELD_OFFSET(DumpStats, checkpointfilestats_)>(
          reinterpret_cast<char*>(&checkpointfilestats_),
          reinterpret_cast<char*>(&other->checkpointfilestats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DumpStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckpointFileStats::InitAsDefaultInstance() {
}
class CheckpointFileStats::_Internal {
 public:
};

CheckpointFileStats::CheckpointFileStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.CheckpointFileStats)
}
CheckpointFileStats::CheckpointFileStats(const CheckpointFileStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&size_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.CheckpointFileStats)
}

void CheckpointFileStats::SharedCtor() {
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&size_)) + sizeof(duration_));
}

CheckpointFileStats::~CheckpointFileStats() {
  // @@protoc_insertion_point(destructor:cedana.services.task.CheckpointFileStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckpointFileStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CheckpointFileStats::ArenaDtor(void* object) {
  CheckpointFileStats* _this = reinterpret_cast< CheckpointFileStats* >(object);
  (void)_this;
}
void CheckpointFileStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckpointFileStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckpointFileStats& CheckpointFileStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckpointFileStats_task_2eproto.base);
  return *internal_default_instance();
}


void CheckpointFileStats::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.CheckpointFileStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&size_)) + sizeof(duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckpointFileStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 Size = 1[json_name = "Size"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 Duration = 2[json_name = "Duration"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckpointFileStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.CheckpointFileStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Size = 1[json_name = "Size"];
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_size(), target);
  }

  // int64 Duration = 2[json_name = "Duration"];
  if (this->duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.CheckpointFileStats)
  return target;
}

size_t CheckpointFileStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.CheckpointFileStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 Size = 1[json_name = "Size"];
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_size());
  }

  // int64 Duration = 2[json_name = "Duration"];
  if (this->duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_duration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckpointFileStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.CheckpointFileStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckpointFileStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckpointFileStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.CheckpointFileStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.CheckpointFileStats)
    MergeFrom(*source);
  }
}

void CheckpointFileStats::MergeFrom(const CheckpointFileStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.CheckpointFileStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
}

void CheckpointFileStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.CheckpointFileStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckpointFileStats::CopyFrom(const CheckpointFileStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.CheckpointFileStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckpointFileStats::IsInitialized() const {
  return true;
}

void CheckpointFileStats::InternalSwap(CheckpointFileStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckpointFileStats, duration_)
      + sizeof(CheckpointFileStats::duration_)
      - PROTOBUF_FIELD_OFFSET(CheckpointFileStats, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckpointFileStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RestoreStats::InitAsDefaultInstance() {
  ::cedana::services::task::_RestoreStats_default_instance_._instance.get_mutable()->checkpointfilestats_ = const_cast< ::cedana::services::task::CheckpointFileStats*>(
      ::cedana::services::task::CheckpointFileStats::internal_default_instance());
  ::cedana::services::task::_RestoreStats_default_instance_._instance.get_mutable()->gpurestorestats_ = const_cast< ::cedanagpu::GPURestoreStats*>(
      ::cedanagpu::GPURestoreStats::internal_default_instance());
}
class RestoreStats::_Internal {
 public:
  static const ::cedana::services::task::CheckpointFileStats& checkpointfilestats(const RestoreStats* msg);
  static const ::cedanagpu::GPURestoreStats& gpurestorestats(const RestoreStats* msg);
};

const ::cedana::services::task::CheckpointFileStats&
RestoreStats::_Internal::checkpointfilestats(const RestoreStats* msg) {
  return *msg->checkpointfilestats_;
}
const ::cedanagpu::GPURestoreStats&
RestoreStats::_Internal::gpurestorestats(const RestoreStats* msg) {
  return *msg->gpurestorestats_;
}
void RestoreStats::clear_gpurestorestats() {
  if (GetArena() == nullptr && gpurestorestats_ != nullptr) {
    delete gpurestorestats_;
  }
  gpurestorestats_ = nullptr;
}
RestoreStats::RestoreStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.RestoreStats)
}
RestoreStats::RestoreStats(const RestoreStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_checkpointfilestats()) {
    checkpointfilestats_ = new ::cedana::services::task::CheckpointFileStats(*from.checkpointfilestats_);
  } else {
    checkpointfilestats_ = nullptr;
  }
  if (from._internal_has_gpurestorestats()) {
    gpurestorestats_ = new ::cedanagpu::GPURestoreStats(*from.gpurestorestats_);
  } else {
    gpurestorestats_ = nullptr;
  }
  ::memcpy(&dumptype_, &from.dumptype_,
    static_cast<size_t>(reinterpret_cast<char*>(&downloadduration_) -
    reinterpret_cast<char*>(&dumptype_)) + sizeof(downloadduration_));
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.RestoreStats)
}

void RestoreStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RestoreStats_task_2eproto.base);
  ::memset(&checkpointfilestats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&downloadduration_) -
      reinterpret_cast<char*>(&checkpointfilestats_)) + sizeof(downloadduration_));
}

RestoreStats::~RestoreStats() {
  // @@protoc_insertion_point(destructor:cedana.services.task.RestoreStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RestoreStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete checkpointfilestats_;
  if (this != internal_default_instance()) delete gpurestorestats_;
}

void RestoreStats::ArenaDtor(void* object) {
  RestoreStats* _this = reinterpret_cast< RestoreStats* >(object);
  (void)_this;
}
void RestoreStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RestoreStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RestoreStats& RestoreStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RestoreStats_task_2eproto.base);
  return *internal_default_instance();
}


void RestoreStats::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.RestoreStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && checkpointfilestats_ != nullptr) {
    delete checkpointfilestats_;
  }
  checkpointfilestats_ = nullptr;
  if (GetArena() == nullptr && gpurestorestats_ != nullptr) {
    delete gpurestorestats_;
  }
  gpurestorestats_ = nullptr;
  ::memset(&dumptype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&downloadduration_) -
      reinterpret_cast<char*>(&dumptype_)) + sizeof(downloadduration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RestoreStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cedana.services.task.DumpType DumpType = 1[json_name = "DumpType"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dumptype(static_cast<::cedana::services::task::DumpType>(val));
        } else goto handle_unusual;
        continue;
      // .cedana.services.task.ContainerRuntime ContainerRuntime = 2[json_name = "ContainerRuntime"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_containerruntime(static_cast<::cedana::services::task::ContainerRuntime>(val));
        } else goto handle_unusual;
        continue;
      // int64 PrepareDuration = 3[json_name = "PrepareDuration"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          prepareduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 CRIUDuration = 4[json_name = "CRIUDuration"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          criuduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 GPUDuration = 5[json_name = "GPUDuration"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          gpuduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 DownloadDuration = 6[json_name = "DownloadDuration"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          downloadduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedana.services.task.CheckpointFileStats CheckpointFileStats = 7[json_name = "CheckpointFileStats"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_checkpointfilestats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedanagpu.GPURestoreStats GPURestoreStats = 8[json_name = "GPURestoreStats"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_gpurestorestats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RestoreStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.RestoreStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cedana.services.task.DumpType DumpType = 1[json_name = "DumpType"];
  if (this->dumptype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_dumptype(), target);
  }

  // .cedana.services.task.ContainerRuntime ContainerRuntime = 2[json_name = "ContainerRuntime"];
  if (this->containerruntime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_containerruntime(), target);
  }

  // int64 PrepareDuration = 3[json_name = "PrepareDuration"];
  if (this->prepareduration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_prepareduration(), target);
  }

  // int64 CRIUDuration = 4[json_name = "CRIUDuration"];
  if (this->criuduration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_criuduration(), target);
  }

  // int64 GPUDuration = 5[json_name = "GPUDuration"];
  if (this->gpuduration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_gpuduration(), target);
  }

  // int64 DownloadDuration = 6[json_name = "DownloadDuration"];
  if (this->downloadduration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_downloadduration(), target);
  }

  // .cedana.services.task.CheckpointFileStats CheckpointFileStats = 7[json_name = "CheckpointFileStats"];
  if (this->has_checkpointfilestats()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::checkpointfilestats(this), target, stream);
  }

  // .cedanagpu.GPURestoreStats GPURestoreStats = 8[json_name = "GPURestoreStats"];
  if (this->has_gpurestorestats()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::gpurestorestats(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.RestoreStats)
  return target;
}

size_t RestoreStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.RestoreStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cedana.services.task.CheckpointFileStats CheckpointFileStats = 7[json_name = "CheckpointFileStats"];
  if (this->has_checkpointfilestats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *checkpointfilestats_);
  }

  // .cedanagpu.GPURestoreStats GPURestoreStats = 8[json_name = "GPURestoreStats"];
  if (this->has_gpurestorestats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gpurestorestats_);
  }

  // .cedana.services.task.DumpType DumpType = 1[json_name = "DumpType"];
  if (this->dumptype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dumptype());
  }

  // .cedana.services.task.ContainerRuntime ContainerRuntime = 2[json_name = "ContainerRuntime"];
  if (this->containerruntime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_containerruntime());
  }

  // int64 PrepareDuration = 3[json_name = "PrepareDuration"];
  if (this->prepareduration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_prepareduration());
  }

  // int64 CRIUDuration = 4[json_name = "CRIUDuration"];
  if (this->criuduration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_criuduration());
  }

  // int64 GPUDuration = 5[json_name = "GPUDuration"];
  if (this->gpuduration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gpuduration());
  }

  // int64 DownloadDuration = 6[json_name = "DownloadDuration"];
  if (this->downloadduration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_downloadduration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestoreStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.RestoreStats)
  GOOGLE_DCHECK_NE(&from, this);
  const RestoreStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RestoreStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.RestoreStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.RestoreStats)
    MergeFrom(*source);
  }
}

void RestoreStats::MergeFrom(const RestoreStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.RestoreStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_checkpointfilestats()) {
    _internal_mutable_checkpointfilestats()->::cedana::services::task::CheckpointFileStats::MergeFrom(from._internal_checkpointfilestats());
  }
  if (from.has_gpurestorestats()) {
    _internal_mutable_gpurestorestats()->::cedanagpu::GPURestoreStats::MergeFrom(from._internal_gpurestorestats());
  }
  if (from.dumptype() != 0) {
    _internal_set_dumptype(from._internal_dumptype());
  }
  if (from.containerruntime() != 0) {
    _internal_set_containerruntime(from._internal_containerruntime());
  }
  if (from.prepareduration() != 0) {
    _internal_set_prepareduration(from._internal_prepareduration());
  }
  if (from.criuduration() != 0) {
    _internal_set_criuduration(from._internal_criuduration());
  }
  if (from.gpuduration() != 0) {
    _internal_set_gpuduration(from._internal_gpuduration());
  }
  if (from.downloadduration() != 0) {
    _internal_set_downloadduration(from._internal_downloadduration());
  }
}

void RestoreStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.RestoreStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestoreStats::CopyFrom(const RestoreStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.RestoreStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestoreStats::IsInitialized() const {
  return true;
}

void RestoreStats::InternalSwap(RestoreStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RestoreStats, downloadduration_)
      + sizeof(RestoreStats::downloadduration_)
      - PROTOBUF_FIELD_OFFSET(RestoreStats, checkpointfilestats_)>(
          reinterpret_cast<char*>(&checkpointfilestats_),
          reinterpret_cast<char*>(&other->checkpointfilestats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RestoreStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CRIOImagePushArgs::InitAsDefaultInstance() {
}
class CRIOImagePushArgs::_Internal {
 public:
};

CRIOImagePushArgs::CRIOImagePushArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.CRIOImagePushArgs)
}
CRIOImagePushArgs::CRIOImagePushArgs(const CRIOImagePushArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  originalimageref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_originalimageref().empty()) {
    originalimageref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_originalimageref(),
      GetArena());
  }
  newimageref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_newimageref().empty()) {
    newimageref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_newimageref(),
      GetArena());
  }
  rootfsdiffpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rootfsdiffpath().empty()) {
    rootfsdiffpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rootfsdiffpath(),
      GetArena());
  }
  containerstorage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_containerstorage().empty()) {
    containerstorage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_containerstorage(),
      GetArena());
  }
  registryauthtokenpush_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_registryauthtokenpush().empty()) {
    registryauthtokenpush_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_registryauthtokenpush(),
      GetArena());
  }
  registryauthtokenpull_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_registryauthtokenpull().empty()) {
    registryauthtokenpull_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_registryauthtokenpull(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.CRIOImagePushArgs)
}

void CRIOImagePushArgs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CRIOImagePushArgs_task_2eproto.base);
  originalimageref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newimageref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rootfsdiffpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  containerstorage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  registryauthtokenpush_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  registryauthtokenpull_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CRIOImagePushArgs::~CRIOImagePushArgs() {
  // @@protoc_insertion_point(destructor:cedana.services.task.CRIOImagePushArgs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRIOImagePushArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  originalimageref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newimageref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rootfsdiffpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  containerstorage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  registryauthtokenpush_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  registryauthtokenpull_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRIOImagePushArgs::ArenaDtor(void* object) {
  CRIOImagePushArgs* _this = reinterpret_cast< CRIOImagePushArgs* >(object);
  (void)_this;
}
void CRIOImagePushArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRIOImagePushArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CRIOImagePushArgs& CRIOImagePushArgs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CRIOImagePushArgs_task_2eproto.base);
  return *internal_default_instance();
}


void CRIOImagePushArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.CRIOImagePushArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  originalimageref_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  newimageref_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rootfsdiffpath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  containerstorage_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  registryauthtokenpush_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  registryauthtokenpull_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRIOImagePushArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string OriginalImageRef = 1[json_name = "OriginalImageRef"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_originalimageref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.CRIOImagePushArgs.OriginalImageRef"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string NewImageRef = 2[json_name = "NewImageRef"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_newimageref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.CRIOImagePushArgs.NewImageRef"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string RootfsDiffPath = 3[json_name = "RootfsDiffPath"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_rootfsdiffpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.CRIOImagePushArgs.RootfsDiffPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ContainerStorage = 4[json_name = "ContainerStorage"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_containerstorage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.CRIOImagePushArgs.ContainerStorage"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string RegistryAuthTokenPush = 5[json_name = "RegistryAuthTokenPush"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_registryauthtokenpush();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.CRIOImagePushArgs.RegistryAuthTokenPush"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string RegistryAuthTokenPull = 6[json_name = "RegistryAuthTokenPull"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_registryauthtokenpull();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.CRIOImagePushArgs.RegistryAuthTokenPull"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRIOImagePushArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.CRIOImagePushArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string OriginalImageRef = 1[json_name = "OriginalImageRef"];
  if (this->originalimageref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_originalimageref().data(), static_cast<int>(this->_internal_originalimageref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.CRIOImagePushArgs.OriginalImageRef");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_originalimageref(), target);
  }

  // string NewImageRef = 2[json_name = "NewImageRef"];
  if (this->newimageref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newimageref().data(), static_cast<int>(this->_internal_newimageref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.CRIOImagePushArgs.NewImageRef");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_newimageref(), target);
  }

  // string RootfsDiffPath = 3[json_name = "RootfsDiffPath"];
  if (this->rootfsdiffpath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rootfsdiffpath().data(), static_cast<int>(this->_internal_rootfsdiffpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.CRIOImagePushArgs.RootfsDiffPath");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rootfsdiffpath(), target);
  }

  // string ContainerStorage = 4[json_name = "ContainerStorage"];
  if (this->containerstorage().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_containerstorage().data(), static_cast<int>(this->_internal_containerstorage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.CRIOImagePushArgs.ContainerStorage");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_containerstorage(), target);
  }

  // string RegistryAuthTokenPush = 5[json_name = "RegistryAuthTokenPush"];
  if (this->registryauthtokenpush().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_registryauthtokenpush().data(), static_cast<int>(this->_internal_registryauthtokenpush().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.CRIOImagePushArgs.RegistryAuthTokenPush");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_registryauthtokenpush(), target);
  }

  // string RegistryAuthTokenPull = 6[json_name = "RegistryAuthTokenPull"];
  if (this->registryauthtokenpull().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_registryauthtokenpull().data(), static_cast<int>(this->_internal_registryauthtokenpull().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.CRIOImagePushArgs.RegistryAuthTokenPull");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_registryauthtokenpull(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.CRIOImagePushArgs)
  return target;
}

size_t CRIOImagePushArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.CRIOImagePushArgs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string OriginalImageRef = 1[json_name = "OriginalImageRef"];
  if (this->originalimageref().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_originalimageref());
  }

  // string NewImageRef = 2[json_name = "NewImageRef"];
  if (this->newimageref().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newimageref());
  }

  // string RootfsDiffPath = 3[json_name = "RootfsDiffPath"];
  if (this->rootfsdiffpath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rootfsdiffpath());
  }

  // string ContainerStorage = 4[json_name = "ContainerStorage"];
  if (this->containerstorage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_containerstorage());
  }

  // string RegistryAuthTokenPush = 5[json_name = "RegistryAuthTokenPush"];
  if (this->registryauthtokenpush().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_registryauthtokenpush());
  }

  // string RegistryAuthTokenPull = 6[json_name = "RegistryAuthTokenPull"];
  if (this->registryauthtokenpull().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_registryauthtokenpull());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRIOImagePushArgs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.CRIOImagePushArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const CRIOImagePushArgs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRIOImagePushArgs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.CRIOImagePushArgs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.CRIOImagePushArgs)
    MergeFrom(*source);
  }
}

void CRIOImagePushArgs::MergeFrom(const CRIOImagePushArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.CRIOImagePushArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.originalimageref().size() > 0) {
    _internal_set_originalimageref(from._internal_originalimageref());
  }
  if (from.newimageref().size() > 0) {
    _internal_set_newimageref(from._internal_newimageref());
  }
  if (from.rootfsdiffpath().size() > 0) {
    _internal_set_rootfsdiffpath(from._internal_rootfsdiffpath());
  }
  if (from.containerstorage().size() > 0) {
    _internal_set_containerstorage(from._internal_containerstorage());
  }
  if (from.registryauthtokenpush().size() > 0) {
    _internal_set_registryauthtokenpush(from._internal_registryauthtokenpush());
  }
  if (from.registryauthtokenpull().size() > 0) {
    _internal_set_registryauthtokenpull(from._internal_registryauthtokenpull());
  }
}

void CRIOImagePushArgs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.CRIOImagePushArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRIOImagePushArgs::CopyFrom(const CRIOImagePushArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.CRIOImagePushArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRIOImagePushArgs::IsInitialized() const {
  return true;
}

void CRIOImagePushArgs::InternalSwap(CRIOImagePushArgs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  originalimageref_.Swap(&other->originalimageref_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  newimageref_.Swap(&other->newimageref_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rootfsdiffpath_.Swap(&other->rootfsdiffpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  containerstorage_.Swap(&other->containerstorage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  registryauthtokenpush_.Swap(&other->registryauthtokenpush_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  registryauthtokenpull_.Swap(&other->registryauthtokenpull_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CRIOImagePushArgs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CRIOImagePushResp::InitAsDefaultInstance() {
}
class CRIOImagePushResp::_Internal {
 public:
};

CRIOImagePushResp::CRIOImagePushResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.CRIOImagePushResp)
}
CRIOImagePushResp::CRIOImagePushResp(const CRIOImagePushResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.CRIOImagePushResp)
}

void CRIOImagePushResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CRIOImagePushResp_task_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CRIOImagePushResp::~CRIOImagePushResp() {
  // @@protoc_insertion_point(destructor:cedana.services.task.CRIOImagePushResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRIOImagePushResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRIOImagePushResp::ArenaDtor(void* object) {
  CRIOImagePushResp* _this = reinterpret_cast< CRIOImagePushResp* >(object);
  (void)_this;
}
void CRIOImagePushResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRIOImagePushResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CRIOImagePushResp& CRIOImagePushResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CRIOImagePushResp_task_2eproto.base);
  return *internal_default_instance();
}


void CRIOImagePushResp::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.CRIOImagePushResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRIOImagePushResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Message = 1[json_name = "Message"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.CRIOImagePushResp.Message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRIOImagePushResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.CRIOImagePushResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Message = 1[json_name = "Message"];
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.CRIOImagePushResp.Message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.CRIOImagePushResp)
  return target;
}

size_t CRIOImagePushResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.CRIOImagePushResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Message = 1[json_name = "Message"];
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRIOImagePushResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.CRIOImagePushResp)
  GOOGLE_DCHECK_NE(&from, this);
  const CRIOImagePushResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRIOImagePushResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.CRIOImagePushResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.CRIOImagePushResp)
    MergeFrom(*source);
  }
}

void CRIOImagePushResp::MergeFrom(const CRIOImagePushResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.CRIOImagePushResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
}

void CRIOImagePushResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.CRIOImagePushResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRIOImagePushResp::CopyFrom(const CRIOImagePushResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.CRIOImagePushResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRIOImagePushResp::IsInitialized() const {
  return true;
}

void CRIOImagePushResp::InternalSwap(CRIOImagePushResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CRIOImagePushResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CRIORootfsDumpArgs::InitAsDefaultInstance() {
}
class CRIORootfsDumpArgs::_Internal {
 public:
};

CRIORootfsDumpArgs::CRIORootfsDumpArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.CRIORootfsDumpArgs)
}
CRIORootfsDumpArgs::CRIORootfsDumpArgs(const CRIORootfsDumpArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  containerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_containerid().empty()) {
    containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_containerid(),
      GetArena());
  }
  dest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dest().empty()) {
    dest_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dest(),
      GetArena());
  }
  containerstorage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_containerstorage().empty()) {
    containerstorage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_containerstorage(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.CRIORootfsDumpArgs)
}

void CRIORootfsDumpArgs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CRIORootfsDumpArgs_task_2eproto.base);
  containerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  containerstorage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CRIORootfsDumpArgs::~CRIORootfsDumpArgs() {
  // @@protoc_insertion_point(destructor:cedana.services.task.CRIORootfsDumpArgs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRIORootfsDumpArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  containerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  containerstorage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRIORootfsDumpArgs::ArenaDtor(void* object) {
  CRIORootfsDumpArgs* _this = reinterpret_cast< CRIORootfsDumpArgs* >(object);
  (void)_this;
}
void CRIORootfsDumpArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRIORootfsDumpArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CRIORootfsDumpArgs& CRIORootfsDumpArgs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CRIORootfsDumpArgs_task_2eproto.base);
  return *internal_default_instance();
}


void CRIORootfsDumpArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.CRIORootfsDumpArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  containerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dest_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  containerstorage_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRIORootfsDumpArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ContainerID = 1[json_name = "ContainerID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_containerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.CRIORootfsDumpArgs.ContainerID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Dest = 2[json_name = "Dest"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.CRIORootfsDumpArgs.Dest"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ContainerStorage = 3[json_name = "ContainerStorage"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_containerstorage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.CRIORootfsDumpArgs.ContainerStorage"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRIORootfsDumpArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.CRIORootfsDumpArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ContainerID = 1[json_name = "ContainerID"];
  if (this->containerid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_containerid().data(), static_cast<int>(this->_internal_containerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.CRIORootfsDumpArgs.ContainerID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_containerid(), target);
  }

  // string Dest = 2[json_name = "Dest"];
  if (this->dest().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dest().data(), static_cast<int>(this->_internal_dest().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.CRIORootfsDumpArgs.Dest");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dest(), target);
  }

  // string ContainerStorage = 3[json_name = "ContainerStorage"];
  if (this->containerstorage().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_containerstorage().data(), static_cast<int>(this->_internal_containerstorage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.CRIORootfsDumpArgs.ContainerStorage");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_containerstorage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.CRIORootfsDumpArgs)
  return target;
}

size_t CRIORootfsDumpArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.CRIORootfsDumpArgs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ContainerID = 1[json_name = "ContainerID"];
  if (this->containerid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_containerid());
  }

  // string Dest = 2[json_name = "Dest"];
  if (this->dest().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dest());
  }

  // string ContainerStorage = 3[json_name = "ContainerStorage"];
  if (this->containerstorage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_containerstorage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRIORootfsDumpArgs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.CRIORootfsDumpArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const CRIORootfsDumpArgs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRIORootfsDumpArgs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.CRIORootfsDumpArgs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.CRIORootfsDumpArgs)
    MergeFrom(*source);
  }
}

void CRIORootfsDumpArgs::MergeFrom(const CRIORootfsDumpArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.CRIORootfsDumpArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.containerid().size() > 0) {
    _internal_set_containerid(from._internal_containerid());
  }
  if (from.dest().size() > 0) {
    _internal_set_dest(from._internal_dest());
  }
  if (from.containerstorage().size() > 0) {
    _internal_set_containerstorage(from._internal_containerstorage());
  }
}

void CRIORootfsDumpArgs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.CRIORootfsDumpArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRIORootfsDumpArgs::CopyFrom(const CRIORootfsDumpArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.CRIORootfsDumpArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRIORootfsDumpArgs::IsInitialized() const {
  return true;
}

void CRIORootfsDumpArgs::InternalSwap(CRIORootfsDumpArgs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  containerid_.Swap(&other->containerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dest_.Swap(&other->dest_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  containerstorage_.Swap(&other->containerstorage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CRIORootfsDumpArgs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CRIORootfsDumpResp::InitAsDefaultInstance() {
}
class CRIORootfsDumpResp::_Internal {
 public:
};

CRIORootfsDumpResp::CRIORootfsDumpResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.CRIORootfsDumpResp)
}
CRIORootfsDumpResp::CRIORootfsDumpResp(const CRIORootfsDumpResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dest().empty()) {
    dest_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dest(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.CRIORootfsDumpResp)
}

void CRIORootfsDumpResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CRIORootfsDumpResp_task_2eproto.base);
  dest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CRIORootfsDumpResp::~CRIORootfsDumpResp() {
  // @@protoc_insertion_point(destructor:cedana.services.task.CRIORootfsDumpResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CRIORootfsDumpResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRIORootfsDumpResp::ArenaDtor(void* object) {
  CRIORootfsDumpResp* _this = reinterpret_cast< CRIORootfsDumpResp* >(object);
  (void)_this;
}
void CRIORootfsDumpResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRIORootfsDumpResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CRIORootfsDumpResp& CRIORootfsDumpResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CRIORootfsDumpResp_task_2eproto.base);
  return *internal_default_instance();
}


void CRIORootfsDumpResp::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.CRIORootfsDumpResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dest_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRIORootfsDumpResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Dest = 1[json_name = "Dest"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.CRIORootfsDumpResp.Dest"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRIORootfsDumpResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.CRIORootfsDumpResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Dest = 1[json_name = "Dest"];
  if (this->dest().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dest().data(), static_cast<int>(this->_internal_dest().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.CRIORootfsDumpResp.Dest");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.CRIORootfsDumpResp)
  return target;
}

size_t CRIORootfsDumpResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.CRIORootfsDumpResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Dest = 1[json_name = "Dest"];
  if (this->dest().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dest());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRIORootfsDumpResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.CRIORootfsDumpResp)
  GOOGLE_DCHECK_NE(&from, this);
  const CRIORootfsDumpResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRIORootfsDumpResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.CRIORootfsDumpResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.CRIORootfsDumpResp)
    MergeFrom(*source);
  }
}

void CRIORootfsDumpResp::MergeFrom(const CRIORootfsDumpResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.CRIORootfsDumpResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dest().size() > 0) {
    _internal_set_dest(from._internal_dest());
  }
}

void CRIORootfsDumpResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.CRIORootfsDumpResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRIORootfsDumpResp::CopyFrom(const CRIORootfsDumpResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.CRIORootfsDumpResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRIORootfsDumpResp::IsInitialized() const {
  return true;
}

void CRIORootfsDumpResp::InternalSwap(CRIORootfsDumpResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dest_.Swap(&other->dest_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CRIORootfsDumpResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartArgs::InitAsDefaultInstance() {
}
class StartArgs::_Internal {
 public:
};

StartArgs::StartArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  env_(arena),
  groups_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.StartArgs)
}
StartArgs::StartArgs(const StartArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      env_(from.env_),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task().empty()) {
    task_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_task(),
      GetArena());
  }
  jid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_jid().empty()) {
    jid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_jid(),
      GetArena());
  }
  workingdir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_workingdir().empty()) {
    workingdir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_workingdir(),
      GetArena());
  }
  logoutputfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_logoutputfile().empty()) {
    logoutputfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_logoutputfile(),
      GetArena());
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gpu_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(gpu_));
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.StartArgs)
}

void StartArgs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartArgs_task_2eproto.base);
  task_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  workingdir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logoutputfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gpu_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(gpu_));
}

StartArgs::~StartArgs() {
  // @@protoc_insertion_point(destructor:cedana.services.task.StartArgs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  task_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  workingdir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logoutputfile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StartArgs::ArenaDtor(void* object) {
  StartArgs* _this = reinterpret_cast< StartArgs* >(object);
  (void)_this;
}
void StartArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartArgs& StartArgs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartArgs_task_2eproto.base);
  return *internal_default_instance();
}


void StartArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.StartArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  env_.Clear();
  groups_.Clear();
  task_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  jid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  workingdir_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  logoutputfile_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gpu_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(gpu_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Task = 1[json_name = "Task"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_task();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.StartArgs.Task"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string JID = 2[json_name = "JID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_jid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.StartArgs.JID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string WorkingDir = 3[json_name = "WorkingDir"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_workingdir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.StartArgs.WorkingDir"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string Env = 4[json_name = "Env"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_env();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.StartArgs.Env"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string LogOutputFile = 5[json_name = "LogOutputFile"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_logoutputfile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.StartArgs.LogOutputFile"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 UID = 6[json_name = "UID"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 GID = 7[json_name = "GID"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool GPU = 8[json_name = "GPU"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          gpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 Groups = 9[json_name = "Groups"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_groups(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_groups(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.StartArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Task = 1[json_name = "Task"];
  if (this->task().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task().data(), static_cast<int>(this->_internal_task().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.StartArgs.Task");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_task(), target);
  }

  // string JID = 2[json_name = "JID"];
  if (this->jid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_jid().data(), static_cast<int>(this->_internal_jid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.StartArgs.JID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_jid(), target);
  }

  // string WorkingDir = 3[json_name = "WorkingDir"];
  if (this->workingdir().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workingdir().data(), static_cast<int>(this->_internal_workingdir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.StartArgs.WorkingDir");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_workingdir(), target);
  }

  // repeated string Env = 4[json_name = "Env"];
  for (int i = 0, n = this->_internal_env_size(); i < n; i++) {
    const auto& s = this->_internal_env(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.StartArgs.Env");
    target = stream->WriteString(4, s, target);
  }

  // string LogOutputFile = 5[json_name = "LogOutputFile"];
  if (this->logoutputfile().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logoutputfile().data(), static_cast<int>(this->_internal_logoutputfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.StartArgs.LogOutputFile");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_logoutputfile(), target);
  }

  // int32 UID = 6[json_name = "UID"];
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_uid(), target);
  }

  // int32 GID = 7[json_name = "GID"];
  if (this->gid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_gid(), target);
  }

  // bool GPU = 8[json_name = "GPU"];
  if (this->gpu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_gpu(), target);
  }

  // repeated int32 Groups = 9[json_name = "Groups"];
  {
    int byte_size = _groups_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_groups(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.StartArgs)
  return target;
}

size_t StartArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.StartArgs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string Env = 4[json_name = "Env"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(env_.size());
  for (int i = 0, n = env_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      env_.Get(i));
  }

  // repeated int32 Groups = 9[json_name = "Groups"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->groups_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _groups_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string Task = 1[json_name = "Task"];
  if (this->task().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task());
  }

  // string JID = 2[json_name = "JID"];
  if (this->jid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_jid());
  }

  // string WorkingDir = 3[json_name = "WorkingDir"];
  if (this->workingdir().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workingdir());
  }

  // string LogOutputFile = 5[json_name = "LogOutputFile"];
  if (this->logoutputfile().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logoutputfile());
  }

  // int32 UID = 6[json_name = "UID"];
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 GID = 7[json_name = "GID"];
  if (this->gid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gid());
  }

  // bool GPU = 8[json_name = "GPU"];
  if (this->gpu() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartArgs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.StartArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const StartArgs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartArgs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.StartArgs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.StartArgs)
    MergeFrom(*source);
  }
}

void StartArgs::MergeFrom(const StartArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.StartArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  env_.MergeFrom(from.env_);
  groups_.MergeFrom(from.groups_);
  if (from.task().size() > 0) {
    _internal_set_task(from._internal_task());
  }
  if (from.jid().size() > 0) {
    _internal_set_jid(from._internal_jid());
  }
  if (from.workingdir().size() > 0) {
    _internal_set_workingdir(from._internal_workingdir());
  }
  if (from.logoutputfile().size() > 0) {
    _internal_set_logoutputfile(from._internal_logoutputfile());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.gid() != 0) {
    _internal_set_gid(from._internal_gid());
  }
  if (from.gpu() != 0) {
    _internal_set_gpu(from._internal_gpu());
  }
}

void StartArgs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.StartArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartArgs::CopyFrom(const StartArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.StartArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartArgs::IsInitialized() const {
  return true;
}

void StartArgs::InternalSwap(StartArgs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  env_.InternalSwap(&other->env_);
  groups_.InternalSwap(&other->groups_);
  task_.Swap(&other->task_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  jid_.Swap(&other->jid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  workingdir_.Swap(&other->workingdir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  logoutputfile_.Swap(&other->logoutputfile_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartArgs, gpu_)
      + sizeof(StartArgs::gpu_)
      - PROTOBUF_FIELD_OFFSET(StartArgs, uid_)>(
          reinterpret_cast<char*>(&uid_),
          reinterpret_cast<char*>(&other->uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartArgs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartResp::InitAsDefaultInstance() {
}
class StartResp::_Internal {
 public:
};

StartResp::StartResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.StartResp)
}
StartResp::StartResp(const StartResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  jid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_jid().empty()) {
    jid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_jid(),
      GetArena());
  }
  pid_ = from.pid_;
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.StartResp)
}

void StartResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartResp_task_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pid_ = 0;
}

StartResp::~StartResp() {
  // @@protoc_insertion_point(destructor:cedana.services.task.StartResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StartResp::ArenaDtor(void* object) {
  StartResp* _this = reinterpret_cast< StartResp* >(object);
  (void)_this;
}
void StartResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartResp& StartResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartResp_task_2eproto.base);
  return *internal_default_instance();
}


void StartResp::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.StartResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  jid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Message = 1[json_name = "Message"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.StartResp.Message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PID = 2[json_name = "PID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string JID = 3[json_name = "JID"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_jid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.StartResp.JID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.StartResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Message = 1[json_name = "Message"];
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.StartResp.Message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // int32 PID = 2[json_name = "PID"];
  if (this->pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pid(), target);
  }

  // string JID = 3[json_name = "JID"];
  if (this->jid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_jid().data(), static_cast<int>(this->_internal_jid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.StartResp.JID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_jid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.StartResp)
  return target;
}

size_t StartResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.StartResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Message = 1[json_name = "Message"];
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string JID = 3[json_name = "JID"];
  if (this->jid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_jid());
  }

  // int32 PID = 2[json_name = "PID"];
  if (this->pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.StartResp)
  GOOGLE_DCHECK_NE(&from, this);
  const StartResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.StartResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.StartResp)
    MergeFrom(*source);
  }
}

void StartResp::MergeFrom(const StartResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.StartResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.jid().size() > 0) {
    _internal_set_jid(from._internal_jid());
  }
  if (from.pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
}

void StartResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.StartResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartResp::CopyFrom(const StartResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.StartResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartResp::IsInitialized() const {
  return true;
}

void StartResp::InternalSwap(StartResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  jid_.Swap(&other->jid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(pid_, other->pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DumpArgs::InitAsDefaultInstance() {
  ::cedana::services::task::_DumpArgs_default_instance_._instance.get_mutable()->criuopts_ = const_cast< ::cedana::services::task::CriuOpts*>(
      ::cedana::services::task::CriuOpts::internal_default_instance());
}
class DumpArgs::_Internal {
 public:
  static const ::cedana::services::task::CriuOpts& criuopts(const DumpArgs* msg);
};

const ::cedana::services::task::CriuOpts&
DumpArgs::_Internal::criuopts(const DumpArgs* msg) {
  return *msg->criuopts_;
}
DumpArgs::DumpArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.DumpArgs)
}
DumpArgs::DumpArgs(const DumpArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dir().empty()) {
    dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dir(),
      GetArena());
  }
  jid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_jid().empty()) {
    jid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_jid(),
      GetArena());
  }
  if (from._internal_has_criuopts()) {
    criuopts_ = new ::cedana::services::task::CriuOpts(*from.criuopts_);
  } else {
    criuopts_ = nullptr;
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(stream_));
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.DumpArgs)
}

void DumpArgs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DumpArgs_task_2eproto.base);
  dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&criuopts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_) -
      reinterpret_cast<char*>(&criuopts_)) + sizeof(stream_));
}

DumpArgs::~DumpArgs() {
  // @@protoc_insertion_point(destructor:cedana.services.task.DumpArgs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DumpArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete criuopts_;
}

void DumpArgs::ArenaDtor(void* object) {
  DumpArgs* _this = reinterpret_cast< DumpArgs* >(object);
  (void)_this;
}
void DumpArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DumpArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DumpArgs& DumpArgs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DumpArgs_task_2eproto.base);
  return *internal_default_instance();
}


void DumpArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.DumpArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dir_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  jid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && criuopts_ != nullptr) {
    delete criuopts_;
  }
  criuopts_ = nullptr;
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(stream_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DumpArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 PID = 1[json_name = "PID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Dir = 2[json_name = "Dir"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.DumpArgs.Dir"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedana.services.task.CRType Type = 3[json_name = "Type"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::cedana::services::task::CRType>(val));
        } else goto handle_unusual;
        continue;
      // string JID = 4[json_name = "JID"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_jid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.DumpArgs.JID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool GPU = 5[json_name = "GPU"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          gpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Stream = 6[json_name = "Stream"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedana.services.task.CriuOpts CriuOpts = 7[json_name = "CriuOpts"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_criuopts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DumpArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.DumpArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PID = 1[json_name = "PID"];
  if (this->pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_pid(), target);
  }

  // string Dir = 2[json_name = "Dir"];
  if (this->dir().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dir().data(), static_cast<int>(this->_internal_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.DumpArgs.Dir");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dir(), target);
  }

  // .cedana.services.task.CRType Type = 3[json_name = "Type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // string JID = 4[json_name = "JID"];
  if (this->jid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_jid().data(), static_cast<int>(this->_internal_jid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.DumpArgs.JID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_jid(), target);
  }

  // bool GPU = 5[json_name = "GPU"];
  if (this->gpu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_gpu(), target);
  }

  // bool Stream = 6[json_name = "Stream"];
  if (this->stream() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_stream(), target);
  }

  // .cedana.services.task.CriuOpts CriuOpts = 7[json_name = "CriuOpts"];
  if (this->has_criuopts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::criuopts(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.DumpArgs)
  return target;
}

size_t DumpArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.DumpArgs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Dir = 2[json_name = "Dir"];
  if (this->dir().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dir());
  }

  // string JID = 4[json_name = "JID"];
  if (this->jid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_jid());
  }

  // .cedana.services.task.CriuOpts CriuOpts = 7[json_name = "CriuOpts"];
  if (this->has_criuopts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *criuopts_);
  }

  // int32 PID = 1[json_name = "PID"];
  if (this->pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pid());
  }

  // .cedana.services.task.CRType Type = 3[json_name = "Type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool GPU = 5[json_name = "GPU"];
  if (this->gpu() != 0) {
    total_size += 1 + 1;
  }

  // bool Stream = 6[json_name = "Stream"];
  if (this->stream() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DumpArgs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.DumpArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const DumpArgs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DumpArgs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.DumpArgs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.DumpArgs)
    MergeFrom(*source);
  }
}

void DumpArgs::MergeFrom(const DumpArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.DumpArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dir().size() > 0) {
    _internal_set_dir(from._internal_dir());
  }
  if (from.jid().size() > 0) {
    _internal_set_jid(from._internal_jid());
  }
  if (from.has_criuopts()) {
    _internal_mutable_criuopts()->::cedana::services::task::CriuOpts::MergeFrom(from._internal_criuopts());
  }
  if (from.pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.gpu() != 0) {
    _internal_set_gpu(from._internal_gpu());
  }
  if (from.stream() != 0) {
    _internal_set_stream(from._internal_stream());
  }
}

void DumpArgs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.DumpArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DumpArgs::CopyFrom(const DumpArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.DumpArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DumpArgs::IsInitialized() const {
  return true;
}

void DumpArgs::InternalSwap(DumpArgs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dir_.Swap(&other->dir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  jid_.Swap(&other->jid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DumpArgs, stream_)
      + sizeof(DumpArgs::stream_)
      - PROTOBUF_FIELD_OFFSET(DumpArgs, criuopts_)>(
          reinterpret_cast<char*>(&criuopts_),
          reinterpret_cast<char*>(&other->criuopts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DumpArgs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DumpResp::InitAsDefaultInstance() {
  ::cedana::services::task::_DumpResp_default_instance_._instance.get_mutable()->state_ = const_cast< ::cedana::services::task::ProcessState*>(
      ::cedana::services::task::ProcessState::internal_default_instance());
  ::cedana::services::task::_DumpResp_default_instance_._instance.get_mutable()->dumpstats_ = const_cast< ::cedana::services::task::DumpStats*>(
      ::cedana::services::task::DumpStats::internal_default_instance());
}
class DumpResp::_Internal {
 public:
  static const ::cedana::services::task::ProcessState& state(const DumpResp* msg);
  static const ::cedana::services::task::DumpStats& dumpstats(const DumpResp* msg);
};

const ::cedana::services::task::ProcessState&
DumpResp::_Internal::state(const DumpResp* msg) {
  return *msg->state_;
}
const ::cedana::services::task::DumpStats&
DumpResp::_Internal::dumpstats(const DumpResp* msg) {
  return *msg->dumpstats_;
}
DumpResp::DumpResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.DumpResp)
}
DumpResp::DumpResp(const DumpResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  checkpointid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_checkpointid().empty()) {
    checkpointid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_checkpointid(),
      GetArena());
  }
  uploadid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uploadid().empty()) {
    uploadid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uploadid(),
      GetArena());
  }
  if (from._internal_has_state()) {
    state_ = new ::cedana::services::task::ProcessState(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from._internal_has_dumpstats()) {
    dumpstats_ = new ::cedana::services::task::DumpStats(*from.dumpstats_);
  } else {
    dumpstats_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.DumpResp)
}

void DumpResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DumpResp_task_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checkpointid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uploadid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dumpstats_) -
      reinterpret_cast<char*>(&state_)) + sizeof(dumpstats_));
}

DumpResp::~DumpResp() {
  // @@protoc_insertion_point(destructor:cedana.services.task.DumpResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DumpResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checkpointid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uploadid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete dumpstats_;
}

void DumpResp::ArenaDtor(void* object) {
  DumpResp* _this = reinterpret_cast< DumpResp* >(object);
  (void)_this;
}
void DumpResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DumpResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DumpResp& DumpResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DumpResp_task_2eproto.base);
  return *internal_default_instance();
}


void DumpResp::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.DumpResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  checkpointid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uploadid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  if (GetArena() == nullptr && dumpstats_ != nullptr) {
    delete dumpstats_;
  }
  dumpstats_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DumpResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Message = 1[json_name = "Message"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.DumpResp.Message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string CheckpointID = 2[json_name = "CheckpointID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_checkpointid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.DumpResp.CheckpointID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string UploadID = 3[json_name = "UploadID"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_uploadid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.DumpResp.UploadID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedana.services.task.ProcessState State = 4[json_name = "State"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedana.services.task.DumpStats DumpStats = 5[json_name = "DumpStats"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_dumpstats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DumpResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.DumpResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Message = 1[json_name = "Message"];
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.DumpResp.Message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // string CheckpointID = 2[json_name = "CheckpointID"];
  if (this->checkpointid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_checkpointid().data(), static_cast<int>(this->_internal_checkpointid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.DumpResp.CheckpointID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_checkpointid(), target);
  }

  // string UploadID = 3[json_name = "UploadID"];
  if (this->uploadid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uploadid().data(), static_cast<int>(this->_internal_uploadid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.DumpResp.UploadID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_uploadid(), target);
  }

  // .cedana.services.task.ProcessState State = 4[json_name = "State"];
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::state(this), target, stream);
  }

  // .cedana.services.task.DumpStats DumpStats = 5[json_name = "DumpStats"];
  if (this->has_dumpstats()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::dumpstats(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.DumpResp)
  return target;
}

size_t DumpResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.DumpResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Message = 1[json_name = "Message"];
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string CheckpointID = 2[json_name = "CheckpointID"];
  if (this->checkpointid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_checkpointid());
  }

  // string UploadID = 3[json_name = "UploadID"];
  if (this->uploadid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uploadid());
  }

  // .cedana.services.task.ProcessState State = 4[json_name = "State"];
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .cedana.services.task.DumpStats DumpStats = 5[json_name = "DumpStats"];
  if (this->has_dumpstats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dumpstats_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DumpResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.DumpResp)
  GOOGLE_DCHECK_NE(&from, this);
  const DumpResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DumpResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.DumpResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.DumpResp)
    MergeFrom(*source);
  }
}

void DumpResp::MergeFrom(const DumpResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.DumpResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.checkpointid().size() > 0) {
    _internal_set_checkpointid(from._internal_checkpointid());
  }
  if (from.uploadid().size() > 0) {
    _internal_set_uploadid(from._internal_uploadid());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::cedana::services::task::ProcessState::MergeFrom(from._internal_state());
  }
  if (from.has_dumpstats()) {
    _internal_mutable_dumpstats()->::cedana::services::task::DumpStats::MergeFrom(from._internal_dumpstats());
  }
}

void DumpResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.DumpResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DumpResp::CopyFrom(const DumpResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.DumpResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DumpResp::IsInitialized() const {
  return true;
}

void DumpResp::InternalSwap(DumpResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  checkpointid_.Swap(&other->checkpointid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uploadid_.Swap(&other->uploadid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DumpResp, dumpstats_)
      + sizeof(DumpResp::dumpstats_)
      - PROTOBUF_FIELD_OFFSET(DumpResp, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DumpResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RestoreArgs::InitAsDefaultInstance() {
  ::cedana::services::task::_RestoreArgs_default_instance_._instance.get_mutable()->criuopts_ = const_cast< ::cedana::services::task::CriuOpts*>(
      ::cedana::services::task::CriuOpts::internal_default_instance());
}
class RestoreArgs::_Internal {
 public:
  static const ::cedana::services::task::CriuOpts& criuopts(const RestoreArgs* msg);
};

const ::cedana::services::task::CriuOpts&
RestoreArgs::_Internal::criuopts(const RestoreArgs* msg) {
  return *msg->criuopts_;
}
RestoreArgs::RestoreArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  groups_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.RestoreArgs)
}
RestoreArgs::RestoreArgs(const RestoreArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  checkpointid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_checkpointid().empty()) {
    checkpointid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_checkpointid(),
      GetArena());
  }
  checkpointpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_checkpointpath().empty()) {
    checkpointpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_checkpointpath(),
      GetArena());
  }
  jid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_jid().empty()) {
    jid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_jid(),
      GetArena());
  }
  if (from._internal_has_criuopts()) {
    criuopts_ = new ::cedana::services::task::CriuOpts(*from.criuopts_);
  } else {
    criuopts_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_) -
    reinterpret_cast<char*>(&type_)) + sizeof(stream_));
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.RestoreArgs)
}

void RestoreArgs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RestoreArgs_task_2eproto.base);
  checkpointid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checkpointpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&criuopts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_) -
      reinterpret_cast<char*>(&criuopts_)) + sizeof(stream_));
}

RestoreArgs::~RestoreArgs() {
  // @@protoc_insertion_point(destructor:cedana.services.task.RestoreArgs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RestoreArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  checkpointid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checkpointpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete criuopts_;
}

void RestoreArgs::ArenaDtor(void* object) {
  RestoreArgs* _this = reinterpret_cast< RestoreArgs* >(object);
  (void)_this;
}
void RestoreArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RestoreArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RestoreArgs& RestoreArgs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RestoreArgs_task_2eproto.base);
  return *internal_default_instance();
}


void RestoreArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.RestoreArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_.Clear();
  checkpointid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  checkpointpath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  jid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && criuopts_ != nullptr) {
    delete criuopts_;
  }
  criuopts_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_) -
      reinterpret_cast<char*>(&type_)) + sizeof(stream_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RestoreArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cedana.services.task.CRType Type = 1[json_name = "Type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::cedana::services::task::CRType>(val));
        } else goto handle_unusual;
        continue;
      // string CheckpointID = 2[json_name = "CheckpointID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_checkpointid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RestoreArgs.CheckpointID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string CheckpointPath = 3[json_name = "CheckpointPath"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_checkpointpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RestoreArgs.CheckpointPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string JID = 4[json_name = "JID"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_jid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RestoreArgs.JID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 UID = 5[json_name = "UID"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 GID = 6[json_name = "GID"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 Groups = 7[json_name = "Groups"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_groups(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_groups(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Stream = 8[json_name = "Stream"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedana.services.task.CriuOpts CriuOpts = 9[json_name = "CriuOpts"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_criuopts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RestoreArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.RestoreArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cedana.services.task.CRType Type = 1[json_name = "Type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string CheckpointID = 2[json_name = "CheckpointID"];
  if (this->checkpointid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_checkpointid().data(), static_cast<int>(this->_internal_checkpointid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RestoreArgs.CheckpointID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_checkpointid(), target);
  }

  // string CheckpointPath = 3[json_name = "CheckpointPath"];
  if (this->checkpointpath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_checkpointpath().data(), static_cast<int>(this->_internal_checkpointpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RestoreArgs.CheckpointPath");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_checkpointpath(), target);
  }

  // string JID = 4[json_name = "JID"];
  if (this->jid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_jid().data(), static_cast<int>(this->_internal_jid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RestoreArgs.JID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_jid(), target);
  }

  // int32 UID = 5[json_name = "UID"];
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_uid(), target);
  }

  // int32 GID = 6[json_name = "GID"];
  if (this->gid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_gid(), target);
  }

  // repeated int32 Groups = 7[json_name = "Groups"];
  {
    int byte_size = _groups_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_groups(), byte_size, target);
    }
  }

  // bool Stream = 8[json_name = "Stream"];
  if (this->stream() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_stream(), target);
  }

  // .cedana.services.task.CriuOpts CriuOpts = 9[json_name = "CriuOpts"];
  if (this->has_criuopts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::criuopts(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.RestoreArgs)
  return target;
}

size_t RestoreArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.RestoreArgs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Groups = 7[json_name = "Groups"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->groups_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _groups_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string CheckpointID = 2[json_name = "CheckpointID"];
  if (this->checkpointid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_checkpointid());
  }

  // string CheckpointPath = 3[json_name = "CheckpointPath"];
  if (this->checkpointpath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_checkpointpath());
  }

  // string JID = 4[json_name = "JID"];
  if (this->jid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_jid());
  }

  // .cedana.services.task.CriuOpts CriuOpts = 9[json_name = "CriuOpts"];
  if (this->has_criuopts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *criuopts_);
  }

  // .cedana.services.task.CRType Type = 1[json_name = "Type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 UID = 5[json_name = "UID"];
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 GID = 6[json_name = "GID"];
  if (this->gid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gid());
  }

  // bool Stream = 8[json_name = "Stream"];
  if (this->stream() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestoreArgs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.RestoreArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const RestoreArgs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RestoreArgs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.RestoreArgs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.RestoreArgs)
    MergeFrom(*source);
  }
}

void RestoreArgs::MergeFrom(const RestoreArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.RestoreArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groups_.MergeFrom(from.groups_);
  if (from.checkpointid().size() > 0) {
    _internal_set_checkpointid(from._internal_checkpointid());
  }
  if (from.checkpointpath().size() > 0) {
    _internal_set_checkpointpath(from._internal_checkpointpath());
  }
  if (from.jid().size() > 0) {
    _internal_set_jid(from._internal_jid());
  }
  if (from.has_criuopts()) {
    _internal_mutable_criuopts()->::cedana::services::task::CriuOpts::MergeFrom(from._internal_criuopts());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.gid() != 0) {
    _internal_set_gid(from._internal_gid());
  }
  if (from.stream() != 0) {
    _internal_set_stream(from._internal_stream());
  }
}

void RestoreArgs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.RestoreArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestoreArgs::CopyFrom(const RestoreArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.RestoreArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestoreArgs::IsInitialized() const {
  return true;
}

void RestoreArgs::InternalSwap(RestoreArgs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  groups_.InternalSwap(&other->groups_);
  checkpointid_.Swap(&other->checkpointid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  checkpointpath_.Swap(&other->checkpointpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  jid_.Swap(&other->jid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RestoreArgs, stream_)
      + sizeof(RestoreArgs::stream_)
      - PROTOBUF_FIELD_OFFSET(RestoreArgs, criuopts_)>(
          reinterpret_cast<char*>(&criuopts_),
          reinterpret_cast<char*>(&other->criuopts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RestoreArgs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RestoreResp::InitAsDefaultInstance() {
  ::cedana::services::task::_RestoreResp_default_instance_._instance.get_mutable()->state_ = const_cast< ::cedana::services::task::ProcessState*>(
      ::cedana::services::task::ProcessState::internal_default_instance());
  ::cedana::services::task::_RestoreResp_default_instance_._instance.get_mutable()->restorestats_ = const_cast< ::cedana::services::task::RestoreStats*>(
      ::cedana::services::task::RestoreStats::internal_default_instance());
}
class RestoreResp::_Internal {
 public:
  static const ::cedana::services::task::ProcessState& state(const RestoreResp* msg);
  static const ::cedana::services::task::RestoreStats& restorestats(const RestoreResp* msg);
};

const ::cedana::services::task::ProcessState&
RestoreResp::_Internal::state(const RestoreResp* msg) {
  return *msg->state_;
}
const ::cedana::services::task::RestoreStats&
RestoreResp::_Internal::restorestats(const RestoreResp* msg) {
  return *msg->restorestats_;
}
RestoreResp::RestoreResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.RestoreResp)
}
RestoreResp::RestoreResp(const RestoreResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  if (from._internal_has_state()) {
    state_ = new ::cedana::services::task::ProcessState(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from._internal_has_restorestats()) {
    restorestats_ = new ::cedana::services::task::RestoreStats(*from.restorestats_);
  } else {
    restorestats_ = nullptr;
  }
  newpid_ = from.newpid_;
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.RestoreResp)
}

void RestoreResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RestoreResp_task_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&newpid_) -
      reinterpret_cast<char*>(&state_)) + sizeof(newpid_));
}

RestoreResp::~RestoreResp() {
  // @@protoc_insertion_point(destructor:cedana.services.task.RestoreResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RestoreResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete restorestats_;
}

void RestoreResp::ArenaDtor(void* object) {
  RestoreResp* _this = reinterpret_cast< RestoreResp* >(object);
  (void)_this;
}
void RestoreResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RestoreResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RestoreResp& RestoreResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RestoreResp_task_2eproto.base);
  return *internal_default_instance();
}


void RestoreResp::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.RestoreResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  if (GetArena() == nullptr && restorestats_ != nullptr) {
    delete restorestats_;
  }
  restorestats_ = nullptr;
  newpid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RestoreResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Message = 1[json_name = "Message"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RestoreResp.Message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 NewPID = 2[json_name = "NewPID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          newpid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedana.services.task.ProcessState State = 3[json_name = "State"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedana.services.task.RestoreStats RestoreStats = 6[json_name = "RestoreStats"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_restorestats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RestoreResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.RestoreResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Message = 1[json_name = "Message"];
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RestoreResp.Message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // int32 NewPID = 2[json_name = "NewPID"];
  if (this->newpid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_newpid(), target);
  }

  // .cedana.services.task.ProcessState State = 3[json_name = "State"];
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::state(this), target, stream);
  }

  // .cedana.services.task.RestoreStats RestoreStats = 6[json_name = "RestoreStats"];
  if (this->has_restorestats()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::restorestats(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.RestoreResp)
  return target;
}

size_t RestoreResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.RestoreResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Message = 1[json_name = "Message"];
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .cedana.services.task.ProcessState State = 3[json_name = "State"];
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .cedana.services.task.RestoreStats RestoreStats = 6[json_name = "RestoreStats"];
  if (this->has_restorestats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *restorestats_);
  }

  // int32 NewPID = 2[json_name = "NewPID"];
  if (this->newpid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_newpid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestoreResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.RestoreResp)
  GOOGLE_DCHECK_NE(&from, this);
  const RestoreResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RestoreResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.RestoreResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.RestoreResp)
    MergeFrom(*source);
  }
}

void RestoreResp::MergeFrom(const RestoreResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.RestoreResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::cedana::services::task::ProcessState::MergeFrom(from._internal_state());
  }
  if (from.has_restorestats()) {
    _internal_mutable_restorestats()->::cedana::services::task::RestoreStats::MergeFrom(from._internal_restorestats());
  }
  if (from.newpid() != 0) {
    _internal_set_newpid(from._internal_newpid());
  }
}

void RestoreResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.RestoreResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestoreResp::CopyFrom(const RestoreResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.RestoreResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestoreResp::IsInitialized() const {
  return true;
}

void RestoreResp::InternalSwap(RestoreResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RestoreResp, newpid_)
      + sizeof(RestoreResp::newpid_)
      - PROTOBUF_FIELD_OFFSET(RestoreResp, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RestoreResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryArgs::InitAsDefaultInstance() {
}
class QueryArgs::_Internal {
 public:
};

QueryArgs::QueryArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pids_(arena),
  jids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.QueryArgs)
}
QueryArgs::QueryArgs(const QueryArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pids_(from.pids_),
      jids_(from.jids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.QueryArgs)
}

void QueryArgs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryArgs_task_2eproto.base);
}

QueryArgs::~QueryArgs() {
  // @@protoc_insertion_point(destructor:cedana.services.task.QueryArgs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void QueryArgs::ArenaDtor(void* object) {
  QueryArgs* _this = reinterpret_cast< QueryArgs* >(object);
  (void)_this;
}
void QueryArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryArgs& QueryArgs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryArgs_task_2eproto.base);
  return *internal_default_instance();
}


void QueryArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.QueryArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pids_.Clear();
  jids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 PIDs = 1[json_name = "PIDs"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_pids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_pids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string JIDs = 2[json_name = "JIDs"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_jids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.QueryArgs.JIDs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.QueryArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 PIDs = 1[json_name = "PIDs"];
  {
    int byte_size = _pids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_pids(), byte_size, target);
    }
  }

  // repeated string JIDs = 2[json_name = "JIDs"];
  for (int i = 0, n = this->_internal_jids_size(); i < n; i++) {
    const auto& s = this->_internal_jids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.QueryArgs.JIDs");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.QueryArgs)
  return target;
}

size_t QueryArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.QueryArgs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 PIDs = 1[json_name = "PIDs"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->pids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string JIDs = 2[json_name = "JIDs"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(jids_.size());
  for (int i = 0, n = jids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      jids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryArgs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.QueryArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryArgs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryArgs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.QueryArgs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.QueryArgs)
    MergeFrom(*source);
  }
}

void QueryArgs::MergeFrom(const QueryArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.QueryArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pids_.MergeFrom(from.pids_);
  jids_.MergeFrom(from.jids_);
}

void QueryArgs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.QueryArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryArgs::CopyFrom(const QueryArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.QueryArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryArgs::IsInitialized() const {
  return true;
}

void QueryArgs::InternalSwap(QueryArgs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pids_.InternalSwap(&other->pids_);
  jids_.InternalSwap(&other->jids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryArgs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryResp::InitAsDefaultInstance() {
}
class QueryResp::_Internal {
 public:
};

QueryResp::QueryResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  processes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.QueryResp)
}
QueryResp::QueryResp(const QueryResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      processes_(from.processes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.QueryResp)
}

void QueryResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryResp_task_2eproto.base);
}

QueryResp::~QueryResp() {
  // @@protoc_insertion_point(destructor:cedana.services.task.QueryResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void QueryResp::ArenaDtor(void* object) {
  QueryResp* _this = reinterpret_cast< QueryResp* >(object);
  (void)_this;
}
void QueryResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryResp& QueryResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryResp_task_2eproto.base);
  return *internal_default_instance();
}


void QueryResp::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.QueryResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  processes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .cedana.services.task.ProcessState Processes = 1[json_name = "Processes"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_processes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.QueryResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cedana.services.task.ProcessState Processes = 1[json_name = "Processes"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_processes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_processes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.QueryResp)
  return target;
}

size_t QueryResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.QueryResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cedana.services.task.ProcessState Processes = 1[json_name = "Processes"];
  total_size += 1UL * this->_internal_processes_size();
  for (const auto& msg : this->processes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.QueryResp)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.QueryResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.QueryResp)
    MergeFrom(*source);
  }
}

void QueryResp::MergeFrom(const QueryResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.QueryResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  processes_.MergeFrom(from.processes_);
}

void QueryResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.QueryResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResp::CopyFrom(const QueryResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.QueryResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResp::IsInitialized() const {
  return true;
}

void QueryResp::InternalSwap(QueryResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  processes_.InternalSwap(&other->processes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContainerdDumpArgs::InitAsDefaultInstance() {
  ::cedana::services::task::_ContainerdDumpArgs_default_instance_._instance.get_mutable()->runcdumpargs_ = const_cast< ::cedana::services::task::RuncDumpArgs*>(
      ::cedana::services::task::RuncDumpArgs::internal_default_instance());
  ::cedana::services::task::_ContainerdDumpArgs_default_instance_._instance.get_mutable()->containerdrootfsdumpargs_ = const_cast< ::cedana::services::task::ContainerdRootfsDumpArgs*>(
      ::cedana::services::task::ContainerdRootfsDumpArgs::internal_default_instance());
}
class ContainerdDumpArgs::_Internal {
 public:
  static const ::cedana::services::task::RuncDumpArgs& runcdumpargs(const ContainerdDumpArgs* msg);
  static const ::cedana::services::task::ContainerdRootfsDumpArgs& containerdrootfsdumpargs(const ContainerdDumpArgs* msg);
};

const ::cedana::services::task::RuncDumpArgs&
ContainerdDumpArgs::_Internal::runcdumpargs(const ContainerdDumpArgs* msg) {
  return *msg->runcdumpargs_;
}
const ::cedana::services::task::ContainerdRootfsDumpArgs&
ContainerdDumpArgs::_Internal::containerdrootfsdumpargs(const ContainerdDumpArgs* msg) {
  return *msg->containerdrootfsdumpargs_;
}
ContainerdDumpArgs::ContainerdDumpArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.ContainerdDumpArgs)
}
ContainerdDumpArgs::ContainerdDumpArgs(const ContainerdDumpArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_runcdumpargs()) {
    runcdumpargs_ = new ::cedana::services::task::RuncDumpArgs(*from.runcdumpargs_);
  } else {
    runcdumpargs_ = nullptr;
  }
  if (from._internal_has_containerdrootfsdumpargs()) {
    containerdrootfsdumpargs_ = new ::cedana::services::task::ContainerdRootfsDumpArgs(*from.containerdrootfsdumpargs_);
  } else {
    containerdrootfsdumpargs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.ContainerdDumpArgs)
}

void ContainerdDumpArgs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContainerdDumpArgs_task_2eproto.base);
  ::memset(&runcdumpargs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&containerdrootfsdumpargs_) -
      reinterpret_cast<char*>(&runcdumpargs_)) + sizeof(containerdrootfsdumpargs_));
}

ContainerdDumpArgs::~ContainerdDumpArgs() {
  // @@protoc_insertion_point(destructor:cedana.services.task.ContainerdDumpArgs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerdDumpArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete runcdumpargs_;
  if (this != internal_default_instance()) delete containerdrootfsdumpargs_;
}

void ContainerdDumpArgs::ArenaDtor(void* object) {
  ContainerdDumpArgs* _this = reinterpret_cast< ContainerdDumpArgs* >(object);
  (void)_this;
}
void ContainerdDumpArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerdDumpArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerdDumpArgs& ContainerdDumpArgs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerdDumpArgs_task_2eproto.base);
  return *internal_default_instance();
}


void ContainerdDumpArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.ContainerdDumpArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && runcdumpargs_ != nullptr) {
    delete runcdumpargs_;
  }
  runcdumpargs_ = nullptr;
  if (GetArena() == nullptr && containerdrootfsdumpargs_ != nullptr) {
    delete containerdrootfsdumpargs_;
  }
  containerdrootfsdumpargs_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerdDumpArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cedana.services.task.RuncDumpArgs RuncDumpArgs = 1[json_name = "RuncDumpArgs"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_runcdumpargs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedana.services.task.ContainerdRootfsDumpArgs ContainerdRootfsDumpArgs = 2[json_name = "ContainerdRootfsDumpArgs"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_containerdrootfsdumpargs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerdDumpArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.ContainerdDumpArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cedana.services.task.RuncDumpArgs RuncDumpArgs = 1[json_name = "RuncDumpArgs"];
  if (this->has_runcdumpargs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::runcdumpargs(this), target, stream);
  }

  // .cedana.services.task.ContainerdRootfsDumpArgs ContainerdRootfsDumpArgs = 2[json_name = "ContainerdRootfsDumpArgs"];
  if (this->has_containerdrootfsdumpargs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::containerdrootfsdumpargs(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.ContainerdDumpArgs)
  return target;
}

size_t ContainerdDumpArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.ContainerdDumpArgs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cedana.services.task.RuncDumpArgs RuncDumpArgs = 1[json_name = "RuncDumpArgs"];
  if (this->has_runcdumpargs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *runcdumpargs_);
  }

  // .cedana.services.task.ContainerdRootfsDumpArgs ContainerdRootfsDumpArgs = 2[json_name = "ContainerdRootfsDumpArgs"];
  if (this->has_containerdrootfsdumpargs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *containerdrootfsdumpargs_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerdDumpArgs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.ContainerdDumpArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerdDumpArgs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerdDumpArgs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.ContainerdDumpArgs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.ContainerdDumpArgs)
    MergeFrom(*source);
  }
}

void ContainerdDumpArgs::MergeFrom(const ContainerdDumpArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.ContainerdDumpArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_runcdumpargs()) {
    _internal_mutable_runcdumpargs()->::cedana::services::task::RuncDumpArgs::MergeFrom(from._internal_runcdumpargs());
  }
  if (from.has_containerdrootfsdumpargs()) {
    _internal_mutable_containerdrootfsdumpargs()->::cedana::services::task::ContainerdRootfsDumpArgs::MergeFrom(from._internal_containerdrootfsdumpargs());
  }
}

void ContainerdDumpArgs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.ContainerdDumpArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerdDumpArgs::CopyFrom(const ContainerdDumpArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.ContainerdDumpArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerdDumpArgs::IsInitialized() const {
  return true;
}

void ContainerdDumpArgs::InternalSwap(ContainerdDumpArgs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContainerdDumpArgs, containerdrootfsdumpargs_)
      + sizeof(ContainerdDumpArgs::containerdrootfsdumpargs_)
      - PROTOBUF_FIELD_OFFSET(ContainerdDumpArgs, runcdumpargs_)>(
          reinterpret_cast<char*>(&runcdumpargs_),
          reinterpret_cast<char*>(&other->runcdumpargs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerdDumpArgs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContainerdDumpResp::InitAsDefaultInstance() {
}
class ContainerdDumpResp::_Internal {
 public:
};

ContainerdDumpResp::ContainerdDumpResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.ContainerdDumpResp)
}
ContainerdDumpResp::ContainerdDumpResp(const ContainerdDumpResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  checkpointpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_checkpointpath().empty()) {
    checkpointpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_checkpointpath(),
      GetArena());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.ContainerdDumpResp)
}

void ContainerdDumpResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContainerdDumpResp_task_2eproto.base);
  checkpointpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ContainerdDumpResp::~ContainerdDumpResp() {
  // @@protoc_insertion_point(destructor:cedana.services.task.ContainerdDumpResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerdDumpResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  checkpointpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContainerdDumpResp::ArenaDtor(void* object) {
  ContainerdDumpResp* _this = reinterpret_cast< ContainerdDumpResp* >(object);
  (void)_this;
}
void ContainerdDumpResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerdDumpResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerdDumpResp& ContainerdDumpResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerdDumpResp_task_2eproto.base);
  return *internal_default_instance();
}


void ContainerdDumpResp::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.ContainerdDumpResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  checkpointpath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerdDumpResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string CheckpointPath = 1[json_name = "CheckpointPath"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_checkpointpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ContainerdDumpResp.CheckpointPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Message = 2[json_name = "Message"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ContainerdDumpResp.Message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerdDumpResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.ContainerdDumpResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string CheckpointPath = 1[json_name = "CheckpointPath"];
  if (this->checkpointpath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_checkpointpath().data(), static_cast<int>(this->_internal_checkpointpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ContainerdDumpResp.CheckpointPath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_checkpointpath(), target);
  }

  // string Message = 2[json_name = "Message"];
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ContainerdDumpResp.Message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.ContainerdDumpResp)
  return target;
}

size_t ContainerdDumpResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.ContainerdDumpResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string CheckpointPath = 1[json_name = "CheckpointPath"];
  if (this->checkpointpath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_checkpointpath());
  }

  // string Message = 2[json_name = "Message"];
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerdDumpResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.ContainerdDumpResp)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerdDumpResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerdDumpResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.ContainerdDumpResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.ContainerdDumpResp)
    MergeFrom(*source);
  }
}

void ContainerdDumpResp::MergeFrom(const ContainerdDumpResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.ContainerdDumpResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.checkpointpath().size() > 0) {
    _internal_set_checkpointpath(from._internal_checkpointpath());
  }
  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
}

void ContainerdDumpResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.ContainerdDumpResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerdDumpResp::CopyFrom(const ContainerdDumpResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.ContainerdDumpResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerdDumpResp::IsInitialized() const {
  return true;
}

void ContainerdDumpResp::InternalSwap(ContainerdDumpResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  checkpointpath_.Swap(&other->checkpointpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerdDumpResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContainerdRestoreArgs::InitAsDefaultInstance() {
}
class ContainerdRestoreArgs::_Internal {
 public:
};

ContainerdRestoreArgs::ContainerdRestoreArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.ContainerdRestoreArgs)
}
ContainerdRestoreArgs::ContainerdRestoreArgs(const ContainerdRestoreArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  imgpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imgpath().empty()) {
    imgpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_imgpath(),
      GetArena());
  }
  containerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_containerid().empty()) {
    containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_containerid(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.ContainerdRestoreArgs)
}

void ContainerdRestoreArgs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContainerdRestoreArgs_task_2eproto.base);
  imgpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  containerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ContainerdRestoreArgs::~ContainerdRestoreArgs() {
  // @@protoc_insertion_point(destructor:cedana.services.task.ContainerdRestoreArgs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerdRestoreArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  imgpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  containerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContainerdRestoreArgs::ArenaDtor(void* object) {
  ContainerdRestoreArgs* _this = reinterpret_cast< ContainerdRestoreArgs* >(object);
  (void)_this;
}
void ContainerdRestoreArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerdRestoreArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerdRestoreArgs& ContainerdRestoreArgs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerdRestoreArgs_task_2eproto.base);
  return *internal_default_instance();
}


void ContainerdRestoreArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.ContainerdRestoreArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imgpath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  containerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerdRestoreArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ImgPath = 1[json_name = "ImgPath"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_imgpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ContainerdRestoreArgs.ImgPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ContainerID = 2[json_name = "ContainerID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_containerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ContainerdRestoreArgs.ContainerID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerdRestoreArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.ContainerdRestoreArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ImgPath = 1[json_name = "ImgPath"];
  if (this->imgpath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imgpath().data(), static_cast<int>(this->_internal_imgpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ContainerdRestoreArgs.ImgPath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_imgpath(), target);
  }

  // string ContainerID = 2[json_name = "ContainerID"];
  if (this->containerid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_containerid().data(), static_cast<int>(this->_internal_containerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ContainerdRestoreArgs.ContainerID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_containerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.ContainerdRestoreArgs)
  return target;
}

size_t ContainerdRestoreArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.ContainerdRestoreArgs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ImgPath = 1[json_name = "ImgPath"];
  if (this->imgpath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imgpath());
  }

  // string ContainerID = 2[json_name = "ContainerID"];
  if (this->containerid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_containerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerdRestoreArgs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.ContainerdRestoreArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerdRestoreArgs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerdRestoreArgs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.ContainerdRestoreArgs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.ContainerdRestoreArgs)
    MergeFrom(*source);
  }
}

void ContainerdRestoreArgs::MergeFrom(const ContainerdRestoreArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.ContainerdRestoreArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.imgpath().size() > 0) {
    _internal_set_imgpath(from._internal_imgpath());
  }
  if (from.containerid().size() > 0) {
    _internal_set_containerid(from._internal_containerid());
  }
}

void ContainerdRestoreArgs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.ContainerdRestoreArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerdRestoreArgs::CopyFrom(const ContainerdRestoreArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.ContainerdRestoreArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerdRestoreArgs::IsInitialized() const {
  return true;
}

void ContainerdRestoreArgs::InternalSwap(ContainerdRestoreArgs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  imgpath_.Swap(&other->imgpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  containerid_.Swap(&other->containerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerdRestoreArgs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContainerdRestoreResp::InitAsDefaultInstance() {
}
class ContainerdRestoreResp::_Internal {
 public:
};

ContainerdRestoreResp::ContainerdRestoreResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.ContainerdRestoreResp)
}
ContainerdRestoreResp::ContainerdRestoreResp(const ContainerdRestoreResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.ContainerdRestoreResp)
}

void ContainerdRestoreResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContainerdRestoreResp_task_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ContainerdRestoreResp::~ContainerdRestoreResp() {
  // @@protoc_insertion_point(destructor:cedana.services.task.ContainerdRestoreResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerdRestoreResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContainerdRestoreResp::ArenaDtor(void* object) {
  ContainerdRestoreResp* _this = reinterpret_cast< ContainerdRestoreResp* >(object);
  (void)_this;
}
void ContainerdRestoreResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerdRestoreResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerdRestoreResp& ContainerdRestoreResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerdRestoreResp_task_2eproto.base);
  return *internal_default_instance();
}


void ContainerdRestoreResp::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.ContainerdRestoreResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerdRestoreResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Message = 1[json_name = "Message"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ContainerdRestoreResp.Message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerdRestoreResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.ContainerdRestoreResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Message = 1[json_name = "Message"];
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ContainerdRestoreResp.Message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.ContainerdRestoreResp)
  return target;
}

size_t ContainerdRestoreResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.ContainerdRestoreResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Message = 1[json_name = "Message"];
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerdRestoreResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.ContainerdRestoreResp)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerdRestoreResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerdRestoreResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.ContainerdRestoreResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.ContainerdRestoreResp)
    MergeFrom(*source);
  }
}

void ContainerdRestoreResp::MergeFrom(const ContainerdRestoreResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.ContainerdRestoreResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
}

void ContainerdRestoreResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.ContainerdRestoreResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerdRestoreResp::CopyFrom(const ContainerdRestoreResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.ContainerdRestoreResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerdRestoreResp::IsInitialized() const {
  return true;
}

void ContainerdRestoreResp::InternalSwap(ContainerdRestoreResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerdRestoreResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContainerdQueryArgs::InitAsDefaultInstance() {
}
class ContainerdQueryArgs::_Internal {
 public:
};

ContainerdQueryArgs::ContainerdQueryArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.ContainerdQueryArgs)
}
ContainerdQueryArgs::ContainerdQueryArgs(const ContainerdQueryArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_root().empty()) {
    root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_root(),
      GetArena());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.ContainerdQueryArgs)
}

void ContainerdQueryArgs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContainerdQueryArgs_task_2eproto.base);
  root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ContainerdQueryArgs::~ContainerdQueryArgs() {
  // @@protoc_insertion_point(destructor:cedana.services.task.ContainerdQueryArgs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerdQueryArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContainerdQueryArgs::ArenaDtor(void* object) {
  ContainerdQueryArgs* _this = reinterpret_cast< ContainerdQueryArgs* >(object);
  (void)_this;
}
void ContainerdQueryArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerdQueryArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerdQueryArgs& ContainerdQueryArgs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerdQueryArgs_task_2eproto.base);
  return *internal_default_instance();
}


void ContainerdQueryArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.ContainerdQueryArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerdQueryArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Root = 1[json_name = "Root"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ContainerdQueryArgs.Root"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Namespace = 2[json_name = "Namespace"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ContainerdQueryArgs.Namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerdQueryArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.ContainerdQueryArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Root = 1[json_name = "Root"];
  if (this->root().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_root().data(), static_cast<int>(this->_internal_root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ContainerdQueryArgs.Root");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_root(), target);
  }

  // string Namespace = 2[json_name = "Namespace"];
  if (this->namespace_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ContainerdQueryArgs.Namespace");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_namespace_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.ContainerdQueryArgs)
  return target;
}

size_t ContainerdQueryArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.ContainerdQueryArgs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Root = 1[json_name = "Root"];
  if (this->root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_root());
  }

  // string Namespace = 2[json_name = "Namespace"];
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerdQueryArgs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.ContainerdQueryArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerdQueryArgs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerdQueryArgs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.ContainerdQueryArgs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.ContainerdQueryArgs)
    MergeFrom(*source);
  }
}

void ContainerdQueryArgs::MergeFrom(const ContainerdQueryArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.ContainerdQueryArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.root().size() > 0) {
    _internal_set_root(from._internal_root());
  }
  if (from.namespace_().size() > 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
}

void ContainerdQueryArgs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.ContainerdQueryArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerdQueryArgs::CopyFrom(const ContainerdQueryArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.ContainerdQueryArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerdQueryArgs::IsInitialized() const {
  return true;
}

void ContainerdQueryArgs::InternalSwap(ContainerdQueryArgs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  root_.Swap(&other->root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerdQueryArgs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContainerdQueryResp::InitAsDefaultInstance() {
}
class ContainerdQueryResp::_Internal {
 public:
};

ContainerdQueryResp::ContainerdQueryResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  containers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.ContainerdQueryResp)
}
ContainerdQueryResp::ContainerdQueryResp(const ContainerdQueryResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      containers_(from.containers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.ContainerdQueryResp)
}

void ContainerdQueryResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContainerdQueryResp_task_2eproto.base);
}

ContainerdQueryResp::~ContainerdQueryResp() {
  // @@protoc_insertion_point(destructor:cedana.services.task.ContainerdQueryResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerdQueryResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ContainerdQueryResp::ArenaDtor(void* object) {
  ContainerdQueryResp* _this = reinterpret_cast< ContainerdQueryResp* >(object);
  (void)_this;
}
void ContainerdQueryResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerdQueryResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerdQueryResp& ContainerdQueryResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerdQueryResp_task_2eproto.base);
  return *internal_default_instance();
}


void ContainerdQueryResp::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.ContainerdQueryResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  containers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerdQueryResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .cedana.services.task.ContainerdContainer Containers = 1[json_name = "Containers"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_containers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerdQueryResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.ContainerdQueryResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cedana.services.task.ContainerdContainer Containers = 1[json_name = "Containers"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_containers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_containers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.ContainerdQueryResp)
  return target;
}

size_t ContainerdQueryResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.ContainerdQueryResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cedana.services.task.ContainerdContainer Containers = 1[json_name = "Containers"];
  total_size += 1UL * this->_internal_containers_size();
  for (const auto& msg : this->containers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerdQueryResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.ContainerdQueryResp)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerdQueryResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerdQueryResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.ContainerdQueryResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.ContainerdQueryResp)
    MergeFrom(*source);
  }
}

void ContainerdQueryResp::MergeFrom(const ContainerdQueryResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.ContainerdQueryResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  containers_.MergeFrom(from.containers_);
}

void ContainerdQueryResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.ContainerdQueryResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerdQueryResp::CopyFrom(const ContainerdQueryResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.ContainerdQueryResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerdQueryResp::IsInitialized() const {
  return true;
}

void ContainerdQueryResp::InternalSwap(ContainerdQueryResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  containers_.InternalSwap(&other->containers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerdQueryResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContainerdContainer::InitAsDefaultInstance() {
}
class ContainerdContainer::_Internal {
 public:
};

ContainerdContainer::ContainerdContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.ContainerdContainer)
}
ContainerdContainer::ContainerdContainer(const ContainerdContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  containername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_containername().empty()) {
    containername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_containername(),
      GetArena());
  }
  imagename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imagename().empty()) {
    imagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_imagename(),
      GetArena());
  }
  sandboxid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sandboxid().empty()) {
    sandboxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sandboxid(),
      GetArena());
  }
  sandboxname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sandboxname().empty()) {
    sandboxname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sandboxname(),
      GetArena());
  }
  sandboxnamespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sandboxnamespace().empty()) {
    sandboxnamespace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sandboxnamespace(),
      GetArena());
  }
  sandboxuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sandboxuid().empty()) {
    sandboxuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sandboxuid(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.ContainerdContainer)
}

void ContainerdContainer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContainerdContainer_task_2eproto.base);
  containername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imagename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sandboxid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sandboxname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sandboxnamespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sandboxuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ContainerdContainer::~ContainerdContainer() {
  // @@protoc_insertion_point(destructor:cedana.services.task.ContainerdContainer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerdContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  containername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imagename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sandboxid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sandboxname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sandboxnamespace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sandboxuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContainerdContainer::ArenaDtor(void* object) {
  ContainerdContainer* _this = reinterpret_cast< ContainerdContainer* >(object);
  (void)_this;
}
void ContainerdContainer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerdContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerdContainer& ContainerdContainer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerdContainer_task_2eproto.base);
  return *internal_default_instance();
}


void ContainerdContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.ContainerdContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  containername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  imagename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sandboxid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sandboxname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sandboxnamespace_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sandboxuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerdContainer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ContainerName = 1[json_name = "ContainerName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_containername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ContainerdContainer.ContainerName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ImageName = 2[json_name = "ImageName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_imagename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ContainerdContainer.ImageName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SandboxId = 3[json_name = "SandboxId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sandboxid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ContainerdContainer.SandboxId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SandboxName = 4[json_name = "SandboxName"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sandboxname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ContainerdContainer.SandboxName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SandboxNamespace = 5[json_name = "SandboxNamespace"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_sandboxnamespace();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ContainerdContainer.SandboxNamespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SandboxUid = 6[json_name = "SandboxUid"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_sandboxuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ContainerdContainer.SandboxUid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerdContainer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.ContainerdContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ContainerName = 1[json_name = "ContainerName"];
  if (this->containername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_containername().data(), static_cast<int>(this->_internal_containername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ContainerdContainer.ContainerName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_containername(), target);
  }

  // string ImageName = 2[json_name = "ImageName"];
  if (this->imagename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imagename().data(), static_cast<int>(this->_internal_imagename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ContainerdContainer.ImageName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_imagename(), target);
  }

  // string SandboxId = 3[json_name = "SandboxId"];
  if (this->sandboxid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sandboxid().data(), static_cast<int>(this->_internal_sandboxid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ContainerdContainer.SandboxId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sandboxid(), target);
  }

  // string SandboxName = 4[json_name = "SandboxName"];
  if (this->sandboxname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sandboxname().data(), static_cast<int>(this->_internal_sandboxname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ContainerdContainer.SandboxName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sandboxname(), target);
  }

  // string SandboxNamespace = 5[json_name = "SandboxNamespace"];
  if (this->sandboxnamespace().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sandboxnamespace().data(), static_cast<int>(this->_internal_sandboxnamespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ContainerdContainer.SandboxNamespace");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sandboxnamespace(), target);
  }

  // string SandboxUid = 6[json_name = "SandboxUid"];
  if (this->sandboxuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sandboxuid().data(), static_cast<int>(this->_internal_sandboxuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ContainerdContainer.SandboxUid");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_sandboxuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.ContainerdContainer)
  return target;
}

size_t ContainerdContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.ContainerdContainer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ContainerName = 1[json_name = "ContainerName"];
  if (this->containername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_containername());
  }

  // string ImageName = 2[json_name = "ImageName"];
  if (this->imagename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imagename());
  }

  // string SandboxId = 3[json_name = "SandboxId"];
  if (this->sandboxid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sandboxid());
  }

  // string SandboxName = 4[json_name = "SandboxName"];
  if (this->sandboxname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sandboxname());
  }

  // string SandboxNamespace = 5[json_name = "SandboxNamespace"];
  if (this->sandboxnamespace().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sandboxnamespace());
  }

  // string SandboxUid = 6[json_name = "SandboxUid"];
  if (this->sandboxuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sandboxuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerdContainer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.ContainerdContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerdContainer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerdContainer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.ContainerdContainer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.ContainerdContainer)
    MergeFrom(*source);
  }
}

void ContainerdContainer::MergeFrom(const ContainerdContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.ContainerdContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.containername().size() > 0) {
    _internal_set_containername(from._internal_containername());
  }
  if (from.imagename().size() > 0) {
    _internal_set_imagename(from._internal_imagename());
  }
  if (from.sandboxid().size() > 0) {
    _internal_set_sandboxid(from._internal_sandboxid());
  }
  if (from.sandboxname().size() > 0) {
    _internal_set_sandboxname(from._internal_sandboxname());
  }
  if (from.sandboxnamespace().size() > 0) {
    _internal_set_sandboxnamespace(from._internal_sandboxnamespace());
  }
  if (from.sandboxuid().size() > 0) {
    _internal_set_sandboxuid(from._internal_sandboxuid());
  }
}

void ContainerdContainer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.ContainerdContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerdContainer::CopyFrom(const ContainerdContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.ContainerdContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerdContainer::IsInitialized() const {
  return true;
}

void ContainerdContainer::InternalSwap(ContainerdContainer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  containername_.Swap(&other->containername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  imagename_.Swap(&other->imagename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sandboxid_.Swap(&other->sandboxid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sandboxname_.Swap(&other->sandboxname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sandboxnamespace_.Swap(&other->sandboxnamespace_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sandboxuid_.Swap(&other->sandboxuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerdContainer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContainerdRootfsDumpArgs::InitAsDefaultInstance() {
}
class ContainerdRootfsDumpArgs::_Internal {
 public:
};

ContainerdRootfsDumpArgs::ContainerdRootfsDumpArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.ContainerdRootfsDumpArgs)
}
ContainerdRootfsDumpArgs::ContainerdRootfsDumpArgs(const ContainerdRootfsDumpArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  containerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_containerid().empty()) {
    containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_containerid(),
      GetArena());
  }
  imageref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imageref().empty()) {
    imageref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_imageref(),
      GetArena());
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.ContainerdRootfsDumpArgs)
}

void ContainerdRootfsDumpArgs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContainerdRootfsDumpArgs_task_2eproto.base);
  containerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imageref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ContainerdRootfsDumpArgs::~ContainerdRootfsDumpArgs() {
  // @@protoc_insertion_point(destructor:cedana.services.task.ContainerdRootfsDumpArgs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerdRootfsDumpArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  containerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imageref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContainerdRootfsDumpArgs::ArenaDtor(void* object) {
  ContainerdRootfsDumpArgs* _this = reinterpret_cast< ContainerdRootfsDumpArgs* >(object);
  (void)_this;
}
void ContainerdRootfsDumpArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerdRootfsDumpArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerdRootfsDumpArgs& ContainerdRootfsDumpArgs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerdRootfsDumpArgs_task_2eproto.base);
  return *internal_default_instance();
}


void ContainerdRootfsDumpArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.ContainerdRootfsDumpArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  containerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  imageref_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerdRootfsDumpArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ContainerID = 1[json_name = "ContainerID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_containerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ContainerdRootfsDumpArgs.ContainerID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ImageRef = 2[json_name = "ImageRef"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_imageref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ContainerdRootfsDumpArgs.ImageRef"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Address = 3[json_name = "Address"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ContainerdRootfsDumpArgs.Address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Namespace = 4[json_name = "Namespace"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ContainerdRootfsDumpArgs.Namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerdRootfsDumpArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.ContainerdRootfsDumpArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ContainerID = 1[json_name = "ContainerID"];
  if (this->containerid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_containerid().data(), static_cast<int>(this->_internal_containerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ContainerdRootfsDumpArgs.ContainerID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_containerid(), target);
  }

  // string ImageRef = 2[json_name = "ImageRef"];
  if (this->imageref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imageref().data(), static_cast<int>(this->_internal_imageref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ContainerdRootfsDumpArgs.ImageRef");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_imageref(), target);
  }

  // string Address = 3[json_name = "Address"];
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ContainerdRootfsDumpArgs.Address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_address(), target);
  }

  // string Namespace = 4[json_name = "Namespace"];
  if (this->namespace_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ContainerdRootfsDumpArgs.Namespace");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_namespace_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.ContainerdRootfsDumpArgs)
  return target;
}

size_t ContainerdRootfsDumpArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.ContainerdRootfsDumpArgs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ContainerID = 1[json_name = "ContainerID"];
  if (this->containerid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_containerid());
  }

  // string ImageRef = 2[json_name = "ImageRef"];
  if (this->imageref().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imageref());
  }

  // string Address = 3[json_name = "Address"];
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string Namespace = 4[json_name = "Namespace"];
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerdRootfsDumpArgs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.ContainerdRootfsDumpArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerdRootfsDumpArgs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerdRootfsDumpArgs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.ContainerdRootfsDumpArgs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.ContainerdRootfsDumpArgs)
    MergeFrom(*source);
  }
}

void ContainerdRootfsDumpArgs::MergeFrom(const ContainerdRootfsDumpArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.ContainerdRootfsDumpArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.containerid().size() > 0) {
    _internal_set_containerid(from._internal_containerid());
  }
  if (from.imageref().size() > 0) {
    _internal_set_imageref(from._internal_imageref());
  }
  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.namespace_().size() > 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
}

void ContainerdRootfsDumpArgs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.ContainerdRootfsDumpArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerdRootfsDumpArgs::CopyFrom(const ContainerdRootfsDumpArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.ContainerdRootfsDumpArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerdRootfsDumpArgs::IsInitialized() const {
  return true;
}

void ContainerdRootfsDumpArgs::InternalSwap(ContainerdRootfsDumpArgs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  containerid_.Swap(&other->containerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  imageref_.Swap(&other->imageref_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerdRootfsDumpArgs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContainerdRootfsDumpResp::InitAsDefaultInstance() {
}
class ContainerdRootfsDumpResp::_Internal {
 public:
};

ContainerdRootfsDumpResp::ContainerdRootfsDumpResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.ContainerdRootfsDumpResp)
}
ContainerdRootfsDumpResp::ContainerdRootfsDumpResp(const ContainerdRootfsDumpResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  imageref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imageref().empty()) {
    imageref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_imageref(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.ContainerdRootfsDumpResp)
}

void ContainerdRootfsDumpResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContainerdRootfsDumpResp_task_2eproto.base);
  imageref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ContainerdRootfsDumpResp::~ContainerdRootfsDumpResp() {
  // @@protoc_insertion_point(destructor:cedana.services.task.ContainerdRootfsDumpResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerdRootfsDumpResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  imageref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContainerdRootfsDumpResp::ArenaDtor(void* object) {
  ContainerdRootfsDumpResp* _this = reinterpret_cast< ContainerdRootfsDumpResp* >(object);
  (void)_this;
}
void ContainerdRootfsDumpResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerdRootfsDumpResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerdRootfsDumpResp& ContainerdRootfsDumpResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerdRootfsDumpResp_task_2eproto.base);
  return *internal_default_instance();
}


void ContainerdRootfsDumpResp::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.ContainerdRootfsDumpResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imageref_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerdRootfsDumpResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ImageRef = 1[json_name = "ImageRef"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_imageref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ContainerdRootfsDumpResp.ImageRef"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerdRootfsDumpResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.ContainerdRootfsDumpResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ImageRef = 1[json_name = "ImageRef"];
  if (this->imageref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imageref().data(), static_cast<int>(this->_internal_imageref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ContainerdRootfsDumpResp.ImageRef");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_imageref(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.ContainerdRootfsDumpResp)
  return target;
}

size_t ContainerdRootfsDumpResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.ContainerdRootfsDumpResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ImageRef = 1[json_name = "ImageRef"];
  if (this->imageref().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imageref());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerdRootfsDumpResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.ContainerdRootfsDumpResp)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerdRootfsDumpResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerdRootfsDumpResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.ContainerdRootfsDumpResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.ContainerdRootfsDumpResp)
    MergeFrom(*source);
  }
}

void ContainerdRootfsDumpResp::MergeFrom(const ContainerdRootfsDumpResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.ContainerdRootfsDumpResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.imageref().size() > 0) {
    _internal_set_imageref(from._internal_imageref());
  }
}

void ContainerdRootfsDumpResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.ContainerdRootfsDumpResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerdRootfsDumpResp::CopyFrom(const ContainerdRootfsDumpResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.ContainerdRootfsDumpResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerdRootfsDumpResp::IsInitialized() const {
  return true;
}

void ContainerdRootfsDumpResp::InternalSwap(ContainerdRootfsDumpResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  imageref_.Swap(&other->imageref_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerdRootfsDumpResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContainerdRootfsRestoreArgs::InitAsDefaultInstance() {
}
class ContainerdRootfsRestoreArgs::_Internal {
 public:
};

ContainerdRootfsRestoreArgs::ContainerdRootfsRestoreArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.ContainerdRootfsRestoreArgs)
}
ContainerdRootfsRestoreArgs::ContainerdRootfsRestoreArgs(const ContainerdRootfsRestoreArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  containerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_containerid().empty()) {
    containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_containerid(),
      GetArena());
  }
  imageref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imageref().empty()) {
    imageref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_imageref(),
      GetArena());
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.ContainerdRootfsRestoreArgs)
}

void ContainerdRootfsRestoreArgs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContainerdRootfsRestoreArgs_task_2eproto.base);
  containerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imageref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ContainerdRootfsRestoreArgs::~ContainerdRootfsRestoreArgs() {
  // @@protoc_insertion_point(destructor:cedana.services.task.ContainerdRootfsRestoreArgs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerdRootfsRestoreArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  containerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imageref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContainerdRootfsRestoreArgs::ArenaDtor(void* object) {
  ContainerdRootfsRestoreArgs* _this = reinterpret_cast< ContainerdRootfsRestoreArgs* >(object);
  (void)_this;
}
void ContainerdRootfsRestoreArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerdRootfsRestoreArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerdRootfsRestoreArgs& ContainerdRootfsRestoreArgs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerdRootfsRestoreArgs_task_2eproto.base);
  return *internal_default_instance();
}


void ContainerdRootfsRestoreArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.ContainerdRootfsRestoreArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  containerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  imageref_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerdRootfsRestoreArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ContainerID = 1[json_name = "ContainerID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_containerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ContainerdRootfsRestoreArgs.ContainerID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ImageRef = 2[json_name = "ImageRef"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_imageref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ContainerdRootfsRestoreArgs.ImageRef"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Address = 3[json_name = "Address"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ContainerdRootfsRestoreArgs.Address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Namespace = 4[json_name = "Namespace"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ContainerdRootfsRestoreArgs.Namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerdRootfsRestoreArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.ContainerdRootfsRestoreArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ContainerID = 1[json_name = "ContainerID"];
  if (this->containerid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_containerid().data(), static_cast<int>(this->_internal_containerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ContainerdRootfsRestoreArgs.ContainerID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_containerid(), target);
  }

  // string ImageRef = 2[json_name = "ImageRef"];
  if (this->imageref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imageref().data(), static_cast<int>(this->_internal_imageref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ContainerdRootfsRestoreArgs.ImageRef");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_imageref(), target);
  }

  // string Address = 3[json_name = "Address"];
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ContainerdRootfsRestoreArgs.Address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_address(), target);
  }

  // string Namespace = 4[json_name = "Namespace"];
  if (this->namespace_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ContainerdRootfsRestoreArgs.Namespace");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_namespace_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.ContainerdRootfsRestoreArgs)
  return target;
}

size_t ContainerdRootfsRestoreArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.ContainerdRootfsRestoreArgs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ContainerID = 1[json_name = "ContainerID"];
  if (this->containerid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_containerid());
  }

  // string ImageRef = 2[json_name = "ImageRef"];
  if (this->imageref().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imageref());
  }

  // string Address = 3[json_name = "Address"];
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string Namespace = 4[json_name = "Namespace"];
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerdRootfsRestoreArgs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.ContainerdRootfsRestoreArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerdRootfsRestoreArgs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerdRootfsRestoreArgs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.ContainerdRootfsRestoreArgs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.ContainerdRootfsRestoreArgs)
    MergeFrom(*source);
  }
}

void ContainerdRootfsRestoreArgs::MergeFrom(const ContainerdRootfsRestoreArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.ContainerdRootfsRestoreArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.containerid().size() > 0) {
    _internal_set_containerid(from._internal_containerid());
  }
  if (from.imageref().size() > 0) {
    _internal_set_imageref(from._internal_imageref());
  }
  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.namespace_().size() > 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
}

void ContainerdRootfsRestoreArgs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.ContainerdRootfsRestoreArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerdRootfsRestoreArgs::CopyFrom(const ContainerdRootfsRestoreArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.ContainerdRootfsRestoreArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerdRootfsRestoreArgs::IsInitialized() const {
  return true;
}

void ContainerdRootfsRestoreArgs::InternalSwap(ContainerdRootfsRestoreArgs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  containerid_.Swap(&other->containerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  imageref_.Swap(&other->imageref_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerdRootfsRestoreArgs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContainerdRootfsRestoreResp::InitAsDefaultInstance() {
}
class ContainerdRootfsRestoreResp::_Internal {
 public:
};

ContainerdRootfsRestoreResp::ContainerdRootfsRestoreResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.ContainerdRootfsRestoreResp)
}
ContainerdRootfsRestoreResp::ContainerdRootfsRestoreResp(const ContainerdRootfsRestoreResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  imageref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imageref().empty()) {
    imageref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_imageref(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.ContainerdRootfsRestoreResp)
}

void ContainerdRootfsRestoreResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContainerdRootfsRestoreResp_task_2eproto.base);
  imageref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ContainerdRootfsRestoreResp::~ContainerdRootfsRestoreResp() {
  // @@protoc_insertion_point(destructor:cedana.services.task.ContainerdRootfsRestoreResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerdRootfsRestoreResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  imageref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContainerdRootfsRestoreResp::ArenaDtor(void* object) {
  ContainerdRootfsRestoreResp* _this = reinterpret_cast< ContainerdRootfsRestoreResp* >(object);
  (void)_this;
}
void ContainerdRootfsRestoreResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerdRootfsRestoreResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerdRootfsRestoreResp& ContainerdRootfsRestoreResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerdRootfsRestoreResp_task_2eproto.base);
  return *internal_default_instance();
}


void ContainerdRootfsRestoreResp::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.ContainerdRootfsRestoreResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imageref_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerdRootfsRestoreResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ImageRef = 1[json_name = "ImageRef"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_imageref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ContainerdRootfsRestoreResp.ImageRef"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerdRootfsRestoreResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.ContainerdRootfsRestoreResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ImageRef = 1[json_name = "ImageRef"];
  if (this->imageref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imageref().data(), static_cast<int>(this->_internal_imageref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ContainerdRootfsRestoreResp.ImageRef");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_imageref(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.ContainerdRootfsRestoreResp)
  return target;
}

size_t ContainerdRootfsRestoreResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.ContainerdRootfsRestoreResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ImageRef = 1[json_name = "ImageRef"];
  if (this->imageref().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imageref());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerdRootfsRestoreResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.ContainerdRootfsRestoreResp)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerdRootfsRestoreResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerdRootfsRestoreResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.ContainerdRootfsRestoreResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.ContainerdRootfsRestoreResp)
    MergeFrom(*source);
  }
}

void ContainerdRootfsRestoreResp::MergeFrom(const ContainerdRootfsRestoreResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.ContainerdRootfsRestoreResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.imageref().size() > 0) {
    _internal_set_imageref(from._internal_imageref());
  }
}

void ContainerdRootfsRestoreResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.ContainerdRootfsRestoreResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerdRootfsRestoreResp::CopyFrom(const ContainerdRootfsRestoreResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.ContainerdRootfsRestoreResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerdRootfsRestoreResp::IsInitialized() const {
  return true;
}

void ContainerdRootfsRestoreResp::InternalSwap(ContainerdRootfsRestoreResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  imageref_.Swap(&other->imageref_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerdRootfsRestoreResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RuncDumpArgs::InitAsDefaultInstance() {
  ::cedana::services::task::_RuncDumpArgs_default_instance_._instance.get_mutable()->criuopts_ = const_cast< ::cedana::services::task::CriuOpts*>(
      ::cedana::services::task::CriuOpts::internal_default_instance());
  ::cedana::services::task::_RuncDumpArgs_default_instance_._instance.get_mutable()->state_ = const_cast< ::cedana::services::task::ProcessState*>(
      ::cedana::services::task::ProcessState::internal_default_instance());
}
class RuncDumpArgs::_Internal {
 public:
  static const ::cedana::services::task::CriuOpts& criuopts(const RuncDumpArgs* msg);
  static const ::cedana::services::task::ProcessState& state(const RuncDumpArgs* msg);
};

const ::cedana::services::task::CriuOpts&
RuncDumpArgs::_Internal::criuopts(const RuncDumpArgs* msg) {
  return *msg->criuopts_;
}
const ::cedana::services::task::ProcessState&
RuncDumpArgs::_Internal::state(const RuncDumpArgs* msg) {
  return *msg->state_;
}
RuncDumpArgs::RuncDumpArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.RuncDumpArgs)
}
RuncDumpArgs::RuncDumpArgs(const RuncDumpArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_root().empty()) {
    root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_root(),
      GetArena());
  }
  checkpointpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_checkpointpath().empty()) {
    checkpointpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_checkpointpath(),
      GetArena());
  }
  containerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_containerid().empty()) {
    containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_containerid(),
      GetArena());
  }
  if (from._internal_has_criuopts()) {
    criuopts_ = new ::cedana::services::task::CriuOpts(*from.criuopts_);
  } else {
    criuopts_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::cedana::services::task::ProcessState(*from.state_);
  } else {
    state_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&pid_) -
    reinterpret_cast<char*>(&type_)) + sizeof(pid_));
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.RuncDumpArgs)
}

void RuncDumpArgs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RuncDumpArgs_task_2eproto.base);
  root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checkpointpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  containerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&criuopts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pid_) -
      reinterpret_cast<char*>(&criuopts_)) + sizeof(pid_));
}

RuncDumpArgs::~RuncDumpArgs() {
  // @@protoc_insertion_point(destructor:cedana.services.task.RuncDumpArgs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RuncDumpArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checkpointpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  containerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete criuopts_;
  if (this != internal_default_instance()) delete state_;
}

void RuncDumpArgs::ArenaDtor(void* object) {
  RuncDumpArgs* _this = reinterpret_cast< RuncDumpArgs* >(object);
  (void)_this;
}
void RuncDumpArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuncDumpArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuncDumpArgs& RuncDumpArgs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RuncDumpArgs_task_2eproto.base);
  return *internal_default_instance();
}


void RuncDumpArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.RuncDumpArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  checkpointpath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  containerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && criuopts_ != nullptr) {
    delete criuopts_;
  }
  criuopts_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pid_) -
      reinterpret_cast<char*>(&type_)) + sizeof(pid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuncDumpArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Root = 1[json_name = "Root"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RuncDumpArgs.Root"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string CheckpointPath = 2[json_name = "CheckpointPath"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_checkpointpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RuncDumpArgs.CheckpointPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ContainerID = 3[json_name = "ContainerID"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_containerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RuncDumpArgs.ContainerID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedana.services.task.CriuOpts CriuOpts = 4[json_name = "CriuOpts"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_criuopts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedana.services.task.CRType Type = 5[json_name = "Type"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::cedana::services::task::CRType>(val));
        } else goto handle_unusual;
        continue;
      // .cedana.services.task.ProcessState state = 6[json_name = "state"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool GPU = 7[json_name = "GPU"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          gpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pid = 8[json_name = "pid"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuncDumpArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.RuncDumpArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Root = 1[json_name = "Root"];
  if (this->root().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_root().data(), static_cast<int>(this->_internal_root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RuncDumpArgs.Root");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_root(), target);
  }

  // string CheckpointPath = 2[json_name = "CheckpointPath"];
  if (this->checkpointpath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_checkpointpath().data(), static_cast<int>(this->_internal_checkpointpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RuncDumpArgs.CheckpointPath");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_checkpointpath(), target);
  }

  // string ContainerID = 3[json_name = "ContainerID"];
  if (this->containerid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_containerid().data(), static_cast<int>(this->_internal_containerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RuncDumpArgs.ContainerID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_containerid(), target);
  }

  // .cedana.services.task.CriuOpts CriuOpts = 4[json_name = "CriuOpts"];
  if (this->has_criuopts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::criuopts(this), target, stream);
  }

  // .cedana.services.task.CRType Type = 5[json_name = "Type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  // .cedana.services.task.ProcessState state = 6[json_name = "state"];
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::state(this), target, stream);
  }

  // bool GPU = 7[json_name = "GPU"];
  if (this->gpu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_gpu(), target);
  }

  // int32 pid = 8[json_name = "pid"];
  if (this->pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.RuncDumpArgs)
  return target;
}

size_t RuncDumpArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.RuncDumpArgs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Root = 1[json_name = "Root"];
  if (this->root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_root());
  }

  // string CheckpointPath = 2[json_name = "CheckpointPath"];
  if (this->checkpointpath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_checkpointpath());
  }

  // string ContainerID = 3[json_name = "ContainerID"];
  if (this->containerid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_containerid());
  }

  // .cedana.services.task.CriuOpts CriuOpts = 4[json_name = "CriuOpts"];
  if (this->has_criuopts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *criuopts_);
  }

  // .cedana.services.task.ProcessState state = 6[json_name = "state"];
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .cedana.services.task.CRType Type = 5[json_name = "Type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool GPU = 7[json_name = "GPU"];
  if (this->gpu() != 0) {
    total_size += 1 + 1;
  }

  // int32 pid = 8[json_name = "pid"];
  if (this->pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuncDumpArgs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.RuncDumpArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const RuncDumpArgs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RuncDumpArgs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.RuncDumpArgs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.RuncDumpArgs)
    MergeFrom(*source);
  }
}

void RuncDumpArgs::MergeFrom(const RuncDumpArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.RuncDumpArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.root().size() > 0) {
    _internal_set_root(from._internal_root());
  }
  if (from.checkpointpath().size() > 0) {
    _internal_set_checkpointpath(from._internal_checkpointpath());
  }
  if (from.containerid().size() > 0) {
    _internal_set_containerid(from._internal_containerid());
  }
  if (from.has_criuopts()) {
    _internal_mutable_criuopts()->::cedana::services::task::CriuOpts::MergeFrom(from._internal_criuopts());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::cedana::services::task::ProcessState::MergeFrom(from._internal_state());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.gpu() != 0) {
    _internal_set_gpu(from._internal_gpu());
  }
  if (from.pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
}

void RuncDumpArgs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.RuncDumpArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuncDumpArgs::CopyFrom(const RuncDumpArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.RuncDumpArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuncDumpArgs::IsInitialized() const {
  return true;
}

void RuncDumpArgs::InternalSwap(RuncDumpArgs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  root_.Swap(&other->root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  checkpointpath_.Swap(&other->checkpointpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  containerid_.Swap(&other->containerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RuncDumpArgs, pid_)
      + sizeof(RuncDumpArgs::pid_)
      - PROTOBUF_FIELD_OFFSET(RuncDumpArgs, criuopts_)>(
          reinterpret_cast<char*>(&criuopts_),
          reinterpret_cast<char*>(&other->criuopts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RuncDumpArgs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RuncDumpResp::InitAsDefaultInstance() {
  ::cedana::services::task::_RuncDumpResp_default_instance_._instance.get_mutable()->state_ = const_cast< ::cedana::services::task::ProcessState*>(
      ::cedana::services::task::ProcessState::internal_default_instance());
  ::cedana::services::task::_RuncDumpResp_default_instance_._instance.get_mutable()->dumpstats_ = const_cast< ::cedana::services::task::DumpStats*>(
      ::cedana::services::task::DumpStats::internal_default_instance());
}
class RuncDumpResp::_Internal {
 public:
  static const ::cedana::services::task::ProcessState& state(const RuncDumpResp* msg);
  static const ::cedana::services::task::DumpStats& dumpstats(const RuncDumpResp* msg);
};

const ::cedana::services::task::ProcessState&
RuncDumpResp::_Internal::state(const RuncDumpResp* msg) {
  return *msg->state_;
}
const ::cedana::services::task::DumpStats&
RuncDumpResp::_Internal::dumpstats(const RuncDumpResp* msg) {
  return *msg->dumpstats_;
}
RuncDumpResp::RuncDumpResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.RuncDumpResp)
}
RuncDumpResp::RuncDumpResp(const RuncDumpResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  checkpointid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_checkpointid().empty()) {
    checkpointid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_checkpointid(),
      GetArena());
  }
  uploadid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uploadid().empty()) {
    uploadid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uploadid(),
      GetArena());
  }
  if (from._internal_has_state()) {
    state_ = new ::cedana::services::task::ProcessState(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from._internal_has_dumpstats()) {
    dumpstats_ = new ::cedana::services::task::DumpStats(*from.dumpstats_);
  } else {
    dumpstats_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.RuncDumpResp)
}

void RuncDumpResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RuncDumpResp_task_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checkpointid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uploadid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dumpstats_) -
      reinterpret_cast<char*>(&state_)) + sizeof(dumpstats_));
}

RuncDumpResp::~RuncDumpResp() {
  // @@protoc_insertion_point(destructor:cedana.services.task.RuncDumpResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RuncDumpResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checkpointid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uploadid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete dumpstats_;
}

void RuncDumpResp::ArenaDtor(void* object) {
  RuncDumpResp* _this = reinterpret_cast< RuncDumpResp* >(object);
  (void)_this;
}
void RuncDumpResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuncDumpResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuncDumpResp& RuncDumpResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RuncDumpResp_task_2eproto.base);
  return *internal_default_instance();
}


void RuncDumpResp::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.RuncDumpResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  checkpointid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uploadid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  if (GetArena() == nullptr && dumpstats_ != nullptr) {
    delete dumpstats_;
  }
  dumpstats_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuncDumpResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Message = 1[json_name = "Message"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RuncDumpResp.Message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string CheckpointID = 2[json_name = "CheckpointID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_checkpointid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RuncDumpResp.CheckpointID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string UploadID = 3[json_name = "UploadID"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_uploadid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RuncDumpResp.UploadID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedana.services.task.ProcessState State = 4[json_name = "State"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedana.services.task.DumpStats DumpStats = 5[json_name = "DumpStats"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_dumpstats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuncDumpResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.RuncDumpResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Message = 1[json_name = "Message"];
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RuncDumpResp.Message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // string CheckpointID = 2[json_name = "CheckpointID"];
  if (this->checkpointid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_checkpointid().data(), static_cast<int>(this->_internal_checkpointid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RuncDumpResp.CheckpointID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_checkpointid(), target);
  }

  // string UploadID = 3[json_name = "UploadID"];
  if (this->uploadid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uploadid().data(), static_cast<int>(this->_internal_uploadid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RuncDumpResp.UploadID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_uploadid(), target);
  }

  // .cedana.services.task.ProcessState State = 4[json_name = "State"];
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::state(this), target, stream);
  }

  // .cedana.services.task.DumpStats DumpStats = 5[json_name = "DumpStats"];
  if (this->has_dumpstats()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::dumpstats(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.RuncDumpResp)
  return target;
}

size_t RuncDumpResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.RuncDumpResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Message = 1[json_name = "Message"];
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string CheckpointID = 2[json_name = "CheckpointID"];
  if (this->checkpointid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_checkpointid());
  }

  // string UploadID = 3[json_name = "UploadID"];
  if (this->uploadid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uploadid());
  }

  // .cedana.services.task.ProcessState State = 4[json_name = "State"];
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .cedana.services.task.DumpStats DumpStats = 5[json_name = "DumpStats"];
  if (this->has_dumpstats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dumpstats_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuncDumpResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.RuncDumpResp)
  GOOGLE_DCHECK_NE(&from, this);
  const RuncDumpResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RuncDumpResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.RuncDumpResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.RuncDumpResp)
    MergeFrom(*source);
  }
}

void RuncDumpResp::MergeFrom(const RuncDumpResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.RuncDumpResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.checkpointid().size() > 0) {
    _internal_set_checkpointid(from._internal_checkpointid());
  }
  if (from.uploadid().size() > 0) {
    _internal_set_uploadid(from._internal_uploadid());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::cedana::services::task::ProcessState::MergeFrom(from._internal_state());
  }
  if (from.has_dumpstats()) {
    _internal_mutable_dumpstats()->::cedana::services::task::DumpStats::MergeFrom(from._internal_dumpstats());
  }
}

void RuncDumpResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.RuncDumpResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuncDumpResp::CopyFrom(const RuncDumpResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.RuncDumpResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuncDumpResp::IsInitialized() const {
  return true;
}

void RuncDumpResp::InternalSwap(RuncDumpResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  checkpointid_.Swap(&other->checkpointid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uploadid_.Swap(&other->uploadid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RuncDumpResp, dumpstats_)
      + sizeof(RuncDumpResp::dumpstats_)
      - PROTOBUF_FIELD_OFFSET(RuncDumpResp, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RuncDumpResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CriuOpts::InitAsDefaultInstance() {
}
class CriuOpts::_Internal {
 public:
};

CriuOpts::CriuOpts(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  external_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.CriuOpts)
}
CriuOpts::CriuOpts(const CriuOpts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      external_(from.external_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  imagesdirectory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imagesdirectory().empty()) {
    imagesdirectory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_imagesdirectory(),
      GetArena());
  }
  workdirectory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_workdirectory().empty()) {
    workdirectory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_workdirectory(),
      GetArena());
  }
  parentimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parentimage().empty()) {
    parentimage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_parentimage(),
      GetArena());
  }
  lsmprofile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lsmprofile().empty()) {
    lsmprofile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_lsmprofile(),
      GetArena());
  }
  lsmmountcontext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lsmmountcontext().empty()) {
    lsmmountcontext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_lsmmountcontext(),
      GetArena());
  }
  ::memcpy(&leaverunning_, &from.leaverunning_,
    static_cast<size_t>(reinterpret_cast<char*>(&statusfd_) -
    reinterpret_cast<char*>(&leaverunning_)) + sizeof(statusfd_));
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.CriuOpts)
}

void CriuOpts::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CriuOpts_task_2eproto.base);
  imagesdirectory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  workdirectory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parentimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lsmprofile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lsmmountcontext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&leaverunning_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statusfd_) -
      reinterpret_cast<char*>(&leaverunning_)) + sizeof(statusfd_));
}

CriuOpts::~CriuOpts() {
  // @@protoc_insertion_point(destructor:cedana.services.task.CriuOpts)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CriuOpts::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  imagesdirectory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  workdirectory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parentimage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lsmprofile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lsmmountcontext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CriuOpts::ArenaDtor(void* object) {
  CriuOpts* _this = reinterpret_cast< CriuOpts* >(object);
  (void)_this;
}
void CriuOpts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CriuOpts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CriuOpts& CriuOpts::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CriuOpts_task_2eproto.base);
  return *internal_default_instance();
}


void CriuOpts::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.CriuOpts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  external_.Clear();
  imagesdirectory_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  workdirectory_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  parentimage_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lsmprofile_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lsmmountcontext_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&leaverunning_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statusfd_) -
      reinterpret_cast<char*>(&leaverunning_)) + sizeof(statusfd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CriuOpts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ImagesDirectory = 1[json_name = "ImagesDirectory"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_imagesdirectory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.CriuOpts.ImagesDirectory"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string WorkDirectory = 2[json_name = "WorkDirectory"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_workdirectory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.CriuOpts.WorkDirectory"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ParentImage = 3[json_name = "ParentImage"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_parentimage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.CriuOpts.ParentImage"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool LeaveRunning = 4[json_name = "LeaveRunning"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          leaverunning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool TcpEstablished = 5[json_name = "TcpEstablished"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          tcpestablished_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ExternalUnixConnections = 6[json_name = "ExternalUnixConnections"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          externalunixconnections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ShellJob = 7[json_name = "ShellJob"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          shelljob_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool FileLocks = 8[json_name = "FileLocks"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          filelocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool PreDump = 9[json_name = "PreDump"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          predump_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Stream = 10[json_name = "Stream"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 EmptyNs = 12[json_name = "EmptyNs"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          emptyns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool AutoDedup = 13[json_name = "AutoDedup"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          autodedup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool LazyPages = 14[json_name = "LazyPages"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          lazypages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 StatusFd = 15[json_name = "StatusFd"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          statusfd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string LsmProfile = 16[json_name = "LsmProfile"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_lsmprofile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.CriuOpts.LsmProfile"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string LsmMountContext = 17[json_name = "LsmMountContext"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_lsmmountcontext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.CriuOpts.LsmMountContext"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string External = 18[json_name = "External"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_external();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.CriuOpts.External"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CriuOpts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.CriuOpts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ImagesDirectory = 1[json_name = "ImagesDirectory"];
  if (this->imagesdirectory().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imagesdirectory().data(), static_cast<int>(this->_internal_imagesdirectory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.CriuOpts.ImagesDirectory");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_imagesdirectory(), target);
  }

  // string WorkDirectory = 2[json_name = "WorkDirectory"];
  if (this->workdirectory().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workdirectory().data(), static_cast<int>(this->_internal_workdirectory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.CriuOpts.WorkDirectory");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workdirectory(), target);
  }

  // string ParentImage = 3[json_name = "ParentImage"];
  if (this->parentimage().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parentimage().data(), static_cast<int>(this->_internal_parentimage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.CriuOpts.ParentImage");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_parentimage(), target);
  }

  // bool LeaveRunning = 4[json_name = "LeaveRunning"];
  if (this->leaverunning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_leaverunning(), target);
  }

  // bool TcpEstablished = 5[json_name = "TcpEstablished"];
  if (this->tcpestablished() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_tcpestablished(), target);
  }

  // bool ExternalUnixConnections = 6[json_name = "ExternalUnixConnections"];
  if (this->externalunixconnections() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_externalunixconnections(), target);
  }

  // bool ShellJob = 7[json_name = "ShellJob"];
  if (this->shelljob() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_shelljob(), target);
  }

  // bool FileLocks = 8[json_name = "FileLocks"];
  if (this->filelocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_filelocks(), target);
  }

  // bool PreDump = 9[json_name = "PreDump"];
  if (this->predump() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_predump(), target);
  }

  // bool Stream = 10[json_name = "Stream"];
  if (this->stream() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_stream(), target);
  }

  // int32 EmptyNs = 12[json_name = "EmptyNs"];
  if (this->emptyns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_emptyns(), target);
  }

  // bool AutoDedup = 13[json_name = "AutoDedup"];
  if (this->autodedup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_autodedup(), target);
  }

  // bool LazyPages = 14[json_name = "LazyPages"];
  if (this->lazypages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_lazypages(), target);
  }

  // int32 StatusFd = 15[json_name = "StatusFd"];
  if (this->statusfd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_statusfd(), target);
  }

  // string LsmProfile = 16[json_name = "LsmProfile"];
  if (this->lsmprofile().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lsmprofile().data(), static_cast<int>(this->_internal_lsmprofile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.CriuOpts.LsmProfile");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_lsmprofile(), target);
  }

  // string LsmMountContext = 17[json_name = "LsmMountContext"];
  if (this->lsmmountcontext().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lsmmountcontext().data(), static_cast<int>(this->_internal_lsmmountcontext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.CriuOpts.LsmMountContext");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_lsmmountcontext(), target);
  }

  // repeated string External = 18[json_name = "External"];
  for (int i = 0, n = this->_internal_external_size(); i < n; i++) {
    const auto& s = this->_internal_external(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.CriuOpts.External");
    target = stream->WriteString(18, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.CriuOpts)
  return target;
}

size_t CriuOpts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.CriuOpts)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string External = 18[json_name = "External"];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(external_.size());
  for (int i = 0, n = external_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      external_.Get(i));
  }

  // string ImagesDirectory = 1[json_name = "ImagesDirectory"];
  if (this->imagesdirectory().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imagesdirectory());
  }

  // string WorkDirectory = 2[json_name = "WorkDirectory"];
  if (this->workdirectory().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workdirectory());
  }

  // string ParentImage = 3[json_name = "ParentImage"];
  if (this->parentimage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parentimage());
  }

  // string LsmProfile = 16[json_name = "LsmProfile"];
  if (this->lsmprofile().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lsmprofile());
  }

  // string LsmMountContext = 17[json_name = "LsmMountContext"];
  if (this->lsmmountcontext().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lsmmountcontext());
  }

  // bool LeaveRunning = 4[json_name = "LeaveRunning"];
  if (this->leaverunning() != 0) {
    total_size += 1 + 1;
  }

  // bool TcpEstablished = 5[json_name = "TcpEstablished"];
  if (this->tcpestablished() != 0) {
    total_size += 1 + 1;
  }

  // bool ExternalUnixConnections = 6[json_name = "ExternalUnixConnections"];
  if (this->externalunixconnections() != 0) {
    total_size += 1 + 1;
  }

  // bool ShellJob = 7[json_name = "ShellJob"];
  if (this->shelljob() != 0) {
    total_size += 1 + 1;
  }

  // bool FileLocks = 8[json_name = "FileLocks"];
  if (this->filelocks() != 0) {
    total_size += 1 + 1;
  }

  // bool PreDump = 9[json_name = "PreDump"];
  if (this->predump() != 0) {
    total_size += 1 + 1;
  }

  // bool Stream = 10[json_name = "Stream"];
  if (this->stream() != 0) {
    total_size += 1 + 1;
  }

  // bool AutoDedup = 13[json_name = "AutoDedup"];
  if (this->autodedup() != 0) {
    total_size += 1 + 1;
  }

  // int32 EmptyNs = 12[json_name = "EmptyNs"];
  if (this->emptyns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_emptyns());
  }

  // bool LazyPages = 14[json_name = "LazyPages"];
  if (this->lazypages() != 0) {
    total_size += 1 + 1;
  }

  // int32 StatusFd = 15[json_name = "StatusFd"];
  if (this->statusfd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_statusfd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CriuOpts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.CriuOpts)
  GOOGLE_DCHECK_NE(&from, this);
  const CriuOpts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CriuOpts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.CriuOpts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.CriuOpts)
    MergeFrom(*source);
  }
}

void CriuOpts::MergeFrom(const CriuOpts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.CriuOpts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  external_.MergeFrom(from.external_);
  if (from.imagesdirectory().size() > 0) {
    _internal_set_imagesdirectory(from._internal_imagesdirectory());
  }
  if (from.workdirectory().size() > 0) {
    _internal_set_workdirectory(from._internal_workdirectory());
  }
  if (from.parentimage().size() > 0) {
    _internal_set_parentimage(from._internal_parentimage());
  }
  if (from.lsmprofile().size() > 0) {
    _internal_set_lsmprofile(from._internal_lsmprofile());
  }
  if (from.lsmmountcontext().size() > 0) {
    _internal_set_lsmmountcontext(from._internal_lsmmountcontext());
  }
  if (from.leaverunning() != 0) {
    _internal_set_leaverunning(from._internal_leaverunning());
  }
  if (from.tcpestablished() != 0) {
    _internal_set_tcpestablished(from._internal_tcpestablished());
  }
  if (from.externalunixconnections() != 0) {
    _internal_set_externalunixconnections(from._internal_externalunixconnections());
  }
  if (from.shelljob() != 0) {
    _internal_set_shelljob(from._internal_shelljob());
  }
  if (from.filelocks() != 0) {
    _internal_set_filelocks(from._internal_filelocks());
  }
  if (from.predump() != 0) {
    _internal_set_predump(from._internal_predump());
  }
  if (from.stream() != 0) {
    _internal_set_stream(from._internal_stream());
  }
  if (from.autodedup() != 0) {
    _internal_set_autodedup(from._internal_autodedup());
  }
  if (from.emptyns() != 0) {
    _internal_set_emptyns(from._internal_emptyns());
  }
  if (from.lazypages() != 0) {
    _internal_set_lazypages(from._internal_lazypages());
  }
  if (from.statusfd() != 0) {
    _internal_set_statusfd(from._internal_statusfd());
  }
}

void CriuOpts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.CriuOpts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CriuOpts::CopyFrom(const CriuOpts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.CriuOpts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CriuOpts::IsInitialized() const {
  return true;
}

void CriuOpts::InternalSwap(CriuOpts* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  external_.InternalSwap(&other->external_);
  imagesdirectory_.Swap(&other->imagesdirectory_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  workdirectory_.Swap(&other->workdirectory_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  parentimage_.Swap(&other->parentimage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lsmprofile_.Swap(&other->lsmprofile_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lsmmountcontext_.Swap(&other->lsmmountcontext_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CriuOpts, statusfd_)
      + sizeof(CriuOpts::statusfd_)
      - PROTOBUF_FIELD_OFFSET(CriuOpts, leaverunning_)>(
          reinterpret_cast<char*>(&leaverunning_),
          reinterpret_cast<char*>(&other->leaverunning_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CriuOpts::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RuncRestoreArgs::InitAsDefaultInstance() {
  ::cedana::services::task::_RuncRestoreArgs_default_instance_._instance.get_mutable()->opts_ = const_cast< ::cedana::services::task::RuncOpts*>(
      ::cedana::services::task::RuncOpts::internal_default_instance());
  ::cedana::services::task::_RuncRestoreArgs_default_instance_._instance.get_mutable()->criuopts_ = const_cast< ::cedana::services::task::CriuOpts*>(
      ::cedana::services::task::CriuOpts::internal_default_instance());
}
class RuncRestoreArgs::_Internal {
 public:
  static const ::cedana::services::task::RuncOpts& opts(const RuncRestoreArgs* msg);
  static const ::cedana::services::task::CriuOpts& criuopts(const RuncRestoreArgs* msg);
};

const ::cedana::services::task::RuncOpts&
RuncRestoreArgs::_Internal::opts(const RuncRestoreArgs* msg) {
  return *msg->opts_;
}
const ::cedana::services::task::CriuOpts&
RuncRestoreArgs::_Internal::criuopts(const RuncRestoreArgs* msg) {
  return *msg->criuopts_;
}
RuncRestoreArgs::RuncRestoreArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.RuncRestoreArgs)
}
RuncRestoreArgs::RuncRestoreArgs(const RuncRestoreArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  containerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_containerid().empty()) {
    containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_containerid(),
      GetArena());
  }
  imagepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imagepath().empty()) {
    imagepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_imagepath(),
      GetArena());
  }
  checkpointid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_checkpointid().empty()) {
    checkpointid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_checkpointid(),
      GetArena());
  }
  if (from._internal_has_opts()) {
    opts_ = new ::cedana::services::task::RuncOpts(*from.opts_);
  } else {
    opts_ = nullptr;
  }
  if (from._internal_has_criuopts()) {
    criuopts_ = new ::cedana::services::task::CriuOpts(*from.criuopts_);
  } else {
    criuopts_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.RuncRestoreArgs)
}

void RuncRestoreArgs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RuncRestoreArgs_task_2eproto.base);
  containerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imagepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checkpointid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&opts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&opts_)) + sizeof(type_));
}

RuncRestoreArgs::~RuncRestoreArgs() {
  // @@protoc_insertion_point(destructor:cedana.services.task.RuncRestoreArgs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RuncRestoreArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  containerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imagepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checkpointid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete opts_;
  if (this != internal_default_instance()) delete criuopts_;
}

void RuncRestoreArgs::ArenaDtor(void* object) {
  RuncRestoreArgs* _this = reinterpret_cast< RuncRestoreArgs* >(object);
  (void)_this;
}
void RuncRestoreArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuncRestoreArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuncRestoreArgs& RuncRestoreArgs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RuncRestoreArgs_task_2eproto.base);
  return *internal_default_instance();
}


void RuncRestoreArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.RuncRestoreArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  containerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  imagepath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  checkpointid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && opts_ != nullptr) {
    delete opts_;
  }
  opts_ = nullptr;
  if (GetArena() == nullptr && criuopts_ != nullptr) {
    delete criuopts_;
  }
  criuopts_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuncRestoreArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ContainerID = 1[json_name = "ContainerID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_containerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RuncRestoreArgs.ContainerID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ImagePath = 2[json_name = "ImagePath"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_imagepath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RuncRestoreArgs.ImagePath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedana.services.task.RuncOpts Opts = 3[json_name = "Opts"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_opts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedana.services.task.CRType Type = 4[json_name = "Type"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::cedana::services::task::CRType>(val));
        } else goto handle_unusual;
        continue;
      // string CheckpointID = 5[json_name = "CheckpointID"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_checkpointid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RuncRestoreArgs.CheckpointID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedana.services.task.CriuOpts CriuOpts = 6[json_name = "CriuOpts"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_criuopts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuncRestoreArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.RuncRestoreArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ContainerID = 1[json_name = "ContainerID"];
  if (this->containerid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_containerid().data(), static_cast<int>(this->_internal_containerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RuncRestoreArgs.ContainerID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_containerid(), target);
  }

  // string ImagePath = 2[json_name = "ImagePath"];
  if (this->imagepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imagepath().data(), static_cast<int>(this->_internal_imagepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RuncRestoreArgs.ImagePath");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_imagepath(), target);
  }

  // .cedana.services.task.RuncOpts Opts = 3[json_name = "Opts"];
  if (this->has_opts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::opts(this), target, stream);
  }

  // .cedana.services.task.CRType Type = 4[json_name = "Type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // string CheckpointID = 5[json_name = "CheckpointID"];
  if (this->checkpointid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_checkpointid().data(), static_cast<int>(this->_internal_checkpointid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RuncRestoreArgs.CheckpointID");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_checkpointid(), target);
  }

  // .cedana.services.task.CriuOpts CriuOpts = 6[json_name = "CriuOpts"];
  if (this->has_criuopts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::criuopts(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.RuncRestoreArgs)
  return target;
}

size_t RuncRestoreArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.RuncRestoreArgs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ContainerID = 1[json_name = "ContainerID"];
  if (this->containerid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_containerid());
  }

  // string ImagePath = 2[json_name = "ImagePath"];
  if (this->imagepath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imagepath());
  }

  // string CheckpointID = 5[json_name = "CheckpointID"];
  if (this->checkpointid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_checkpointid());
  }

  // .cedana.services.task.RuncOpts Opts = 3[json_name = "Opts"];
  if (this->has_opts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *opts_);
  }

  // .cedana.services.task.CriuOpts CriuOpts = 6[json_name = "CriuOpts"];
  if (this->has_criuopts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *criuopts_);
  }

  // .cedana.services.task.CRType Type = 4[json_name = "Type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuncRestoreArgs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.RuncRestoreArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const RuncRestoreArgs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RuncRestoreArgs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.RuncRestoreArgs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.RuncRestoreArgs)
    MergeFrom(*source);
  }
}

void RuncRestoreArgs::MergeFrom(const RuncRestoreArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.RuncRestoreArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.containerid().size() > 0) {
    _internal_set_containerid(from._internal_containerid());
  }
  if (from.imagepath().size() > 0) {
    _internal_set_imagepath(from._internal_imagepath());
  }
  if (from.checkpointid().size() > 0) {
    _internal_set_checkpointid(from._internal_checkpointid());
  }
  if (from.has_opts()) {
    _internal_mutable_opts()->::cedana::services::task::RuncOpts::MergeFrom(from._internal_opts());
  }
  if (from.has_criuopts()) {
    _internal_mutable_criuopts()->::cedana::services::task::CriuOpts::MergeFrom(from._internal_criuopts());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void RuncRestoreArgs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.RuncRestoreArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuncRestoreArgs::CopyFrom(const RuncRestoreArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.RuncRestoreArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuncRestoreArgs::IsInitialized() const {
  return true;
}

void RuncRestoreArgs::InternalSwap(RuncRestoreArgs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  containerid_.Swap(&other->containerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  imagepath_.Swap(&other->imagepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  checkpointid_.Swap(&other->checkpointid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RuncRestoreArgs, type_)
      + sizeof(RuncRestoreArgs::type_)
      - PROTOBUF_FIELD_OFFSET(RuncRestoreArgs, opts_)>(
          reinterpret_cast<char*>(&opts_),
          reinterpret_cast<char*>(&other->opts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RuncRestoreArgs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RuncRestoreResp::InitAsDefaultInstance() {
  ::cedana::services::task::_RuncRestoreResp_default_instance_._instance.get_mutable()->state_ = const_cast< ::cedana::services::task::ProcessState*>(
      ::cedana::services::task::ProcessState::internal_default_instance());
  ::cedana::services::task::_RuncRestoreResp_default_instance_._instance.get_mutable()->restorestats_ = const_cast< ::cedana::services::task::RestoreStats*>(
      ::cedana::services::task::RestoreStats::internal_default_instance());
}
class RuncRestoreResp::_Internal {
 public:
  static const ::cedana::services::task::ProcessState& state(const RuncRestoreResp* msg);
  static const ::cedana::services::task::RestoreStats& restorestats(const RuncRestoreResp* msg);
};

const ::cedana::services::task::ProcessState&
RuncRestoreResp::_Internal::state(const RuncRestoreResp* msg) {
  return *msg->state_;
}
const ::cedana::services::task::RestoreStats&
RuncRestoreResp::_Internal::restorestats(const RuncRestoreResp* msg) {
  return *msg->restorestats_;
}
RuncRestoreResp::RuncRestoreResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.RuncRestoreResp)
}
RuncRestoreResp::RuncRestoreResp(const RuncRestoreResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  if (from._internal_has_state()) {
    state_ = new ::cedana::services::task::ProcessState(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from._internal_has_restorestats()) {
    restorestats_ = new ::cedana::services::task::RestoreStats(*from.restorestats_);
  } else {
    restorestats_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.RuncRestoreResp)
}

void RuncRestoreResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RuncRestoreResp_task_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&restorestats_) -
      reinterpret_cast<char*>(&state_)) + sizeof(restorestats_));
}

RuncRestoreResp::~RuncRestoreResp() {
  // @@protoc_insertion_point(destructor:cedana.services.task.RuncRestoreResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RuncRestoreResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete restorestats_;
}

void RuncRestoreResp::ArenaDtor(void* object) {
  RuncRestoreResp* _this = reinterpret_cast< RuncRestoreResp* >(object);
  (void)_this;
}
void RuncRestoreResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuncRestoreResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuncRestoreResp& RuncRestoreResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RuncRestoreResp_task_2eproto.base);
  return *internal_default_instance();
}


void RuncRestoreResp::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.RuncRestoreResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  if (GetArena() == nullptr && restorestats_ != nullptr) {
    delete restorestats_;
  }
  restorestats_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuncRestoreResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Message = 1[json_name = "Message"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RuncRestoreResp.Message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedana.services.task.ProcessState State = 2[json_name = "State"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedana.services.task.RestoreStats RestoreStats = 3[json_name = "RestoreStats"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_restorestats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuncRestoreResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.RuncRestoreResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Message = 1[json_name = "Message"];
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RuncRestoreResp.Message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // .cedana.services.task.ProcessState State = 2[json_name = "State"];
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  // .cedana.services.task.RestoreStats RestoreStats = 3[json_name = "RestoreStats"];
  if (this->has_restorestats()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::restorestats(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.RuncRestoreResp)
  return target;
}

size_t RuncRestoreResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.RuncRestoreResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Message = 1[json_name = "Message"];
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .cedana.services.task.ProcessState State = 2[json_name = "State"];
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .cedana.services.task.RestoreStats RestoreStats = 3[json_name = "RestoreStats"];
  if (this->has_restorestats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *restorestats_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuncRestoreResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.RuncRestoreResp)
  GOOGLE_DCHECK_NE(&from, this);
  const RuncRestoreResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RuncRestoreResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.RuncRestoreResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.RuncRestoreResp)
    MergeFrom(*source);
  }
}

void RuncRestoreResp::MergeFrom(const RuncRestoreResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.RuncRestoreResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::cedana::services::task::ProcessState::MergeFrom(from._internal_state());
  }
  if (from.has_restorestats()) {
    _internal_mutable_restorestats()->::cedana::services::task::RestoreStats::MergeFrom(from._internal_restorestats());
  }
}

void RuncRestoreResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.RuncRestoreResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuncRestoreResp::CopyFrom(const RuncRestoreResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.RuncRestoreResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuncRestoreResp::IsInitialized() const {
  return true;
}

void RuncRestoreResp::InternalSwap(RuncRestoreResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RuncRestoreResp, restorestats_)
      + sizeof(RuncRestoreResp::restorestats_)
      - PROTOBUF_FIELD_OFFSET(RuncRestoreResp, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RuncRestoreResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RuncOpts::InitAsDefaultInstance() {
}
class RuncOpts::_Internal {
 public:
};

RuncOpts::RuncOpts(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.RuncOpts)
}
RuncOpts::RuncOpts(const RuncOpts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_root().empty()) {
    root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_root(),
      GetArena());
  }
  containerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_containerid().empty()) {
    containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_containerid(),
      GetArena());
  }
  bundle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bundle().empty()) {
    bundle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bundle(),
      GetArena());
  }
  rootless_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rootless().empty()) {
    rootless_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rootless(),
      GetArena());
  }
  consolesocket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_consolesocket().empty()) {
    consolesocket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_consolesocket(),
      GetArena());
  }
  pidfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pidfile().empty()) {
    pidfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pidfile(),
      GetArena());
  }
  ::memcpy(&systemdcgroup_, &from.systemdcgroup_,
    static_cast<size_t>(reinterpret_cast<char*>(&netpid_) -
    reinterpret_cast<char*>(&systemdcgroup_)) + sizeof(netpid_));
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.RuncOpts)
}

void RuncOpts::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RuncOpts_task_2eproto.base);
  root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  containerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bundle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rootless_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  consolesocket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pidfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&systemdcgroup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&netpid_) -
      reinterpret_cast<char*>(&systemdcgroup_)) + sizeof(netpid_));
}

RuncOpts::~RuncOpts() {
  // @@protoc_insertion_point(destructor:cedana.services.task.RuncOpts)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RuncOpts::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  containerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bundle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rootless_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  consolesocket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pidfile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RuncOpts::ArenaDtor(void* object) {
  RuncOpts* _this = reinterpret_cast< RuncOpts* >(object);
  (void)_this;
}
void RuncOpts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuncOpts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuncOpts& RuncOpts::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RuncOpts_task_2eproto.base);
  return *internal_default_instance();
}


void RuncOpts::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.RuncOpts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  containerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bundle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rootless_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  consolesocket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pidfile_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&systemdcgroup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&netpid_) -
      reinterpret_cast<char*>(&systemdcgroup_)) + sizeof(netpid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuncOpts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Root = 1[json_name = "Root"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RuncOpts.Root"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ContainerID = 2[json_name = "ContainerID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_containerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RuncOpts.ContainerID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Bundle = 3[json_name = "Bundle"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_bundle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RuncOpts.Bundle"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool SystemdCgroup = 4[json_name = "SystemdCgroup"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          systemdcgroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool NoPivot = 5[json_name = "NoPivot"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          nopivot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool NoMountFallback = 6[json_name = "NoMountFallback"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          nomountfallback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool NoNewKeyring = 7[json_name = "NoNewKeyring"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          nonewkeyring_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Rootless = 8[json_name = "Rootless"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_rootless();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RuncOpts.Rootless"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool NoSubreaper = 9[json_name = "NoSubreaper"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          nosubreaper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Keep = 10[json_name = "Keep"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          keep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ConsoleSocket = 11[json_name = "ConsoleSocket"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_consolesocket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RuncOpts.ConsoleSocket"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Detach = 12[json_name = "Detach"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          detach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string PidFile = 13[json_name = "PidFile"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_pidfile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RuncOpts.PidFile"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PreserveFds = 14[json_name = "PreserveFds"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          preservefds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 NetPid = 15[json_name = "NetPid"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          netpid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuncOpts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.RuncOpts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Root = 1[json_name = "Root"];
  if (this->root().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_root().data(), static_cast<int>(this->_internal_root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RuncOpts.Root");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_root(), target);
  }

  // string ContainerID = 2[json_name = "ContainerID"];
  if (this->containerid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_containerid().data(), static_cast<int>(this->_internal_containerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RuncOpts.ContainerID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_containerid(), target);
  }

  // string Bundle = 3[json_name = "Bundle"];
  if (this->bundle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bundle().data(), static_cast<int>(this->_internal_bundle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RuncOpts.Bundle");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_bundle(), target);
  }

  // bool SystemdCgroup = 4[json_name = "SystemdCgroup"];
  if (this->systemdcgroup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_systemdcgroup(), target);
  }

  // bool NoPivot = 5[json_name = "NoPivot"];
  if (this->nopivot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_nopivot(), target);
  }

  // bool NoMountFallback = 6[json_name = "NoMountFallback"];
  if (this->nomountfallback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_nomountfallback(), target);
  }

  // bool NoNewKeyring = 7[json_name = "NoNewKeyring"];
  if (this->nonewkeyring() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_nonewkeyring(), target);
  }

  // string Rootless = 8[json_name = "Rootless"];
  if (this->rootless().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rootless().data(), static_cast<int>(this->_internal_rootless().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RuncOpts.Rootless");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_rootless(), target);
  }

  // bool NoSubreaper = 9[json_name = "NoSubreaper"];
  if (this->nosubreaper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_nosubreaper(), target);
  }

  // bool Keep = 10[json_name = "Keep"];
  if (this->keep() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_keep(), target);
  }

  // string ConsoleSocket = 11[json_name = "ConsoleSocket"];
  if (this->consolesocket().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_consolesocket().data(), static_cast<int>(this->_internal_consolesocket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RuncOpts.ConsoleSocket");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_consolesocket(), target);
  }

  // bool Detach = 12[json_name = "Detach"];
  if (this->detach() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_detach(), target);
  }

  // string PidFile = 13[json_name = "PidFile"];
  if (this->pidfile().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pidfile().data(), static_cast<int>(this->_internal_pidfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RuncOpts.PidFile");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_pidfile(), target);
  }

  // int32 PreserveFds = 14[json_name = "PreserveFds"];
  if (this->preservefds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_preservefds(), target);
  }

  // int32 NetPid = 15[json_name = "NetPid"];
  if (this->netpid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_netpid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.RuncOpts)
  return target;
}

size_t RuncOpts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.RuncOpts)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Root = 1[json_name = "Root"];
  if (this->root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_root());
  }

  // string ContainerID = 2[json_name = "ContainerID"];
  if (this->containerid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_containerid());
  }

  // string Bundle = 3[json_name = "Bundle"];
  if (this->bundle().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bundle());
  }

  // string Rootless = 8[json_name = "Rootless"];
  if (this->rootless().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rootless());
  }

  // string ConsoleSocket = 11[json_name = "ConsoleSocket"];
  if (this->consolesocket().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_consolesocket());
  }

  // string PidFile = 13[json_name = "PidFile"];
  if (this->pidfile().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pidfile());
  }

  // bool SystemdCgroup = 4[json_name = "SystemdCgroup"];
  if (this->systemdcgroup() != 0) {
    total_size += 1 + 1;
  }

  // bool NoPivot = 5[json_name = "NoPivot"];
  if (this->nopivot() != 0) {
    total_size += 1 + 1;
  }

  // bool NoMountFallback = 6[json_name = "NoMountFallback"];
  if (this->nomountfallback() != 0) {
    total_size += 1 + 1;
  }

  // bool NoNewKeyring = 7[json_name = "NoNewKeyring"];
  if (this->nonewkeyring() != 0) {
    total_size += 1 + 1;
  }

  // bool NoSubreaper = 9[json_name = "NoSubreaper"];
  if (this->nosubreaper() != 0) {
    total_size += 1 + 1;
  }

  // bool Keep = 10[json_name = "Keep"];
  if (this->keep() != 0) {
    total_size += 1 + 1;
  }

  // bool Detach = 12[json_name = "Detach"];
  if (this->detach() != 0) {
    total_size += 1 + 1;
  }

  // int32 PreserveFds = 14[json_name = "PreserveFds"];
  if (this->preservefds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_preservefds());
  }

  // int32 NetPid = 15[json_name = "NetPid"];
  if (this->netpid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_netpid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuncOpts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.RuncOpts)
  GOOGLE_DCHECK_NE(&from, this);
  const RuncOpts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RuncOpts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.RuncOpts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.RuncOpts)
    MergeFrom(*source);
  }
}

void RuncOpts::MergeFrom(const RuncOpts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.RuncOpts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.root().size() > 0) {
    _internal_set_root(from._internal_root());
  }
  if (from.containerid().size() > 0) {
    _internal_set_containerid(from._internal_containerid());
  }
  if (from.bundle().size() > 0) {
    _internal_set_bundle(from._internal_bundle());
  }
  if (from.rootless().size() > 0) {
    _internal_set_rootless(from._internal_rootless());
  }
  if (from.consolesocket().size() > 0) {
    _internal_set_consolesocket(from._internal_consolesocket());
  }
  if (from.pidfile().size() > 0) {
    _internal_set_pidfile(from._internal_pidfile());
  }
  if (from.systemdcgroup() != 0) {
    _internal_set_systemdcgroup(from._internal_systemdcgroup());
  }
  if (from.nopivot() != 0) {
    _internal_set_nopivot(from._internal_nopivot());
  }
  if (from.nomountfallback() != 0) {
    _internal_set_nomountfallback(from._internal_nomountfallback());
  }
  if (from.nonewkeyring() != 0) {
    _internal_set_nonewkeyring(from._internal_nonewkeyring());
  }
  if (from.nosubreaper() != 0) {
    _internal_set_nosubreaper(from._internal_nosubreaper());
  }
  if (from.keep() != 0) {
    _internal_set_keep(from._internal_keep());
  }
  if (from.detach() != 0) {
    _internal_set_detach(from._internal_detach());
  }
  if (from.preservefds() != 0) {
    _internal_set_preservefds(from._internal_preservefds());
  }
  if (from.netpid() != 0) {
    _internal_set_netpid(from._internal_netpid());
  }
}

void RuncOpts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.RuncOpts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuncOpts::CopyFrom(const RuncOpts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.RuncOpts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuncOpts::IsInitialized() const {
  return true;
}

void RuncOpts::InternalSwap(RuncOpts* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  root_.Swap(&other->root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  containerid_.Swap(&other->containerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bundle_.Swap(&other->bundle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rootless_.Swap(&other->rootless_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  consolesocket_.Swap(&other->consolesocket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pidfile_.Swap(&other->pidfile_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RuncOpts, netpid_)
      + sizeof(RuncOpts::netpid_)
      - PROTOBUF_FIELD_OFFSET(RuncOpts, systemdcgroup_)>(
          reinterpret_cast<char*>(&systemdcgroup_),
          reinterpret_cast<char*>(&other->systemdcgroup_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RuncOpts::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RuncQueryArgs::InitAsDefaultInstance() {
}
class RuncQueryArgs::_Internal {
 public:
};

RuncQueryArgs::RuncQueryArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  containernames_(arena),
  sandboxnames_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.RuncQueryArgs)
}
RuncQueryArgs::RuncQueryArgs(const RuncQueryArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      containernames_(from.containernames_),
      sandboxnames_(from.sandboxnames_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_root().empty()) {
    root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_root(),
      GetArena());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.RuncQueryArgs)
}

void RuncQueryArgs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RuncQueryArgs_task_2eproto.base);
  root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RuncQueryArgs::~RuncQueryArgs() {
  // @@protoc_insertion_point(destructor:cedana.services.task.RuncQueryArgs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RuncQueryArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RuncQueryArgs::ArenaDtor(void* object) {
  RuncQueryArgs* _this = reinterpret_cast< RuncQueryArgs* >(object);
  (void)_this;
}
void RuncQueryArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuncQueryArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuncQueryArgs& RuncQueryArgs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RuncQueryArgs_task_2eproto.base);
  return *internal_default_instance();
}


void RuncQueryArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.RuncQueryArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  containernames_.Clear();
  sandboxnames_.Clear();
  root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuncQueryArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Root = 1[json_name = "Root"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RuncQueryArgs.Root"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Namespace = 2[json_name = "Namespace"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RuncQueryArgs.Namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ContainerNames = 3[json_name = "ContainerNames"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_containernames();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RuncQueryArgs.ContainerNames"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string SandboxNames = 4[json_name = "SandboxNames"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_sandboxnames();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RuncQueryArgs.SandboxNames"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuncQueryArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.RuncQueryArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Root = 1[json_name = "Root"];
  if (this->root().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_root().data(), static_cast<int>(this->_internal_root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RuncQueryArgs.Root");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_root(), target);
  }

  // string Namespace = 2[json_name = "Namespace"];
  if (this->namespace_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RuncQueryArgs.Namespace");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_namespace_(), target);
  }

  // repeated string ContainerNames = 3[json_name = "ContainerNames"];
  for (int i = 0, n = this->_internal_containernames_size(); i < n; i++) {
    const auto& s = this->_internal_containernames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RuncQueryArgs.ContainerNames");
    target = stream->WriteString(3, s, target);
  }

  // repeated string SandboxNames = 4[json_name = "SandboxNames"];
  for (int i = 0, n = this->_internal_sandboxnames_size(); i < n; i++) {
    const auto& s = this->_internal_sandboxnames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RuncQueryArgs.SandboxNames");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.RuncQueryArgs)
  return target;
}

size_t RuncQueryArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.RuncQueryArgs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ContainerNames = 3[json_name = "ContainerNames"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(containernames_.size());
  for (int i = 0, n = containernames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      containernames_.Get(i));
  }

  // repeated string SandboxNames = 4[json_name = "SandboxNames"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(sandboxnames_.size());
  for (int i = 0, n = sandboxnames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      sandboxnames_.Get(i));
  }

  // string Root = 1[json_name = "Root"];
  if (this->root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_root());
  }

  // string Namespace = 2[json_name = "Namespace"];
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuncQueryArgs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.RuncQueryArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const RuncQueryArgs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RuncQueryArgs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.RuncQueryArgs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.RuncQueryArgs)
    MergeFrom(*source);
  }
}

void RuncQueryArgs::MergeFrom(const RuncQueryArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.RuncQueryArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  containernames_.MergeFrom(from.containernames_);
  sandboxnames_.MergeFrom(from.sandboxnames_);
  if (from.root().size() > 0) {
    _internal_set_root(from._internal_root());
  }
  if (from.namespace_().size() > 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
}

void RuncQueryArgs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.RuncQueryArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuncQueryArgs::CopyFrom(const RuncQueryArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.RuncQueryArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuncQueryArgs::IsInitialized() const {
  return true;
}

void RuncQueryArgs::InternalSwap(RuncQueryArgs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  containernames_.InternalSwap(&other->containernames_);
  sandboxnames_.InternalSwap(&other->sandboxnames_);
  root_.Swap(&other->root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RuncQueryArgs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RuncQueryResp::InitAsDefaultInstance() {
}
class RuncQueryResp::_Internal {
 public:
};

RuncQueryResp::RuncQueryResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  containers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.RuncQueryResp)
}
RuncQueryResp::RuncQueryResp(const RuncQueryResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      containers_(from.containers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.RuncQueryResp)
}

void RuncQueryResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RuncQueryResp_task_2eproto.base);
}

RuncQueryResp::~RuncQueryResp() {
  // @@protoc_insertion_point(destructor:cedana.services.task.RuncQueryResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RuncQueryResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RuncQueryResp::ArenaDtor(void* object) {
  RuncQueryResp* _this = reinterpret_cast< RuncQueryResp* >(object);
  (void)_this;
}
void RuncQueryResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuncQueryResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuncQueryResp& RuncQueryResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RuncQueryResp_task_2eproto.base);
  return *internal_default_instance();
}


void RuncQueryResp::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.RuncQueryResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  containers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuncQueryResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .cedana.services.task.RuncContainer Containers = 1[json_name = "Containers"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_containers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuncQueryResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.RuncQueryResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cedana.services.task.RuncContainer Containers = 1[json_name = "Containers"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_containers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_containers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.RuncQueryResp)
  return target;
}

size_t RuncQueryResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.RuncQueryResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cedana.services.task.RuncContainer Containers = 1[json_name = "Containers"];
  total_size += 1UL * this->_internal_containers_size();
  for (const auto& msg : this->containers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuncQueryResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.RuncQueryResp)
  GOOGLE_DCHECK_NE(&from, this);
  const RuncQueryResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RuncQueryResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.RuncQueryResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.RuncQueryResp)
    MergeFrom(*source);
  }
}

void RuncQueryResp::MergeFrom(const RuncQueryResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.RuncQueryResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  containers_.MergeFrom(from.containers_);
}

void RuncQueryResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.RuncQueryResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuncQueryResp::CopyFrom(const RuncQueryResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.RuncQueryResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuncQueryResp::IsInitialized() const {
  return true;
}

void RuncQueryResp::InternalSwap(RuncQueryResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  containers_.InternalSwap(&other->containers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RuncQueryResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RuncContainer::InitAsDefaultInstance() {
}
class RuncContainer::_Internal {
 public:
};

RuncContainer::RuncContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.RuncContainer)
}
RuncContainer::RuncContainer(const RuncContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  bundlepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bundlepath().empty()) {
    bundlepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bundlepath(),
      GetArena());
  }
  containername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_containername().empty()) {
    containername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_containername(),
      GetArena());
  }
  imagename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imagename().empty()) {
    imagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_imagename(),
      GetArena());
  }
  sandboxid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sandboxid().empty()) {
    sandboxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sandboxid(),
      GetArena());
  }
  sandboxname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sandboxname().empty()) {
    sandboxname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sandboxname(),
      GetArena());
  }
  sandboxuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sandboxuid().empty()) {
    sandboxuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sandboxuid(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.RuncContainer)
}

void RuncContainer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RuncContainer_task_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bundlepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  containername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imagename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sandboxid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sandboxname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sandboxuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RuncContainer::~RuncContainer() {
  // @@protoc_insertion_point(destructor:cedana.services.task.RuncContainer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RuncContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bundlepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  containername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imagename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sandboxid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sandboxname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sandboxuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RuncContainer::ArenaDtor(void* object) {
  RuncContainer* _this = reinterpret_cast< RuncContainer* >(object);
  (void)_this;
}
void RuncContainer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuncContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuncContainer& RuncContainer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RuncContainer_task_2eproto.base);
  return *internal_default_instance();
}


void RuncContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.RuncContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bundlepath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  containername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  imagename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sandboxid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sandboxname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sandboxuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuncContainer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ID = 1[json_name = "ID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RuncContainer.ID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string BundlePath = 2[json_name = "BundlePath"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_bundlepath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RuncContainer.BundlePath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ContainerName = 3[json_name = "ContainerName"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_containername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RuncContainer.ContainerName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ImageName = 4[json_name = "ImageName"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_imagename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RuncContainer.ImageName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SandboxId = 5[json_name = "SandboxId"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_sandboxid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RuncContainer.SandboxId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SandboxName = 6[json_name = "SandboxName"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_sandboxname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RuncContainer.SandboxName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SandboxUid = 7[json_name = "SandboxUid"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_sandboxuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RuncContainer.SandboxUid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuncContainer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.RuncContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1[json_name = "ID"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RuncContainer.ID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string BundlePath = 2[json_name = "BundlePath"];
  if (this->bundlepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bundlepath().data(), static_cast<int>(this->_internal_bundlepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RuncContainer.BundlePath");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bundlepath(), target);
  }

  // string ContainerName = 3[json_name = "ContainerName"];
  if (this->containername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_containername().data(), static_cast<int>(this->_internal_containername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RuncContainer.ContainerName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_containername(), target);
  }

  // string ImageName = 4[json_name = "ImageName"];
  if (this->imagename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imagename().data(), static_cast<int>(this->_internal_imagename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RuncContainer.ImageName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_imagename(), target);
  }

  // string SandboxId = 5[json_name = "SandboxId"];
  if (this->sandboxid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sandboxid().data(), static_cast<int>(this->_internal_sandboxid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RuncContainer.SandboxId");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sandboxid(), target);
  }

  // string SandboxName = 6[json_name = "SandboxName"];
  if (this->sandboxname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sandboxname().data(), static_cast<int>(this->_internal_sandboxname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RuncContainer.SandboxName");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_sandboxname(), target);
  }

  // string SandboxUid = 7[json_name = "SandboxUid"];
  if (this->sandboxuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sandboxuid().data(), static_cast<int>(this->_internal_sandboxuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RuncContainer.SandboxUid");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_sandboxuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.RuncContainer)
  return target;
}

size_t RuncContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.RuncContainer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ID = 1[json_name = "ID"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string BundlePath = 2[json_name = "BundlePath"];
  if (this->bundlepath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bundlepath());
  }

  // string ContainerName = 3[json_name = "ContainerName"];
  if (this->containername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_containername());
  }

  // string ImageName = 4[json_name = "ImageName"];
  if (this->imagename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imagename());
  }

  // string SandboxId = 5[json_name = "SandboxId"];
  if (this->sandboxid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sandboxid());
  }

  // string SandboxName = 6[json_name = "SandboxName"];
  if (this->sandboxname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sandboxname());
  }

  // string SandboxUid = 7[json_name = "SandboxUid"];
  if (this->sandboxuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sandboxuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuncContainer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.RuncContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const RuncContainer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RuncContainer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.RuncContainer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.RuncContainer)
    MergeFrom(*source);
  }
}

void RuncContainer::MergeFrom(const RuncContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.RuncContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.bundlepath().size() > 0) {
    _internal_set_bundlepath(from._internal_bundlepath());
  }
  if (from.containername().size() > 0) {
    _internal_set_containername(from._internal_containername());
  }
  if (from.imagename().size() > 0) {
    _internal_set_imagename(from._internal_imagename());
  }
  if (from.sandboxid().size() > 0) {
    _internal_set_sandboxid(from._internal_sandboxid());
  }
  if (from.sandboxname().size() > 0) {
    _internal_set_sandboxname(from._internal_sandboxname());
  }
  if (from.sandboxuid().size() > 0) {
    _internal_set_sandboxuid(from._internal_sandboxuid());
  }
}

void RuncContainer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.RuncContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuncContainer::CopyFrom(const RuncContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.RuncContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuncContainer::IsInitialized() const {
  return true;
}

void RuncContainer::InternalSwap(RuncContainer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bundlepath_.Swap(&other->bundlepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  containername_.Swap(&other->containername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  imagename_.Swap(&other->imagename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sandboxid_.Swap(&other->sandboxid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sandboxname_.Swap(&other->sandboxname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sandboxuid_.Swap(&other->sandboxuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RuncContainer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RuncGetPausePidArgs::InitAsDefaultInstance() {
}
class RuncGetPausePidArgs::_Internal {
 public:
};

RuncGetPausePidArgs::RuncGetPausePidArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.RuncGetPausePidArgs)
}
RuncGetPausePidArgs::RuncGetPausePidArgs(const RuncGetPausePidArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bundlepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bundlepath().empty()) {
    bundlepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bundlepath(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.RuncGetPausePidArgs)
}

void RuncGetPausePidArgs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RuncGetPausePidArgs_task_2eproto.base);
  bundlepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RuncGetPausePidArgs::~RuncGetPausePidArgs() {
  // @@protoc_insertion_point(destructor:cedana.services.task.RuncGetPausePidArgs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RuncGetPausePidArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bundlepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RuncGetPausePidArgs::ArenaDtor(void* object) {
  RuncGetPausePidArgs* _this = reinterpret_cast< RuncGetPausePidArgs* >(object);
  (void)_this;
}
void RuncGetPausePidArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuncGetPausePidArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuncGetPausePidArgs& RuncGetPausePidArgs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RuncGetPausePidArgs_task_2eproto.base);
  return *internal_default_instance();
}


void RuncGetPausePidArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.RuncGetPausePidArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bundlepath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuncGetPausePidArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string BundlePath = 1[json_name = "BundlePath"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bundlepath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RuncGetPausePidArgs.BundlePath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuncGetPausePidArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.RuncGetPausePidArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string BundlePath = 1[json_name = "BundlePath"];
  if (this->bundlepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bundlepath().data(), static_cast<int>(this->_internal_bundlepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RuncGetPausePidArgs.BundlePath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bundlepath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.RuncGetPausePidArgs)
  return target;
}

size_t RuncGetPausePidArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.RuncGetPausePidArgs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string BundlePath = 1[json_name = "BundlePath"];
  if (this->bundlepath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bundlepath());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuncGetPausePidArgs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.RuncGetPausePidArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const RuncGetPausePidArgs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RuncGetPausePidArgs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.RuncGetPausePidArgs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.RuncGetPausePidArgs)
    MergeFrom(*source);
  }
}

void RuncGetPausePidArgs::MergeFrom(const RuncGetPausePidArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.RuncGetPausePidArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bundlepath().size() > 0) {
    _internal_set_bundlepath(from._internal_bundlepath());
  }
}

void RuncGetPausePidArgs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.RuncGetPausePidArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuncGetPausePidArgs::CopyFrom(const RuncGetPausePidArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.RuncGetPausePidArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuncGetPausePidArgs::IsInitialized() const {
  return true;
}

void RuncGetPausePidArgs::InternalSwap(RuncGetPausePidArgs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bundlepath_.Swap(&other->bundlepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RuncGetPausePidArgs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RuncGetPausePidResp::InitAsDefaultInstance() {
}
class RuncGetPausePidResp::_Internal {
 public:
};

RuncGetPausePidResp::RuncGetPausePidResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.RuncGetPausePidResp)
}
RuncGetPausePidResp::RuncGetPausePidResp(const RuncGetPausePidResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pausepid_ = from.pausepid_;
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.RuncGetPausePidResp)
}

void RuncGetPausePidResp::SharedCtor() {
  pausepid_ = PROTOBUF_LONGLONG(0);
}

RuncGetPausePidResp::~RuncGetPausePidResp() {
  // @@protoc_insertion_point(destructor:cedana.services.task.RuncGetPausePidResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RuncGetPausePidResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RuncGetPausePidResp::ArenaDtor(void* object) {
  RuncGetPausePidResp* _this = reinterpret_cast< RuncGetPausePidResp* >(object);
  (void)_this;
}
void RuncGetPausePidResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuncGetPausePidResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuncGetPausePidResp& RuncGetPausePidResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RuncGetPausePidResp_task_2eproto.base);
  return *internal_default_instance();
}


void RuncGetPausePidResp::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.RuncGetPausePidResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pausepid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuncGetPausePidResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 PausePid = 1[json_name = "PausePid"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pausepid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuncGetPausePidResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.RuncGetPausePidResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 PausePid = 1[json_name = "PausePid"];
  if (this->pausepid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_pausepid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.RuncGetPausePidResp)
  return target;
}

size_t RuncGetPausePidResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.RuncGetPausePidResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 PausePid = 1[json_name = "PausePid"];
  if (this->pausepid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_pausepid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuncGetPausePidResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.RuncGetPausePidResp)
  GOOGLE_DCHECK_NE(&from, this);
  const RuncGetPausePidResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RuncGetPausePidResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.RuncGetPausePidResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.RuncGetPausePidResp)
    MergeFrom(*source);
  }
}

void RuncGetPausePidResp::MergeFrom(const RuncGetPausePidResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.RuncGetPausePidResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pausepid() != 0) {
    _internal_set_pausepid(from._internal_pausepid());
  }
}

void RuncGetPausePidResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.RuncGetPausePidResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuncGetPausePidResp::CopyFrom(const RuncGetPausePidResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.RuncGetPausePidResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuncGetPausePidResp::IsInitialized() const {
  return true;
}

void RuncGetPausePidResp::InternalSwap(RuncGetPausePidResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(pausepid_, other->pausepid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RuncGetPausePidResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogStreamingArgs::InitAsDefaultInstance() {
}
class LogStreamingArgs::_Internal {
 public:
};

LogStreamingArgs::LogStreamingArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.LogStreamingArgs)
}
LogStreamingArgs::LogStreamingArgs(const LogStreamingArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_timestamp().empty()) {
    timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_timestamp(),
      GetArena());
  }
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source().empty()) {
    source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_source(),
      GetArena());
  }
  level_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_level().empty()) {
    level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_level(),
      GetArena());
  }
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_msg(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.LogStreamingArgs)
}

void LogStreamingArgs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogStreamingArgs_task_2eproto.base);
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  level_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LogStreamingArgs::~LogStreamingArgs() {
  // @@protoc_insertion_point(destructor:cedana.services.task.LogStreamingArgs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogStreamingArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  timestamp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  level_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogStreamingArgs::ArenaDtor(void* object) {
  LogStreamingArgs* _this = reinterpret_cast< LogStreamingArgs* >(object);
  (void)_this;
}
void LogStreamingArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogStreamingArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogStreamingArgs& LogStreamingArgs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogStreamingArgs_task_2eproto.base);
  return *internal_default_instance();
}


void LogStreamingArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.LogStreamingArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  source_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  level_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogStreamingArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Timestamp = 1[json_name = "Timestamp"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.LogStreamingArgs.Timestamp"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Source = 2[json_name = "Source"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.LogStreamingArgs.Source"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Level = 3[json_name = "Level"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_level();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.LogStreamingArgs.Level"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Msg = 4[json_name = "Msg"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.LogStreamingArgs.Msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogStreamingArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.LogStreamingArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Timestamp = 1[json_name = "Timestamp"];
  if (this->timestamp().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timestamp().data(), static_cast<int>(this->_internal_timestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.LogStreamingArgs.Timestamp");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_timestamp(), target);
  }

  // string Source = 2[json_name = "Source"];
  if (this->source().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.LogStreamingArgs.Source");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source(), target);
  }

  // string Level = 3[json_name = "Level"];
  if (this->level().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_level().data(), static_cast<int>(this->_internal_level().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.LogStreamingArgs.Level");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_level(), target);
  }

  // string Msg = 4[json_name = "Msg"];
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.LogStreamingArgs.Msg");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.LogStreamingArgs)
  return target;
}

size_t LogStreamingArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.LogStreamingArgs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Timestamp = 1[json_name = "Timestamp"];
  if (this->timestamp().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timestamp());
  }

  // string Source = 2[json_name = "Source"];
  if (this->source().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  // string Level = 3[json_name = "Level"];
  if (this->level().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_level());
  }

  // string Msg = 4[json_name = "Msg"];
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogStreamingArgs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.LogStreamingArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const LogStreamingArgs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogStreamingArgs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.LogStreamingArgs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.LogStreamingArgs)
    MergeFrom(*source);
  }
}

void LogStreamingArgs::MergeFrom(const LogStreamingArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.LogStreamingArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp().size() > 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.source().size() > 0) {
    _internal_set_source(from._internal_source());
  }
  if (from.level().size() > 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.msg().size() > 0) {
    _internal_set_msg(from._internal_msg());
  }
}

void LogStreamingArgs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.LogStreamingArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogStreamingArgs::CopyFrom(const LogStreamingArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.LogStreamingArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogStreamingArgs::IsInitialized() const {
  return true;
}

void LogStreamingArgs::InternalSwap(LogStreamingArgs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  timestamp_.Swap(&other->timestamp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  level_.Swap(&other->level_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LogStreamingArgs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogStreamingResp::InitAsDefaultInstance() {
}
class LogStreamingResp::_Internal {
 public:
};

LogStreamingResp::LogStreamingResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.LogStreamingResp)
}
LogStreamingResp::LogStreamingResp(const LogStreamingResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.LogStreamingResp)
}

void LogStreamingResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogStreamingResp_task_2eproto.base);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LogStreamingResp::~LogStreamingResp() {
  // @@protoc_insertion_point(destructor:cedana.services.task.LogStreamingResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogStreamingResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogStreamingResp::ArenaDtor(void* object) {
  LogStreamingResp* _this = reinterpret_cast< LogStreamingResp* >(object);
  (void)_this;
}
void LogStreamingResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogStreamingResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogStreamingResp& LogStreamingResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogStreamingResp_task_2eproto.base);
  return *internal_default_instance();
}


void LogStreamingResp::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.LogStreamingResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogStreamingResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Status = 1[json_name = "Status"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.LogStreamingResp.Status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogStreamingResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.LogStreamingResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Status = 1[json_name = "Status"];
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.LogStreamingResp.Status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.LogStreamingResp)
  return target;
}

size_t LogStreamingResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.LogStreamingResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Status = 1[json_name = "Status"];
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogStreamingResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.LogStreamingResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LogStreamingResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogStreamingResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.LogStreamingResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.LogStreamingResp)
    MergeFrom(*source);
  }
}

void LogStreamingResp::MergeFrom(const LogStreamingResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.LogStreamingResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
}

void LogStreamingResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.LogStreamingResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogStreamingResp::CopyFrom(const LogStreamingResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.LogStreamingResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogStreamingResp::IsInitialized() const {
  return true;
}

void LogStreamingResp::InternalSwap(LogStreamingResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LogStreamingResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessState::InitAsDefaultInstance() {
  ::cedana::services::task::_ProcessState_default_instance_._instance.get_mutable()->processinfo_ = const_cast< ::cedana::services::task::ProcessInfo*>(
      ::cedana::services::task::ProcessInfo::internal_default_instance());
  ::cedana::services::task::_ProcessState_default_instance_._instance.get_mutable()->hostinfo_ = const_cast< ::cedana::services::task::HostInfo*>(
      ::cedana::services::task::HostInfo::internal_default_instance());
  ::cedana::services::task::_ProcessState_default_instance_._instance.get_mutable()->cpuinfo_ = const_cast< ::cedana::services::task::CPUInfo*>(
      ::cedana::services::task::CPUInfo::internal_default_instance());
  ::cedana::services::task::_ProcessState_default_instance_._instance.get_mutable()->memoryinfo_ = const_cast< ::cedana::services::task::MemoryInfo*>(
      ::cedana::services::task::MemoryInfo::internal_default_instance());
}
class ProcessState::_Internal {
 public:
  static const ::cedana::services::task::ProcessInfo& processinfo(const ProcessState* msg);
  static const ::cedana::services::task::HostInfo& hostinfo(const ProcessState* msg);
  static const ::cedana::services::task::CPUInfo& cpuinfo(const ProcessState* msg);
  static const ::cedana::services::task::MemoryInfo& memoryinfo(const ProcessState* msg);
};

const ::cedana::services::task::ProcessInfo&
ProcessState::_Internal::processinfo(const ProcessState* msg) {
  return *msg->processinfo_;
}
const ::cedana::services::task::HostInfo&
ProcessState::_Internal::hostinfo(const ProcessState* msg) {
  return *msg->hostinfo_;
}
const ::cedana::services::task::CPUInfo&
ProcessState::_Internal::cpuinfo(const ProcessState* msg) {
  return *msg->cpuinfo_;
}
const ::cedana::services::task::MemoryInfo&
ProcessState::_Internal::memoryinfo(const ProcessState* msg) {
  return *msg->memoryinfo_;
}
ProcessState::ProcessState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  remotestate_(arena),
  uids_(arena),
  gids_(arena),
  groups_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.ProcessState)
}
ProcessState::ProcessState(const ProcessState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      remotestate_(from.remotestate_),
      uids_(from.uids_),
      gids_(from.gids_),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task().empty()) {
    task_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_task(),
      GetArena());
  }
  containerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_containerid().empty()) {
    containerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_containerid(),
      GetArena());
  }
  startedat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_startedat().empty()) {
    startedat_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_startedat(),
      GetArena());
  }
  checkpointpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_checkpointpath().empty()) {
    checkpointpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_checkpointpath(),
      GetArena());
  }
  jid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_jid().empty()) {
    jid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_jid(),
      GetArena());
  }
  if (from._internal_has_processinfo()) {
    processinfo_ = new ::cedana::services::task::ProcessInfo(*from.processinfo_);
  } else {
    processinfo_ = nullptr;
  }
  if (from._internal_has_hostinfo()) {
    hostinfo_ = new ::cedana::services::task::HostInfo(*from.hostinfo_);
  } else {
    hostinfo_ = nullptr;
  }
  if (from._internal_has_cpuinfo()) {
    cpuinfo_ = new ::cedana::services::task::CPUInfo(*from.cpuinfo_);
  } else {
    cpuinfo_ = nullptr;
  }
  if (from._internal_has_memoryinfo()) {
    memoryinfo_ = new ::cedana::services::task::MemoryInfo(*from.memoryinfo_);
  } else {
    memoryinfo_ = nullptr;
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gpucheckpointed_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(gpucheckpointed_));
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.ProcessState)
}

void ProcessState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessState_task_2eproto.base);
  task_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  containerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  startedat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checkpointpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&processinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gpucheckpointed_) -
      reinterpret_cast<char*>(&processinfo_)) + sizeof(gpucheckpointed_));
}

ProcessState::~ProcessState() {
  // @@protoc_insertion_point(destructor:cedana.services.task.ProcessState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcessState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  task_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  containerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  startedat_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checkpointpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete processinfo_;
  if (this != internal_default_instance()) delete hostinfo_;
  if (this != internal_default_instance()) delete cpuinfo_;
  if (this != internal_default_instance()) delete memoryinfo_;
}

void ProcessState::ArenaDtor(void* object) {
  ProcessState* _this = reinterpret_cast< ProcessState* >(object);
  (void)_this;
}
void ProcessState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessState& ProcessState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessState_task_2eproto.base);
  return *internal_default_instance();
}


void ProcessState::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.ProcessState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remotestate_.Clear();
  uids_.Clear();
  gids_.Clear();
  groups_.Clear();
  task_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  containerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  startedat_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  checkpointpath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  jid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && processinfo_ != nullptr) {
    delete processinfo_;
  }
  processinfo_ = nullptr;
  if (GetArena() == nullptr && hostinfo_ != nullptr) {
    delete hostinfo_;
  }
  hostinfo_ = nullptr;
  if (GetArena() == nullptr && cpuinfo_ != nullptr) {
    delete cpuinfo_;
  }
  cpuinfo_ = nullptr;
  if (GetArena() == nullptr && memoryinfo_ != nullptr) {
    delete memoryinfo_;
  }
  memoryinfo_ = nullptr;
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gpucheckpointed_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(gpucheckpointed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 PID = 1[json_name = "PID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Task = 2[json_name = "Task"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_task();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ProcessState.Task"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ContainerID = 4[json_name = "ContainerID"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_containerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ProcessState.ContainerID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string StartedAt = 5[json_name = "StartedAt"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_startedat();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ProcessState.StartedAt"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedana.services.task.ProcessInfo ProcessInfo = 6[json_name = "ProcessInfo"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_processinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string CheckpointPath = 7[json_name = "CheckpointPath"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_checkpointpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ProcessState.CheckpointPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedana.services.task.CheckpointState CheckpointState = 8[json_name = "CheckpointState"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_checkpointstate(static_cast<::cedana::services::task::CheckpointState>(val));
        } else goto handle_unusual;
        continue;
      // .cedana.services.task.JobState JobState = 9[json_name = "JobState"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_jobstate(static_cast<::cedana::services::task::JobState>(val));
        } else goto handle_unusual;
        continue;
      // repeated .cedana.services.task.RemoteState RemoteState = 10[json_name = "RemoteState"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_remotestate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // bool GPUCheckpointed = 11[json_name = "GPUCheckpointed"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          gpucheckpointed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string JID = 12[json_name = "JID"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_jid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ProcessState.JID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedana.services.task.HostInfo HostInfo = 13[json_name = "HostInfo"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_hostinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedana.services.task.CPUInfo CPUInfo = 14[json_name = "CPUInfo"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpuinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedana.services.task.MemoryInfo MemoryInfo = 15[json_name = "MemoryInfo"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_memoryinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 UIDs = 16[json_name = "UIDs"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_uids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128) {
          _internal_add_uids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 GIDs = 17[json_name = "GIDs"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_gids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136) {
          _internal_add_gids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 Groups = 18[json_name = "Groups"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_groups(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144) {
          _internal_add_groups(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.ProcessState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PID = 1[json_name = "PID"];
  if (this->pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_pid(), target);
  }

  // string Task = 2[json_name = "Task"];
  if (this->task().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task().data(), static_cast<int>(this->_internal_task().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ProcessState.Task");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_task(), target);
  }

  // string ContainerID = 4[json_name = "ContainerID"];
  if (this->containerid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_containerid().data(), static_cast<int>(this->_internal_containerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ProcessState.ContainerID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_containerid(), target);
  }

  // string StartedAt = 5[json_name = "StartedAt"];
  if (this->startedat().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_startedat().data(), static_cast<int>(this->_internal_startedat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ProcessState.StartedAt");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_startedat(), target);
  }

  // .cedana.services.task.ProcessInfo ProcessInfo = 6[json_name = "ProcessInfo"];
  if (this->has_processinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::processinfo(this), target, stream);
  }

  // string CheckpointPath = 7[json_name = "CheckpointPath"];
  if (this->checkpointpath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_checkpointpath().data(), static_cast<int>(this->_internal_checkpointpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ProcessState.CheckpointPath");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_checkpointpath(), target);
  }

  // .cedana.services.task.CheckpointState CheckpointState = 8[json_name = "CheckpointState"];
  if (this->checkpointstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_checkpointstate(), target);
  }

  // .cedana.services.task.JobState JobState = 9[json_name = "JobState"];
  if (this->jobstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_jobstate(), target);
  }

  // repeated .cedana.services.task.RemoteState RemoteState = 10[json_name = "RemoteState"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_remotestate_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_remotestate(i), target, stream);
  }

  // bool GPUCheckpointed = 11[json_name = "GPUCheckpointed"];
  if (this->gpucheckpointed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_gpucheckpointed(), target);
  }

  // string JID = 12[json_name = "JID"];
  if (this->jid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_jid().data(), static_cast<int>(this->_internal_jid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ProcessState.JID");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_jid(), target);
  }

  // .cedana.services.task.HostInfo HostInfo = 13[json_name = "HostInfo"];
  if (this->has_hostinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::hostinfo(this), target, stream);
  }

  // .cedana.services.task.CPUInfo CPUInfo = 14[json_name = "CPUInfo"];
  if (this->has_cpuinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::cpuinfo(this), target, stream);
  }

  // .cedana.services.task.MemoryInfo MemoryInfo = 15[json_name = "MemoryInfo"];
  if (this->has_memoryinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::memoryinfo(this), target, stream);
  }

  // repeated int32 UIDs = 16[json_name = "UIDs"];
  {
    int byte_size = _uids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          16, _internal_uids(), byte_size, target);
    }
  }

  // repeated int32 GIDs = 17[json_name = "GIDs"];
  {
    int byte_size = _gids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          17, _internal_gids(), byte_size, target);
    }
  }

  // repeated int32 Groups = 18[json_name = "Groups"];
  {
    int byte_size = _groups_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          18, _internal_groups(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.ProcessState)
  return target;
}

size_t ProcessState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.ProcessState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cedana.services.task.RemoteState RemoteState = 10[json_name = "RemoteState"];
  total_size += 1UL * this->_internal_remotestate_size();
  for (const auto& msg : this->remotestate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 UIDs = 16[json_name = "UIDs"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->uids_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 GIDs = 17[json_name = "GIDs"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->gids_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _gids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 Groups = 18[json_name = "Groups"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->groups_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _groups_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string Task = 2[json_name = "Task"];
  if (this->task().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task());
  }

  // string ContainerID = 4[json_name = "ContainerID"];
  if (this->containerid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_containerid());
  }

  // string StartedAt = 5[json_name = "StartedAt"];
  if (this->startedat().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_startedat());
  }

  // string CheckpointPath = 7[json_name = "CheckpointPath"];
  if (this->checkpointpath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_checkpointpath());
  }

  // string JID = 12[json_name = "JID"];
  if (this->jid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_jid());
  }

  // .cedana.services.task.ProcessInfo ProcessInfo = 6[json_name = "ProcessInfo"];
  if (this->has_processinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *processinfo_);
  }

  // .cedana.services.task.HostInfo HostInfo = 13[json_name = "HostInfo"];
  if (this->has_hostinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hostinfo_);
  }

  // .cedana.services.task.CPUInfo CPUInfo = 14[json_name = "CPUInfo"];
  if (this->has_cpuinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cpuinfo_);
  }

  // .cedana.services.task.MemoryInfo MemoryInfo = 15[json_name = "MemoryInfo"];
  if (this->has_memoryinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *memoryinfo_);
  }

  // int32 PID = 1[json_name = "PID"];
  if (this->pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pid());
  }

  // .cedana.services.task.CheckpointState CheckpointState = 8[json_name = "CheckpointState"];
  if (this->checkpointstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_checkpointstate());
  }

  // .cedana.services.task.JobState JobState = 9[json_name = "JobState"];
  if (this->jobstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_jobstate());
  }

  // bool GPUCheckpointed = 11[json_name = "GPUCheckpointed"];
  if (this->gpucheckpointed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.ProcessState)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.ProcessState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.ProcessState)
    MergeFrom(*source);
  }
}

void ProcessState::MergeFrom(const ProcessState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.ProcessState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  remotestate_.MergeFrom(from.remotestate_);
  uids_.MergeFrom(from.uids_);
  gids_.MergeFrom(from.gids_);
  groups_.MergeFrom(from.groups_);
  if (from.task().size() > 0) {
    _internal_set_task(from._internal_task());
  }
  if (from.containerid().size() > 0) {
    _internal_set_containerid(from._internal_containerid());
  }
  if (from.startedat().size() > 0) {
    _internal_set_startedat(from._internal_startedat());
  }
  if (from.checkpointpath().size() > 0) {
    _internal_set_checkpointpath(from._internal_checkpointpath());
  }
  if (from.jid().size() > 0) {
    _internal_set_jid(from._internal_jid());
  }
  if (from.has_processinfo()) {
    _internal_mutable_processinfo()->::cedana::services::task::ProcessInfo::MergeFrom(from._internal_processinfo());
  }
  if (from.has_hostinfo()) {
    _internal_mutable_hostinfo()->::cedana::services::task::HostInfo::MergeFrom(from._internal_hostinfo());
  }
  if (from.has_cpuinfo()) {
    _internal_mutable_cpuinfo()->::cedana::services::task::CPUInfo::MergeFrom(from._internal_cpuinfo());
  }
  if (from.has_memoryinfo()) {
    _internal_mutable_memoryinfo()->::cedana::services::task::MemoryInfo::MergeFrom(from._internal_memoryinfo());
  }
  if (from.pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from.checkpointstate() != 0) {
    _internal_set_checkpointstate(from._internal_checkpointstate());
  }
  if (from.jobstate() != 0) {
    _internal_set_jobstate(from._internal_jobstate());
  }
  if (from.gpucheckpointed() != 0) {
    _internal_set_gpucheckpointed(from._internal_gpucheckpointed());
  }
}

void ProcessState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.ProcessState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessState::CopyFrom(const ProcessState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.ProcessState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessState::IsInitialized() const {
  return true;
}

void ProcessState::InternalSwap(ProcessState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  remotestate_.InternalSwap(&other->remotestate_);
  uids_.InternalSwap(&other->uids_);
  gids_.InternalSwap(&other->gids_);
  groups_.InternalSwap(&other->groups_);
  task_.Swap(&other->task_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  containerid_.Swap(&other->containerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  startedat_.Swap(&other->startedat_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  checkpointpath_.Swap(&other->checkpointpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  jid_.Swap(&other->jid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessState, gpucheckpointed_)
      + sizeof(ProcessState::gpucheckpointed_)
      - PROTOBUF_FIELD_OFFSET(ProcessState, processinfo_)>(
          reinterpret_cast<char*>(&processinfo_),
          reinterpret_cast<char*>(&other->processinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoteState::InitAsDefaultInstance() {
}
class RemoteState::_Internal {
 public:
};

RemoteState::RemoteState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.RemoteState)
}
RemoteState::RemoteState(const RemoteState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  checkpointid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_checkpointid().empty()) {
    checkpointid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_checkpointid(),
      GetArena());
  }
  uploadid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uploadid().empty()) {
    uploadid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uploadid(),
      GetArena());
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.RemoteState)
}

void RemoteState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoteState_task_2eproto.base);
  checkpointid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uploadid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = PROTOBUF_LONGLONG(0);
}

RemoteState::~RemoteState() {
  // @@protoc_insertion_point(destructor:cedana.services.task.RemoteState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  checkpointid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uploadid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoteState::ArenaDtor(void* object) {
  RemoteState* _this = reinterpret_cast< RemoteState* >(object);
  (void)_this;
}
void RemoteState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteState& RemoteState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteState_task_2eproto.base);
  return *internal_default_instance();
}


void RemoteState::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.RemoteState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  checkpointid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uploadid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string CheckpointID = 1[json_name = "CheckpointID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_checkpointid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RemoteState.CheckpointID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string UploadID = 2[json_name = "UploadID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_uploadid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RemoteState.UploadID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 Timestamp = 3[json_name = "Timestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.RemoteState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string CheckpointID = 1[json_name = "CheckpointID"];
  if (this->checkpointid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_checkpointid().data(), static_cast<int>(this->_internal_checkpointid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RemoteState.CheckpointID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_checkpointid(), target);
  }

  // string UploadID = 2[json_name = "UploadID"];
  if (this->uploadid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uploadid().data(), static_cast<int>(this->_internal_uploadid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RemoteState.UploadID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uploadid(), target);
  }

  // int64 Timestamp = 3[json_name = "Timestamp"];
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.RemoteState)
  return target;
}

size_t RemoteState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.RemoteState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string CheckpointID = 1[json_name = "CheckpointID"];
  if (this->checkpointid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_checkpointid());
  }

  // string UploadID = 2[json_name = "UploadID"];
  if (this->uploadid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uploadid());
  }

  // int64 Timestamp = 3[json_name = "Timestamp"];
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.RemoteState)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.RemoteState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.RemoteState)
    MergeFrom(*source);
  }
}

void RemoteState::MergeFrom(const RemoteState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.RemoteState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.checkpointid().size() > 0) {
    _internal_set_checkpointid(from._internal_checkpointid());
  }
  if (from.uploadid().size() > 0) {
    _internal_set_uploadid(from._internal_uploadid());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void RemoteState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.RemoteState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteState::CopyFrom(const RemoteState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.RemoteState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteState::IsInitialized() const {
  return true;
}

void RemoteState::InternalSwap(RemoteState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  checkpointid_.Swap(&other->checkpointid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uploadid_.Swap(&other->uploadid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessInfo::InitAsDefaultInstance() {
}
class ProcessInfo::_Internal {
 public:
};

ProcessInfo::ProcessInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  openfds_(arena),
  openconnections_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.ProcessInfo)
}
ProcessInfo::ProcessInfo(const ProcessInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      openfds_(from.openfds_),
      openconnections_(from.openconnections_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  workingdir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_workingdir().empty()) {
    workingdir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_workingdir(),
      GetArena());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status(),
      GetArena());
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&memorypercent_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(memorypercent_));
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.ProcessInfo)
}

void ProcessInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessInfo_task_2eproto.base);
  workingdir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&memorypercent_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(memorypercent_));
}

ProcessInfo::~ProcessInfo() {
  // @@protoc_insertion_point(destructor:cedana.services.task.ProcessInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcessInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  workingdir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProcessInfo::ArenaDtor(void* object) {
  ProcessInfo* _this = reinterpret_cast< ProcessInfo* >(object);
  (void)_this;
}
void ProcessInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessInfo& ProcessInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessInfo_task_2eproto.base);
  return *internal_default_instance();
}


void ProcessInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.ProcessInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  openfds_.Clear();
  openconnections_.Clear();
  workingdir_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&memorypercent_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(memorypercent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 PID = 1[json_name = "PID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool AttachedToHardwareAccel = 2[json_name = "AttachedToHardwareAccel"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          attachedtohardwareaccel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .cedana.services.task.OpenFilesStat OpenFds = 3[json_name = "OpenFds"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_openfds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string WorkingDir = 4[json_name = "WorkingDir"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_workingdir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ProcessInfo.WorkingDir"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .cedana.services.task.ConnectionStat OpenConnections = 5[json_name = "OpenConnections"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_openconnections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // float MemoryPercent = 6[json_name = "MemoryPercent"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          memorypercent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool IsRunning = 7[json_name = "IsRunning"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          isrunning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Status = 8[json_name = "Status"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ProcessInfo.Status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.ProcessInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PID = 1[json_name = "PID"];
  if (this->pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_pid(), target);
  }

  // bool AttachedToHardwareAccel = 2[json_name = "AttachedToHardwareAccel"];
  if (this->attachedtohardwareaccel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_attachedtohardwareaccel(), target);
  }

  // repeated .cedana.services.task.OpenFilesStat OpenFds = 3[json_name = "OpenFds"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_openfds_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_openfds(i), target, stream);
  }

  // string WorkingDir = 4[json_name = "WorkingDir"];
  if (this->workingdir().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workingdir().data(), static_cast<int>(this->_internal_workingdir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ProcessInfo.WorkingDir");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_workingdir(), target);
  }

  // repeated .cedana.services.task.ConnectionStat OpenConnections = 5[json_name = "OpenConnections"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_openconnections_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_openconnections(i), target, stream);
  }

  // float MemoryPercent = 6[json_name = "MemoryPercent"];
  if (!(this->memorypercent() <= 0 && this->memorypercent() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_memorypercent(), target);
  }

  // bool IsRunning = 7[json_name = "IsRunning"];
  if (this->isrunning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_isrunning(), target);
  }

  // string Status = 8[json_name = "Status"];
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ProcessInfo.Status");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.ProcessInfo)
  return target;
}

size_t ProcessInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.ProcessInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cedana.services.task.OpenFilesStat OpenFds = 3[json_name = "OpenFds"];
  total_size += 1UL * this->_internal_openfds_size();
  for (const auto& msg : this->openfds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cedana.services.task.ConnectionStat OpenConnections = 5[json_name = "OpenConnections"];
  total_size += 1UL * this->_internal_openconnections_size();
  for (const auto& msg : this->openconnections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string WorkingDir = 4[json_name = "WorkingDir"];
  if (this->workingdir().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workingdir());
  }

  // string Status = 8[json_name = "Status"];
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // int32 PID = 1[json_name = "PID"];
  if (this->pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pid());
  }

  // bool AttachedToHardwareAccel = 2[json_name = "AttachedToHardwareAccel"];
  if (this->attachedtohardwareaccel() != 0) {
    total_size += 1 + 1;
  }

  // bool IsRunning = 7[json_name = "IsRunning"];
  if (this->isrunning() != 0) {
    total_size += 1 + 1;
  }

  // float MemoryPercent = 6[json_name = "MemoryPercent"];
  if (!(this->memorypercent() <= 0 && this->memorypercent() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.ProcessInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.ProcessInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.ProcessInfo)
    MergeFrom(*source);
  }
}

void ProcessInfo::MergeFrom(const ProcessInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.ProcessInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  openfds_.MergeFrom(from.openfds_);
  openconnections_.MergeFrom(from.openconnections_);
  if (from.workingdir().size() > 0) {
    _internal_set_workingdir(from._internal_workingdir());
  }
  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from.attachedtohardwareaccel() != 0) {
    _internal_set_attachedtohardwareaccel(from._internal_attachedtohardwareaccel());
  }
  if (from.isrunning() != 0) {
    _internal_set_isrunning(from._internal_isrunning());
  }
  if (!(from.memorypercent() <= 0 && from.memorypercent() >= 0)) {
    _internal_set_memorypercent(from._internal_memorypercent());
  }
}

void ProcessInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.ProcessInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessInfo::CopyFrom(const ProcessInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.ProcessInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessInfo::IsInitialized() const {
  return true;
}

void ProcessInfo::InternalSwap(ProcessInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  openfds_.InternalSwap(&other->openfds_);
  openconnections_.InternalSwap(&other->openconnections_);
  workingdir_.Swap(&other->workingdir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessInfo, memorypercent_)
      + sizeof(ProcessInfo::memorypercent_)
      - PROTOBUF_FIELD_OFFSET(ProcessInfo, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HostInfo::InitAsDefaultInstance() {
}
class HostInfo::_Internal {
 public:
};

HostInfo::HostInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.HostInfo)
}
HostInfo::HostInfo(const HostInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hostid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hostid().empty()) {
    hostid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hostid(),
      GetArena());
  }
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hostname().empty()) {
    hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hostname(),
      GetArena());
  }
  os_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_os().empty()) {
    os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_os(),
      GetArena());
  }
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_platform().empty()) {
    platform_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_platform(),
      GetArena());
  }
  kernelversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_kernelversion().empty()) {
    kernelversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_kernelversion(),
      GetArena());
  }
  kernelarch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_kernelarch().empty()) {
    kernelarch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_kernelarch(),
      GetArena());
  }
  virtualizationsystem_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_virtualizationsystem().empty()) {
    virtualizationsystem_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_virtualizationsystem(),
      GetArena());
  }
  virtualizationrole_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_virtualizationrole().empty()) {
    virtualizationrole_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_virtualizationrole(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.HostInfo)
}

void HostInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HostInfo_task_2eproto.base);
  hostid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kernelversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kernelarch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  virtualizationsystem_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  virtualizationrole_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HostInfo::~HostInfo() {
  // @@protoc_insertion_point(destructor:cedana.services.task.HostInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HostInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hostid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kernelversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kernelarch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  virtualizationsystem_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  virtualizationrole_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HostInfo::ArenaDtor(void* object) {
  HostInfo* _this = reinterpret_cast< HostInfo* >(object);
  (void)_this;
}
void HostInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HostInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostInfo& HostInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostInfo_task_2eproto.base);
  return *internal_default_instance();
}


void HostInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.HostInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hostid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hostname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  os_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  platform_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kernelversion_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kernelarch_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  virtualizationsystem_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  virtualizationrole_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string HostID = 1[json_name = "HostID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hostid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.HostInfo.HostID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Hostname = 4[json_name = "Hostname"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_hostname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.HostInfo.Hostname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string OS = 5[json_name = "OS"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_os();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.HostInfo.OS"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Platform = 6[json_name = "Platform"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_platform();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.HostInfo.Platform"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string KernelVersion = 7[json_name = "KernelVersion"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_kernelversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.HostInfo.KernelVersion"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string KernelArch = 8[json_name = "KernelArch"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_kernelarch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.HostInfo.KernelArch"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string VirtualizationSystem = 9[json_name = "VirtualizationSystem"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_virtualizationsystem();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.HostInfo.VirtualizationSystem"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string VirtualizationRole = 10[json_name = "VirtualizationRole"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_virtualizationrole();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.HostInfo.VirtualizationRole"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.HostInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string HostID = 1[json_name = "HostID"];
  if (this->hostid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostid().data(), static_cast<int>(this->_internal_hostid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.HostInfo.HostID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hostid(), target);
  }

  // string Hostname = 4[json_name = "Hostname"];
  if (this->hostname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.HostInfo.Hostname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hostname(), target);
  }

  // string OS = 5[json_name = "OS"];
  if (this->os().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_os().data(), static_cast<int>(this->_internal_os().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.HostInfo.OS");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_os(), target);
  }

  // string Platform = 6[json_name = "Platform"];
  if (this->platform().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_platform().data(), static_cast<int>(this->_internal_platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.HostInfo.Platform");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_platform(), target);
  }

  // string KernelVersion = 7[json_name = "KernelVersion"];
  if (this->kernelversion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kernelversion().data(), static_cast<int>(this->_internal_kernelversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.HostInfo.KernelVersion");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_kernelversion(), target);
  }

  // string KernelArch = 8[json_name = "KernelArch"];
  if (this->kernelarch().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kernelarch().data(), static_cast<int>(this->_internal_kernelarch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.HostInfo.KernelArch");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_kernelarch(), target);
  }

  // string VirtualizationSystem = 9[json_name = "VirtualizationSystem"];
  if (this->virtualizationsystem().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_virtualizationsystem().data(), static_cast<int>(this->_internal_virtualizationsystem().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.HostInfo.VirtualizationSystem");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_virtualizationsystem(), target);
  }

  // string VirtualizationRole = 10[json_name = "VirtualizationRole"];
  if (this->virtualizationrole().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_virtualizationrole().data(), static_cast<int>(this->_internal_virtualizationrole().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.HostInfo.VirtualizationRole");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_virtualizationrole(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.HostInfo)
  return target;
}

size_t HostInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.HostInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string HostID = 1[json_name = "HostID"];
  if (this->hostid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostid());
  }

  // string Hostname = 4[json_name = "Hostname"];
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // string OS = 5[json_name = "OS"];
  if (this->os().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_os());
  }

  // string Platform = 6[json_name = "Platform"];
  if (this->platform().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_platform());
  }

  // string KernelVersion = 7[json_name = "KernelVersion"];
  if (this->kernelversion().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kernelversion());
  }

  // string KernelArch = 8[json_name = "KernelArch"];
  if (this->kernelarch().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kernelarch());
  }

  // string VirtualizationSystem = 9[json_name = "VirtualizationSystem"];
  if (this->virtualizationsystem().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_virtualizationsystem());
  }

  // string VirtualizationRole = 10[json_name = "VirtualizationRole"];
  if (this->virtualizationrole().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_virtualizationrole());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.HostInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const HostInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.HostInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.HostInfo)
    MergeFrom(*source);
  }
}

void HostInfo::MergeFrom(const HostInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.HostInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hostid().size() > 0) {
    _internal_set_hostid(from._internal_hostid());
  }
  if (from.hostname().size() > 0) {
    _internal_set_hostname(from._internal_hostname());
  }
  if (from.os().size() > 0) {
    _internal_set_os(from._internal_os());
  }
  if (from.platform().size() > 0) {
    _internal_set_platform(from._internal_platform());
  }
  if (from.kernelversion().size() > 0) {
    _internal_set_kernelversion(from._internal_kernelversion());
  }
  if (from.kernelarch().size() > 0) {
    _internal_set_kernelarch(from._internal_kernelarch());
  }
  if (from.virtualizationsystem().size() > 0) {
    _internal_set_virtualizationsystem(from._internal_virtualizationsystem());
  }
  if (from.virtualizationrole().size() > 0) {
    _internal_set_virtualizationrole(from._internal_virtualizationrole());
  }
}

void HostInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.HostInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostInfo::CopyFrom(const HostInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.HostInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostInfo::IsInitialized() const {
  return true;
}

void HostInfo::InternalSwap(HostInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hostid_.Swap(&other->hostid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hostname_.Swap(&other->hostname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  os_.Swap(&other->os_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  platform_.Swap(&other->platform_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kernelversion_.Swap(&other->kernelversion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kernelarch_.Swap(&other->kernelarch_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  virtualizationsystem_.Swap(&other->virtualizationsystem_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  virtualizationrole_.Swap(&other->virtualizationrole_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata HostInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CPUInfo::InitAsDefaultInstance() {
}
class CPUInfo::_Internal {
 public:
};

CPUInfo::CPUInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.CPUInfo)
}
CPUInfo::CPUInfo(const CPUInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vendorid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vendorid().empty()) {
    vendorid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vendorid(),
      GetArena());
  }
  family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_family().empty()) {
    family_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_family(),
      GetArena());
  }
  physicalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_physicalid().empty()) {
    physicalid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_physicalid(),
      GetArena());
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&cpu_) -
    reinterpret_cast<char*>(&count_)) + sizeof(cpu_));
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.CPUInfo)
}

void CPUInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CPUInfo_task_2eproto.base);
  vendorid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  physicalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cpu_) -
      reinterpret_cast<char*>(&count_)) + sizeof(cpu_));
}

CPUInfo::~CPUInfo() {
  // @@protoc_insertion_point(destructor:cedana.services.task.CPUInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPUInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vendorid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  family_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  physicalid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPUInfo::ArenaDtor(void* object) {
  CPUInfo* _this = reinterpret_cast< CPUInfo* >(object);
  (void)_this;
}
void CPUInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPUInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPUInfo& CPUInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CPUInfo_task_2eproto.base);
  return *internal_default_instance();
}


void CPUInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.CPUInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vendorid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  family_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  physicalid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cpu_) -
      reinterpret_cast<char*>(&count_)) + sizeof(cpu_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPUInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Count = 1[json_name = "Count"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CPU = 2[json_name = "CPU"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string VendorID = 3[json_name = "VendorID"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_vendorid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.CPUInfo.VendorID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Family = 4[json_name = "Family"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_family();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.CPUInfo.Family"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string PhysicalID = 5[json_name = "PhysicalID"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_physicalid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.CPUInfo.PhysicalID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPUInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.CPUInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Count = 1[json_name = "Count"];
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_count(), target);
  }

  // int32 CPU = 2[json_name = "CPU"];
  if (this->cpu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cpu(), target);
  }

  // string VendorID = 3[json_name = "VendorID"];
  if (this->vendorid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendorid().data(), static_cast<int>(this->_internal_vendorid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.CPUInfo.VendorID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_vendorid(), target);
  }

  // string Family = 4[json_name = "Family"];
  if (this->family().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_family().data(), static_cast<int>(this->_internal_family().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.CPUInfo.Family");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_family(), target);
  }

  // string PhysicalID = 5[json_name = "PhysicalID"];
  if (this->physicalid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_physicalid().data(), static_cast<int>(this->_internal_physicalid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.CPUInfo.PhysicalID");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_physicalid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.CPUInfo)
  return target;
}

size_t CPUInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.CPUInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string VendorID = 3[json_name = "VendorID"];
  if (this->vendorid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendorid());
  }

  // string Family = 4[json_name = "Family"];
  if (this->family().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_family());
  }

  // string PhysicalID = 5[json_name = "PhysicalID"];
  if (this->physicalid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_physicalid());
  }

  // int32 Count = 1[json_name = "Count"];
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  // int32 CPU = 2[json_name = "CPU"];
  if (this->cpu() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cpu());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPUInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.CPUInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CPUInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPUInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.CPUInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.CPUInfo)
    MergeFrom(*source);
  }
}

void CPUInfo::MergeFrom(const CPUInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.CPUInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vendorid().size() > 0) {
    _internal_set_vendorid(from._internal_vendorid());
  }
  if (from.family().size() > 0) {
    _internal_set_family(from._internal_family());
  }
  if (from.physicalid().size() > 0) {
    _internal_set_physicalid(from._internal_physicalid());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.cpu() != 0) {
    _internal_set_cpu(from._internal_cpu());
  }
}

void CPUInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.CPUInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPUInfo::CopyFrom(const CPUInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.CPUInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPUInfo::IsInitialized() const {
  return true;
}

void CPUInfo::InternalSwap(CPUInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vendorid_.Swap(&other->vendorid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  family_.Swap(&other->family_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  physicalid_.Swap(&other->physicalid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPUInfo, cpu_)
      + sizeof(CPUInfo::cpu_)
      - PROTOBUF_FIELD_OFFSET(CPUInfo, count_)>(
          reinterpret_cast<char*>(&count_),
          reinterpret_cast<char*>(&other->count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPUInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemoryInfo::InitAsDefaultInstance() {
}
class MemoryInfo::_Internal {
 public:
};

MemoryInfo::MemoryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.MemoryInfo)
}
MemoryInfo::MemoryInfo(const MemoryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&used_) -
    reinterpret_cast<char*>(&total_)) + sizeof(used_));
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.MemoryInfo)
}

void MemoryInfo::SharedCtor() {
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&used_) -
      reinterpret_cast<char*>(&total_)) + sizeof(used_));
}

MemoryInfo::~MemoryInfo() {
  // @@protoc_insertion_point(destructor:cedana.services.task.MemoryInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MemoryInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MemoryInfo::ArenaDtor(void* object) {
  MemoryInfo* _this = reinterpret_cast< MemoryInfo* >(object);
  (void)_this;
}
void MemoryInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemoryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoryInfo& MemoryInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemoryInfo_task_2eproto.base);
  return *internal_default_instance();
}


void MemoryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.MemoryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&used_) -
      reinterpret_cast<char*>(&total_)) + sizeof(used_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemoryInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 Total = 1[json_name = "Total"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Available = 2[json_name = "Available"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Used = 3[json_name = "Used"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemoryInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.MemoryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Total = 1[json_name = "Total"];
  if (this->total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_total(), target);
  }

  // uint64 Available = 2[json_name = "Available"];
  if (this->available() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_available(), target);
  }

  // uint64 Used = 3[json_name = "Used"];
  if (this->used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_used(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.MemoryInfo)
  return target;
}

size_t MemoryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.MemoryInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 Total = 1[json_name = "Total"];
  if (this->total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_total());
  }

  // uint64 Available = 2[json_name = "Available"];
  if (this->available() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_available());
  }

  // uint64 Used = 3[json_name = "Used"];
  if (this->used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_used());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.MemoryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemoryInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.MemoryInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.MemoryInfo)
    MergeFrom(*source);
  }
}

void MemoryInfo::MergeFrom(const MemoryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.MemoryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.total() != 0) {
    _internal_set_total(from._internal_total());
  }
  if (from.available() != 0) {
    _internal_set_available(from._internal_available());
  }
  if (from.used() != 0) {
    _internal_set_used(from._internal_used());
  }
}

void MemoryInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.MemoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryInfo::CopyFrom(const MemoryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.MemoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryInfo::IsInitialized() const {
  return true;
}

void MemoryInfo::InternalSwap(MemoryInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemoryInfo, used_)
      + sizeof(MemoryInfo::used_)
      - PROTOBUF_FIELD_OFFSET(MemoryInfo, total_)>(
          reinterpret_cast<char*>(&total_),
          reinterpret_cast<char*>(&other->total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OpenFilesStat::InitAsDefaultInstance() {
}
class OpenFilesStat::_Internal {
 public:
};

OpenFilesStat::OpenFilesStat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.OpenFilesStat)
}
OpenFilesStat::OpenFilesStat(const OpenFilesStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path(),
      GetArena());
  }
  mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mode().empty()) {
    mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mode(),
      GetArena());
  }
  ::memcpy(&fd_, &from.fd_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_) -
    reinterpret_cast<char*>(&fd_)) + sizeof(stream_));
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.OpenFilesStat)
}

void OpenFilesStat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpenFilesStat_task_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&fd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_) -
      reinterpret_cast<char*>(&fd_)) + sizeof(stream_));
}

OpenFilesStat::~OpenFilesStat() {
  // @@protoc_insertion_point(destructor:cedana.services.task.OpenFilesStat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpenFilesStat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpenFilesStat::ArenaDtor(void* object) {
  OpenFilesStat* _this = reinterpret_cast< OpenFilesStat* >(object);
  (void)_this;
}
void OpenFilesStat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpenFilesStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpenFilesStat& OpenFilesStat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpenFilesStat_task_2eproto.base);
  return *internal_default_instance();
}


void OpenFilesStat::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.OpenFilesStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&fd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_) -
      reinterpret_cast<char*>(&fd_)) + sizeof(stream_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenFilesStat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Path = 1[json_name = "Path"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.OpenFilesStat.Path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Fd = 2[json_name = "Fd"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Mode = 3[json_name = "Mode"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.OpenFilesStat.Mode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedana.services.task.OpenFilesStat.StreamType Stream = 5[json_name = "Stream"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stream(static_cast<::cedana::services::task::OpenFilesStat_StreamType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpenFilesStat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.OpenFilesStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Path = 1[json_name = "Path"];
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.OpenFilesStat.Path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // uint64 Fd = 2[json_name = "Fd"];
  if (this->fd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_fd(), target);
  }

  // string Mode = 3[json_name = "Mode"];
  if (this->mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mode().data(), static_cast<int>(this->_internal_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.OpenFilesStat.Mode");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mode(), target);
  }

  // .cedana.services.task.OpenFilesStat.StreamType Stream = 5[json_name = "Stream"];
  if (this->stream() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_stream(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.OpenFilesStat)
  return target;
}

size_t OpenFilesStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.OpenFilesStat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Path = 1[json_name = "Path"];
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string Mode = 3[json_name = "Mode"];
  if (this->mode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mode());
  }

  // uint64 Fd = 2[json_name = "Fd"];
  if (this->fd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_fd());
  }

  // .cedana.services.task.OpenFilesStat.StreamType Stream = 5[json_name = "Stream"];
  if (this->stream() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stream());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenFilesStat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.OpenFilesStat)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenFilesStat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpenFilesStat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.OpenFilesStat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.OpenFilesStat)
    MergeFrom(*source);
  }
}

void OpenFilesStat::MergeFrom(const OpenFilesStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.OpenFilesStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.mode().size() > 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.fd() != 0) {
    _internal_set_fd(from._internal_fd());
  }
  if (from.stream() != 0) {
    _internal_set_stream(from._internal_stream());
  }
}

void OpenFilesStat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.OpenFilesStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenFilesStat::CopyFrom(const OpenFilesStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.OpenFilesStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenFilesStat::IsInitialized() const {
  return true;
}

void OpenFilesStat::InternalSwap(OpenFilesStat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mode_.Swap(&other->mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpenFilesStat, stream_)
      + sizeof(OpenFilesStat::stream_)
      - PROTOBUF_FIELD_OFFSET(OpenFilesStat, fd_)>(
          reinterpret_cast<char*>(&fd_),
          reinterpret_cast<char*>(&other->fd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenFilesStat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConnectionStat::InitAsDefaultInstance() {
  ::cedana::services::task::_ConnectionStat_default_instance_._instance.get_mutable()->laddr_ = const_cast< ::cedana::services::task::Addr*>(
      ::cedana::services::task::Addr::internal_default_instance());
  ::cedana::services::task::_ConnectionStat_default_instance_._instance.get_mutable()->raddr_ = const_cast< ::cedana::services::task::Addr*>(
      ::cedana::services::task::Addr::internal_default_instance());
}
class ConnectionStat::_Internal {
 public:
  static const ::cedana::services::task::Addr& laddr(const ConnectionStat* msg);
  static const ::cedana::services::task::Addr& raddr(const ConnectionStat* msg);
};

const ::cedana::services::task::Addr&
ConnectionStat::_Internal::laddr(const ConnectionStat* msg) {
  return *msg->laddr_;
}
const ::cedana::services::task::Addr&
ConnectionStat::_Internal::raddr(const ConnectionStat* msg) {
  return *msg->raddr_;
}
ConnectionStat::ConnectionStat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  uids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.ConnectionStat)
}
ConnectionStat::ConnectionStat(const ConnectionStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      uids_(from.uids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status(),
      GetArena());
  }
  if (from._internal_has_laddr()) {
    laddr_ = new ::cedana::services::task::Addr(*from.laddr_);
  } else {
    laddr_ = nullptr;
  }
  if (from._internal_has_raddr()) {
    raddr_ = new ::cedana::services::task::Addr(*from.raddr_);
  } else {
    raddr_ = nullptr;
  }
  ::memcpy(&fd_, &from.fd_,
    static_cast<size_t>(reinterpret_cast<char*>(&pid_) -
    reinterpret_cast<char*>(&fd_)) + sizeof(pid_));
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.ConnectionStat)
}

void ConnectionStat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnectionStat_task_2eproto.base);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&laddr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pid_) -
      reinterpret_cast<char*>(&laddr_)) + sizeof(pid_));
}

ConnectionStat::~ConnectionStat() {
  // @@protoc_insertion_point(destructor:cedana.services.task.ConnectionStat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConnectionStat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete laddr_;
  if (this != internal_default_instance()) delete raddr_;
}

void ConnectionStat::ArenaDtor(void* object) {
  ConnectionStat* _this = reinterpret_cast< ConnectionStat* >(object);
  (void)_this;
}
void ConnectionStat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectionStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectionStat& ConnectionStat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectionStat_task_2eproto.base);
  return *internal_default_instance();
}


void ConnectionStat::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.ConnectionStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uids_.Clear();
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && laddr_ != nullptr) {
    delete laddr_;
  }
  laddr_ = nullptr;
  if (GetArena() == nullptr && raddr_ != nullptr) {
    delete raddr_;
  }
  raddr_ = nullptr;
  ::memset(&fd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pid_) -
      reinterpret_cast<char*>(&fd_)) + sizeof(pid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionStat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 Fd = 1[json_name = "Fd"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Family = 2[json_name = "Family"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          family_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Type = 3[json_name = "Type"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedana.services.task.Addr Laddr = 4[json_name = "Laddr"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_laddr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedana.services.task.Addr Raddr = 5[json_name = "Raddr"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_raddr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Status = 6[json_name = "Status"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ConnectionStat.Status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 UIDs = 7[json_name = "UIDs"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_uids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_uids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PID = 8[json_name = "PID"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectionStat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.ConnectionStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Fd = 1[json_name = "Fd"];
  if (this->fd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fd(), target);
  }

  // uint32 Family = 2[json_name = "Family"];
  if (this->family() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_family(), target);
  }

  // uint32 Type = 3[json_name = "Type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type(), target);
  }

  // .cedana.services.task.Addr Laddr = 4[json_name = "Laddr"];
  if (this->has_laddr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::laddr(this), target, stream);
  }

  // .cedana.services.task.Addr Raddr = 5[json_name = "Raddr"];
  if (this->has_raddr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::raddr(this), target, stream);
  }

  // string Status = 6[json_name = "Status"];
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ConnectionStat.Status");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_status(), target);
  }

  // repeated int32 UIDs = 7[json_name = "UIDs"];
  {
    int byte_size = _uids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_uids(), byte_size, target);
    }
  }

  // int32 PID = 8[json_name = "PID"];
  if (this->pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.ConnectionStat)
  return target;
}

size_t ConnectionStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.ConnectionStat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 UIDs = 7[json_name = "UIDs"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->uids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string Status = 6[json_name = "Status"];
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .cedana.services.task.Addr Laddr = 4[json_name = "Laddr"];
  if (this->has_laddr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *laddr_);
  }

  // .cedana.services.task.Addr Raddr = 5[json_name = "Raddr"];
  if (this->has_raddr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *raddr_);
  }

  // uint32 Fd = 1[json_name = "Fd"];
  if (this->fd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fd());
  }

  // uint32 Family = 2[json_name = "Family"];
  if (this->family() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_family());
  }

  // uint32 Type = 3[json_name = "Type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // int32 PID = 8[json_name = "PID"];
  if (this->pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectionStat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.ConnectionStat)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectionStat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectionStat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.ConnectionStat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.ConnectionStat)
    MergeFrom(*source);
  }
}

void ConnectionStat::MergeFrom(const ConnectionStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.ConnectionStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uids_.MergeFrom(from.uids_);
  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.has_laddr()) {
    _internal_mutable_laddr()->::cedana::services::task::Addr::MergeFrom(from._internal_laddr());
  }
  if (from.has_raddr()) {
    _internal_mutable_raddr()->::cedana::services::task::Addr::MergeFrom(from._internal_raddr());
  }
  if (from.fd() != 0) {
    _internal_set_fd(from._internal_fd());
  }
  if (from.family() != 0) {
    _internal_set_family(from._internal_family());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
}

void ConnectionStat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.ConnectionStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionStat::CopyFrom(const ConnectionStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.ConnectionStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionStat::IsInitialized() const {
  return true;
}

void ConnectionStat::InternalSwap(ConnectionStat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  uids_.InternalSwap(&other->uids_);
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnectionStat, pid_)
      + sizeof(ConnectionStat::pid_)
      - PROTOBUF_FIELD_OFFSET(ConnectionStat, laddr_)>(
          reinterpret_cast<char*>(&laddr_),
          reinterpret_cast<char*>(&other->laddr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionStat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Addr::InitAsDefaultInstance() {
}
class Addr::_Internal {
 public:
};

Addr::Addr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.Addr)
}
Addr::Addr(const Addr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.Addr)
}

void Addr::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Addr_task_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

Addr::~Addr() {
  // @@protoc_insertion_point(destructor:cedana.services.task.Addr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Addr::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Addr::ArenaDtor(void* object) {
  Addr* _this = reinterpret_cast< Addr* >(object);
  (void)_this;
}
void Addr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Addr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Addr& Addr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Addr_task_2eproto.base);
  return *internal_default_instance();
}


void Addr::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.Addr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Addr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string IP = 1[json_name = "IP"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.Addr.IP"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Port = 2[json_name = "Port"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Addr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.Addr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string IP = 1[json_name = "IP"];
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.Addr.IP");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // uint32 Port = 2[json_name = "Port"];
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.Addr)
  return target;
}

size_t Addr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.Addr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string IP = 1[json_name = "IP"];
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // uint32 Port = 2[json_name = "Port"];
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Addr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.Addr)
  GOOGLE_DCHECK_NE(&from, this);
  const Addr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Addr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.Addr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.Addr)
    MergeFrom(*source);
  }
}

void Addr::MergeFrom(const Addr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.Addr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void Addr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.Addr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Addr::CopyFrom(const Addr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.Addr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Addr::IsInitialized() const {
  return true;
}

void Addr::InternalSwap(Addr* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Addr::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessStateStreamingArgs::InitAsDefaultInstance() {
}
class ProcessStateStreamingArgs::_Internal {
 public:
};

ProcessStateStreamingArgs::ProcessStateStreamingArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.ProcessStateStreamingArgs)
}
ProcessStateStreamingArgs::ProcessStateStreamingArgs(const ProcessStateStreamingArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  jid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_jid().empty()) {
    jid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_jid(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.ProcessStateStreamingArgs)
}

void ProcessStateStreamingArgs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessStateStreamingArgs_task_2eproto.base);
  jid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProcessStateStreamingArgs::~ProcessStateStreamingArgs() {
  // @@protoc_insertion_point(destructor:cedana.services.task.ProcessStateStreamingArgs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcessStateStreamingArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  jid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProcessStateStreamingArgs::ArenaDtor(void* object) {
  ProcessStateStreamingArgs* _this = reinterpret_cast< ProcessStateStreamingArgs* >(object);
  (void)_this;
}
void ProcessStateStreamingArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessStateStreamingArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessStateStreamingArgs& ProcessStateStreamingArgs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessStateStreamingArgs_task_2eproto.base);
  return *internal_default_instance();
}


void ProcessStateStreamingArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.ProcessStateStreamingArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessStateStreamingArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string JID = 1[json_name = "JID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_jid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ProcessStateStreamingArgs.JID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessStateStreamingArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.ProcessStateStreamingArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string JID = 1[json_name = "JID"];
  if (this->jid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_jid().data(), static_cast<int>(this->_internal_jid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ProcessStateStreamingArgs.JID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_jid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.ProcessStateStreamingArgs)
  return target;
}

size_t ProcessStateStreamingArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.ProcessStateStreamingArgs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string JID = 1[json_name = "JID"];
  if (this->jid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_jid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessStateStreamingArgs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.ProcessStateStreamingArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessStateStreamingArgs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessStateStreamingArgs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.ProcessStateStreamingArgs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.ProcessStateStreamingArgs)
    MergeFrom(*source);
  }
}

void ProcessStateStreamingArgs::MergeFrom(const ProcessStateStreamingArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.ProcessStateStreamingArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.jid().size() > 0) {
    _internal_set_jid(from._internal_jid());
  }
}

void ProcessStateStreamingArgs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.ProcessStateStreamingArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessStateStreamingArgs::CopyFrom(const ProcessStateStreamingArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.ProcessStateStreamingArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessStateStreamingArgs::IsInitialized() const {
  return true;
}

void ProcessStateStreamingArgs::InternalSwap(ProcessStateStreamingArgs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  jid_.Swap(&other->jid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessStateStreamingArgs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckpointReason::InitAsDefaultInstance() {
}
class CheckpointReason::_Internal {
 public:
};

CheckpointReason::CheckpointReason(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.CheckpointReason)
}
CheckpointReason::CheckpointReason(const CheckpointReason& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.CheckpointReason)
}

void CheckpointReason::SharedCtor() {
  reason_ = 0;
}

CheckpointReason::~CheckpointReason() {
  // @@protoc_insertion_point(destructor:cedana.services.task.CheckpointReason)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckpointReason::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CheckpointReason::ArenaDtor(void* object) {
  CheckpointReason* _this = reinterpret_cast< CheckpointReason* >(object);
  (void)_this;
}
void CheckpointReason::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckpointReason::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckpointReason& CheckpointReason::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckpointReason_task_2eproto.base);
  return *internal_default_instance();
}


void CheckpointReason::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.CheckpointReason)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckpointReason::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cedana.services.task.CheckpointReason.CheckpointReasonEnum Reason = 1[json_name = "Reason"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::cedana::services::task::CheckpointReason_CheckpointReasonEnum>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckpointReason::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.CheckpointReason)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cedana.services.task.CheckpointReason.CheckpointReasonEnum Reason = 1[json_name = "Reason"];
  if (this->reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.CheckpointReason)
  return target;
}

size_t CheckpointReason::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.CheckpointReason)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cedana.services.task.CheckpointReason.CheckpointReasonEnum Reason = 1[json_name = "Reason"];
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckpointReason::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.CheckpointReason)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckpointReason* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckpointReason>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.CheckpointReason)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.CheckpointReason)
    MergeFrom(*source);
  }
}

void CheckpointReason::MergeFrom(const CheckpointReason& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.CheckpointReason)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void CheckpointReason::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.CheckpointReason)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckpointReason::CopyFrom(const CheckpointReason& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.CheckpointReason)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckpointReason::IsInitialized() const {
  return true;
}

void CheckpointReason::InternalSwap(CheckpointReason* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckpointReason::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartAttachArgs::InitAsDefaultInstance() {
  ::cedana::services::task::_StartAttachArgs_default_instance_._instance.get_mutable()->args_ = const_cast< ::cedana::services::task::StartArgs*>(
      ::cedana::services::task::StartArgs::internal_default_instance());
}
class StartAttachArgs::_Internal {
 public:
  static const ::cedana::services::task::StartArgs& args(const StartAttachArgs* msg);
};

const ::cedana::services::task::StartArgs&
StartAttachArgs::_Internal::args(const StartAttachArgs* msg) {
  return *msg->args_;
}
StartAttachArgs::StartAttachArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.StartAttachArgs)
}
StartAttachArgs::StartAttachArgs(const StartAttachArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stdin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stdin().empty()) {
    stdin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_stdin(),
      GetArena());
  }
  if (from._internal_has_args()) {
    args_ = new ::cedana::services::task::StartArgs(*from.args_);
  } else {
    args_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.StartAttachArgs)
}

void StartAttachArgs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartAttachArgs_task_2eproto.base);
  stdin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_ = nullptr;
}

StartAttachArgs::~StartAttachArgs() {
  // @@protoc_insertion_point(destructor:cedana.services.task.StartAttachArgs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartAttachArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stdin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete args_;
}

void StartAttachArgs::ArenaDtor(void* object) {
  StartAttachArgs* _this = reinterpret_cast< StartAttachArgs* >(object);
  (void)_this;
}
void StartAttachArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartAttachArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartAttachArgs& StartAttachArgs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartAttachArgs_task_2eproto.base);
  return *internal_default_instance();
}


void StartAttachArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.StartAttachArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stdin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && args_ != nullptr) {
    delete args_;
  }
  args_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartAttachArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cedana.services.task.StartArgs Args = 1[json_name = "Args"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_args(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Stdin = 2[json_name = "Stdin"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_stdin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.StartAttachArgs.Stdin"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartAttachArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.StartAttachArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cedana.services.task.StartArgs Args = 1[json_name = "Args"];
  if (this->has_args()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::args(this), target, stream);
  }

  // string Stdin = 2[json_name = "Stdin"];
  if (this->stdin().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stdin().data(), static_cast<int>(this->_internal_stdin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.StartAttachArgs.Stdin");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stdin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.StartAttachArgs)
  return target;
}

size_t StartAttachArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.StartAttachArgs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Stdin = 2[json_name = "Stdin"];
  if (this->stdin().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stdin());
  }

  // .cedana.services.task.StartArgs Args = 1[json_name = "Args"];
  if (this->has_args()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *args_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartAttachArgs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.StartAttachArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const StartAttachArgs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartAttachArgs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.StartAttachArgs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.StartAttachArgs)
    MergeFrom(*source);
  }
}

void StartAttachArgs::MergeFrom(const StartAttachArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.StartAttachArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stdin().size() > 0) {
    _internal_set_stdin(from._internal_stdin());
  }
  if (from.has_args()) {
    _internal_mutable_args()->::cedana::services::task::StartArgs::MergeFrom(from._internal_args());
  }
}

void StartAttachArgs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.StartAttachArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartAttachArgs::CopyFrom(const StartAttachArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.StartAttachArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartAttachArgs::IsInitialized() const {
  return true;
}

void StartAttachArgs::InternalSwap(StartAttachArgs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stdin_.Swap(&other->stdin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(args_, other->args_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartAttachArgs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartAttachResp::InitAsDefaultInstance() {
}
class StartAttachResp::_Internal {
 public:
};

StartAttachResp::StartAttachResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.StartAttachResp)
}
StartAttachResp::StartAttachResp(const StartAttachResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stdout_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stdout().empty()) {
    stdout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_stdout(),
      GetArena());
  }
  stderr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stderr().empty()) {
    stderr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_stderr(),
      GetArena());
  }
  exitcode_ = from.exitcode_;
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.StartAttachResp)
}

void StartAttachResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartAttachResp_task_2eproto.base);
  stdout_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stderr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exitcode_ = 0;
}

StartAttachResp::~StartAttachResp() {
  // @@protoc_insertion_point(destructor:cedana.services.task.StartAttachResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartAttachResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stdout_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stderr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StartAttachResp::ArenaDtor(void* object) {
  StartAttachResp* _this = reinterpret_cast< StartAttachResp* >(object);
  (void)_this;
}
void StartAttachResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartAttachResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartAttachResp& StartAttachResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartAttachResp_task_2eproto.base);
  return *internal_default_instance();
}


void StartAttachResp::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.StartAttachResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stdout_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  stderr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exitcode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartAttachResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Stdout = 1[json_name = "Stdout"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stdout();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.StartAttachResp.Stdout"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Stderr = 2[json_name = "Stderr"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_stderr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.StartAttachResp.Stderr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ExitCode = 3[json_name = "ExitCode"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          exitcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartAttachResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.StartAttachResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Stdout = 1[json_name = "Stdout"];
  if (this->stdout().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stdout().data(), static_cast<int>(this->_internal_stdout().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.StartAttachResp.Stdout");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stdout(), target);
  }

  // string Stderr = 2[json_name = "Stderr"];
  if (this->stderr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stderr().data(), static_cast<int>(this->_internal_stderr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.StartAttachResp.Stderr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stderr(), target);
  }

  // int32 ExitCode = 3[json_name = "ExitCode"];
  if (this->exitcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_exitcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.StartAttachResp)
  return target;
}

size_t StartAttachResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.StartAttachResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Stdout = 1[json_name = "Stdout"];
  if (this->stdout().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stdout());
  }

  // string Stderr = 2[json_name = "Stderr"];
  if (this->stderr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stderr());
  }

  // int32 ExitCode = 3[json_name = "ExitCode"];
  if (this->exitcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_exitcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartAttachResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.StartAttachResp)
  GOOGLE_DCHECK_NE(&from, this);
  const StartAttachResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartAttachResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.StartAttachResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.StartAttachResp)
    MergeFrom(*source);
  }
}

void StartAttachResp::MergeFrom(const StartAttachResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.StartAttachResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stdout().size() > 0) {
    _internal_set_stdout(from._internal_stdout());
  }
  if (from.stderr().size() > 0) {
    _internal_set_stderr(from._internal_stderr());
  }
  if (from.exitcode() != 0) {
    _internal_set_exitcode(from._internal_exitcode());
  }
}

void StartAttachResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.StartAttachResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartAttachResp::CopyFrom(const StartAttachResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.StartAttachResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartAttachResp::IsInitialized() const {
  return true;
}

void StartAttachResp::InternalSwap(StartAttachResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stdout_.Swap(&other->stdout_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  stderr_.Swap(&other->stderr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(exitcode_, other->exitcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartAttachResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RestoreAttachArgs::InitAsDefaultInstance() {
  ::cedana::services::task::_RestoreAttachArgs_default_instance_._instance.get_mutable()->args_ = const_cast< ::cedana::services::task::RestoreArgs*>(
      ::cedana::services::task::RestoreArgs::internal_default_instance());
}
class RestoreAttachArgs::_Internal {
 public:
  static const ::cedana::services::task::RestoreArgs& args(const RestoreAttachArgs* msg);
};

const ::cedana::services::task::RestoreArgs&
RestoreAttachArgs::_Internal::args(const RestoreAttachArgs* msg) {
  return *msg->args_;
}
RestoreAttachArgs::RestoreAttachArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.RestoreAttachArgs)
}
RestoreAttachArgs::RestoreAttachArgs(const RestoreAttachArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stdin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stdin().empty()) {
    stdin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_stdin(),
      GetArena());
  }
  if (from._internal_has_args()) {
    args_ = new ::cedana::services::task::RestoreArgs(*from.args_);
  } else {
    args_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.RestoreAttachArgs)
}

void RestoreAttachArgs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RestoreAttachArgs_task_2eproto.base);
  stdin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_ = nullptr;
}

RestoreAttachArgs::~RestoreAttachArgs() {
  // @@protoc_insertion_point(destructor:cedana.services.task.RestoreAttachArgs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RestoreAttachArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stdin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete args_;
}

void RestoreAttachArgs::ArenaDtor(void* object) {
  RestoreAttachArgs* _this = reinterpret_cast< RestoreAttachArgs* >(object);
  (void)_this;
}
void RestoreAttachArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RestoreAttachArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RestoreAttachArgs& RestoreAttachArgs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RestoreAttachArgs_task_2eproto.base);
  return *internal_default_instance();
}


void RestoreAttachArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.RestoreAttachArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stdin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && args_ != nullptr) {
    delete args_;
  }
  args_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RestoreAttachArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cedana.services.task.RestoreArgs Args = 1[json_name = "Args"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_args(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Stdin = 2[json_name = "Stdin"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_stdin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RestoreAttachArgs.Stdin"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RestoreAttachArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.RestoreAttachArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cedana.services.task.RestoreArgs Args = 1[json_name = "Args"];
  if (this->has_args()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::args(this), target, stream);
  }

  // string Stdin = 2[json_name = "Stdin"];
  if (this->stdin().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stdin().data(), static_cast<int>(this->_internal_stdin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RestoreAttachArgs.Stdin");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stdin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.RestoreAttachArgs)
  return target;
}

size_t RestoreAttachArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.RestoreAttachArgs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Stdin = 2[json_name = "Stdin"];
  if (this->stdin().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stdin());
  }

  // .cedana.services.task.RestoreArgs Args = 1[json_name = "Args"];
  if (this->has_args()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *args_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestoreAttachArgs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.RestoreAttachArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const RestoreAttachArgs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RestoreAttachArgs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.RestoreAttachArgs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.RestoreAttachArgs)
    MergeFrom(*source);
  }
}

void RestoreAttachArgs::MergeFrom(const RestoreAttachArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.RestoreAttachArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stdin().size() > 0) {
    _internal_set_stdin(from._internal_stdin());
  }
  if (from.has_args()) {
    _internal_mutable_args()->::cedana::services::task::RestoreArgs::MergeFrom(from._internal_args());
  }
}

void RestoreAttachArgs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.RestoreAttachArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestoreAttachArgs::CopyFrom(const RestoreAttachArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.RestoreAttachArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestoreAttachArgs::IsInitialized() const {
  return true;
}

void RestoreAttachArgs::InternalSwap(RestoreAttachArgs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stdin_.Swap(&other->stdin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(args_, other->args_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RestoreAttachArgs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RestoreAttachResp::InitAsDefaultInstance() {
}
class RestoreAttachResp::_Internal {
 public:
};

RestoreAttachResp::RestoreAttachResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.RestoreAttachResp)
}
RestoreAttachResp::RestoreAttachResp(const RestoreAttachResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stdout_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stdout().empty()) {
    stdout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_stdout(),
      GetArena());
  }
  stderr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stderr().empty()) {
    stderr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_stderr(),
      GetArena());
  }
  exitcode_ = from.exitcode_;
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.RestoreAttachResp)
}

void RestoreAttachResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RestoreAttachResp_task_2eproto.base);
  stdout_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stderr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exitcode_ = 0;
}

RestoreAttachResp::~RestoreAttachResp() {
  // @@protoc_insertion_point(destructor:cedana.services.task.RestoreAttachResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RestoreAttachResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stdout_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stderr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RestoreAttachResp::ArenaDtor(void* object) {
  RestoreAttachResp* _this = reinterpret_cast< RestoreAttachResp* >(object);
  (void)_this;
}
void RestoreAttachResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RestoreAttachResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RestoreAttachResp& RestoreAttachResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RestoreAttachResp_task_2eproto.base);
  return *internal_default_instance();
}


void RestoreAttachResp::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.RestoreAttachResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stdout_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  stderr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exitcode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RestoreAttachResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Stdout = 1[json_name = "Stdout"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stdout();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RestoreAttachResp.Stdout"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Stderr = 2[json_name = "Stderr"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_stderr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.RestoreAttachResp.Stderr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ExitCode = 3[json_name = "ExitCode"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          exitcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RestoreAttachResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.RestoreAttachResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Stdout = 1[json_name = "Stdout"];
  if (this->stdout().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stdout().data(), static_cast<int>(this->_internal_stdout().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RestoreAttachResp.Stdout");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stdout(), target);
  }

  // string Stderr = 2[json_name = "Stderr"];
  if (this->stderr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stderr().data(), static_cast<int>(this->_internal_stderr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.RestoreAttachResp.Stderr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stderr(), target);
  }

  // int32 ExitCode = 3[json_name = "ExitCode"];
  if (this->exitcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_exitcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.RestoreAttachResp)
  return target;
}

size_t RestoreAttachResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.RestoreAttachResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Stdout = 1[json_name = "Stdout"];
  if (this->stdout().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stdout());
  }

  // string Stderr = 2[json_name = "Stderr"];
  if (this->stderr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stderr());
  }

  // int32 ExitCode = 3[json_name = "ExitCode"];
  if (this->exitcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_exitcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestoreAttachResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.RestoreAttachResp)
  GOOGLE_DCHECK_NE(&from, this);
  const RestoreAttachResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RestoreAttachResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.RestoreAttachResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.RestoreAttachResp)
    MergeFrom(*source);
  }
}

void RestoreAttachResp::MergeFrom(const RestoreAttachResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.RestoreAttachResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stdout().size() > 0) {
    _internal_set_stdout(from._internal_stdout());
  }
  if (from.stderr().size() > 0) {
    _internal_set_stderr(from._internal_stderr());
  }
  if (from.exitcode() != 0) {
    _internal_set_exitcode(from._internal_exitcode());
  }
}

void RestoreAttachResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.RestoreAttachResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestoreAttachResp::CopyFrom(const RestoreAttachResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.RestoreAttachResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestoreAttachResp::IsInitialized() const {
  return true;
}

void RestoreAttachResp::InternalSwap(RestoreAttachResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stdout_.Swap(&other->stdout_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  stderr_.Swap(&other->stderr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(exitcode_, other->exitcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RestoreAttachResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetailedHealthCheckRequest::InitAsDefaultInstance() {
}
class DetailedHealthCheckRequest::_Internal {
 public:
};

DetailedHealthCheckRequest::DetailedHealthCheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  groups_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.DetailedHealthCheckRequest)
}
DetailedHealthCheckRequest::DetailedHealthCheckRequest(const DetailedHealthCheckRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gid_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(gid_));
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.DetailedHealthCheckRequest)
}

void DetailedHealthCheckRequest::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gid_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(gid_));
}

DetailedHealthCheckRequest::~DetailedHealthCheckRequest() {
  // @@protoc_insertion_point(destructor:cedana.services.task.DetailedHealthCheckRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DetailedHealthCheckRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DetailedHealthCheckRequest::ArenaDtor(void* object) {
  DetailedHealthCheckRequest* _this = reinterpret_cast< DetailedHealthCheckRequest* >(object);
  (void)_this;
}
void DetailedHealthCheckRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetailedHealthCheckRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetailedHealthCheckRequest& DetailedHealthCheckRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetailedHealthCheckRequest_task_2eproto.base);
  return *internal_default_instance();
}


void DetailedHealthCheckRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.DetailedHealthCheckRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_.Clear();
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gid_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(gid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetailedHealthCheckRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 UID = 1[json_name = "UID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 GID = 2[json_name = "GID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 Groups = 3[json_name = "Groups"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_groups(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_groups(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetailedHealthCheckRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.DetailedHealthCheckRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 UID = 1[json_name = "UID"];
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // int32 GID = 2[json_name = "GID"];
  if (this->gid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gid(), target);
  }

  // repeated int32 Groups = 3[json_name = "Groups"];
  {
    int byte_size = _groups_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_groups(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.DetailedHealthCheckRequest)
  return target;
}

size_t DetailedHealthCheckRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.DetailedHealthCheckRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Groups = 3[json_name = "Groups"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->groups_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _groups_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 UID = 1[json_name = "UID"];
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 GID = 2[json_name = "GID"];
  if (this->gid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetailedHealthCheckRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.DetailedHealthCheckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DetailedHealthCheckRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetailedHealthCheckRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.DetailedHealthCheckRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.DetailedHealthCheckRequest)
    MergeFrom(*source);
  }
}

void DetailedHealthCheckRequest::MergeFrom(const DetailedHealthCheckRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.DetailedHealthCheckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groups_.MergeFrom(from.groups_);
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.gid() != 0) {
    _internal_set_gid(from._internal_gid());
  }
}

void DetailedHealthCheckRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.DetailedHealthCheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetailedHealthCheckRequest::CopyFrom(const DetailedHealthCheckRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.DetailedHealthCheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailedHealthCheckRequest::IsInitialized() const {
  return true;
}

void DetailedHealthCheckRequest::InternalSwap(DetailedHealthCheckRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  groups_.InternalSwap(&other->groups_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetailedHealthCheckRequest, gid_)
      + sizeof(DetailedHealthCheckRequest::gid_)
      - PROTOBUF_FIELD_OFFSET(DetailedHealthCheckRequest, uid_)>(
          reinterpret_cast<char*>(&uid_),
          reinterpret_cast<char*>(&other->uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetailedHealthCheckRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetailedHealthCheckResponse::InitAsDefaultInstance() {
  ::cedana::services::task::_DetailedHealthCheckResponse_default_instance_._instance.get_mutable()->healthcheckstats_ = const_cast< ::cedana::services::task::HealthCheckStats*>(
      ::cedana::services::task::HealthCheckStats::internal_default_instance());
}
class DetailedHealthCheckResponse::_Internal {
 public:
  static const ::cedana::services::task::HealthCheckStats& healthcheckstats(const DetailedHealthCheckResponse* msg);
};

const ::cedana::services::task::HealthCheckStats&
DetailedHealthCheckResponse::_Internal::healthcheckstats(const DetailedHealthCheckResponse* msg) {
  return *msg->healthcheckstats_;
}
DetailedHealthCheckResponse::DetailedHealthCheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  unhealthyreasons_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.DetailedHealthCheckResponse)
}
DetailedHealthCheckResponse::DetailedHealthCheckResponse(const DetailedHealthCheckResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      unhealthyreasons_(from.unhealthyreasons_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_healthcheckstats()) {
    healthcheckstats_ = new ::cedana::services::task::HealthCheckStats(*from.healthcheckstats_);
  } else {
    healthcheckstats_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.DetailedHealthCheckResponse)
}

void DetailedHealthCheckResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetailedHealthCheckResponse_task_2eproto.base);
  healthcheckstats_ = nullptr;
}

DetailedHealthCheckResponse::~DetailedHealthCheckResponse() {
  // @@protoc_insertion_point(destructor:cedana.services.task.DetailedHealthCheckResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DetailedHealthCheckResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete healthcheckstats_;
}

void DetailedHealthCheckResponse::ArenaDtor(void* object) {
  DetailedHealthCheckResponse* _this = reinterpret_cast< DetailedHealthCheckResponse* >(object);
  (void)_this;
}
void DetailedHealthCheckResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetailedHealthCheckResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetailedHealthCheckResponse& DetailedHealthCheckResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetailedHealthCheckResponse_task_2eproto.base);
  return *internal_default_instance();
}


void DetailedHealthCheckResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.DetailedHealthCheckResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unhealthyreasons_.Clear();
  if (GetArena() == nullptr && healthcheckstats_ != nullptr) {
    delete healthcheckstats_;
  }
  healthcheckstats_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetailedHealthCheckResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cedana.services.task.HealthCheckStats HealthCheckStats = 1[json_name = "HealthCheckStats"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_healthcheckstats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string unhealthyReasons = 2[json_name = "unhealthyReasons"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_unhealthyreasons();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.DetailedHealthCheckResponse.unhealthyReasons"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetailedHealthCheckResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.DetailedHealthCheckResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cedana.services.task.HealthCheckStats HealthCheckStats = 1[json_name = "HealthCheckStats"];
  if (this->has_healthcheckstats()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::healthcheckstats(this), target, stream);
  }

  // repeated string unhealthyReasons = 2[json_name = "unhealthyReasons"];
  for (int i = 0, n = this->_internal_unhealthyreasons_size(); i < n; i++) {
    const auto& s = this->_internal_unhealthyreasons(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.DetailedHealthCheckResponse.unhealthyReasons");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.DetailedHealthCheckResponse)
  return target;
}

size_t DetailedHealthCheckResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.DetailedHealthCheckResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string unhealthyReasons = 2[json_name = "unhealthyReasons"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(unhealthyreasons_.size());
  for (int i = 0, n = unhealthyreasons_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      unhealthyreasons_.Get(i));
  }

  // .cedana.services.task.HealthCheckStats HealthCheckStats = 1[json_name = "HealthCheckStats"];
  if (this->has_healthcheckstats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *healthcheckstats_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetailedHealthCheckResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.DetailedHealthCheckResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DetailedHealthCheckResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetailedHealthCheckResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.DetailedHealthCheckResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.DetailedHealthCheckResponse)
    MergeFrom(*source);
  }
}

void DetailedHealthCheckResponse::MergeFrom(const DetailedHealthCheckResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.DetailedHealthCheckResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unhealthyreasons_.MergeFrom(from.unhealthyreasons_);
  if (from.has_healthcheckstats()) {
    _internal_mutable_healthcheckstats()->::cedana::services::task::HealthCheckStats::MergeFrom(from._internal_healthcheckstats());
  }
}

void DetailedHealthCheckResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.DetailedHealthCheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetailedHealthCheckResponse::CopyFrom(const DetailedHealthCheckResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.DetailedHealthCheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailedHealthCheckResponse::IsInitialized() const {
  return true;
}

void DetailedHealthCheckResponse::InternalSwap(DetailedHealthCheckResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  unhealthyreasons_.InternalSwap(&other->unhealthyreasons_);
  swap(healthcheckstats_, other->healthcheckstats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetailedHealthCheckResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HealthCheckStats::InitAsDefaultInstance() {
  ::cedana::services::task::_HealthCheckStats_default_instance_._instance.get_mutable()->gpuhealthcheck_ = const_cast< ::cedanagpu::HealthCheckResponse*>(
      ::cedanagpu::HealthCheckResponse::internal_default_instance());
}
class HealthCheckStats::_Internal {
 public:
  static const ::cedanagpu::HealthCheckResponse& gpuhealthcheck(const HealthCheckStats* msg);
};

const ::cedanagpu::HealthCheckResponse&
HealthCheckStats::_Internal::gpuhealthcheck(const HealthCheckStats* msg) {
  return *msg->gpuhealthcheck_;
}
void HealthCheckStats::clear_gpuhealthcheck() {
  if (GetArena() == nullptr && gpuhealthcheck_ != nullptr) {
    delete gpuhealthcheck_;
  }
  gpuhealthcheck_ = nullptr;
}
HealthCheckStats::HealthCheckStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.HealthCheckStats)
}
HealthCheckStats::HealthCheckStats(const HealthCheckStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  criuversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_criuversion().empty()) {
    criuversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_criuversion(),
      GetArena());
  }
  if (from._internal_has_gpuhealthcheck()) {
    gpuhealthcheck_ = new ::cedanagpu::HealthCheckResponse(*from.gpuhealthcheck_);
  } else {
    gpuhealthcheck_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.HealthCheckStats)
}

void HealthCheckStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HealthCheckStats_task_2eproto.base);
  criuversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gpuhealthcheck_ = nullptr;
}

HealthCheckStats::~HealthCheckStats() {
  // @@protoc_insertion_point(destructor:cedana.services.task.HealthCheckStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HealthCheckStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  criuversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gpuhealthcheck_;
}

void HealthCheckStats::ArenaDtor(void* object) {
  HealthCheckStats* _this = reinterpret_cast< HealthCheckStats* >(object);
  (void)_this;
}
void HealthCheckStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HealthCheckStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HealthCheckStats& HealthCheckStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HealthCheckStats_task_2eproto.base);
  return *internal_default_instance();
}


void HealthCheckStats::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.HealthCheckStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  criuversion_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && gpuhealthcheck_ != nullptr) {
    delete gpuhealthcheck_;
  }
  gpuhealthcheck_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthCheckStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string criuVersion = 1[json_name = "criuVersion"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_criuversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.HealthCheckStats.criuVersion"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cedanagpu.HealthCheckResponse GPUHealthCheck = 2[json_name = "GPUHealthCheck"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gpuhealthcheck(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HealthCheckStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.HealthCheckStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string criuVersion = 1[json_name = "criuVersion"];
  if (this->criuversion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_criuversion().data(), static_cast<int>(this->_internal_criuversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.HealthCheckStats.criuVersion");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_criuversion(), target);
  }

  // .cedanagpu.HealthCheckResponse GPUHealthCheck = 2[json_name = "GPUHealthCheck"];
  if (this->has_gpuhealthcheck()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::gpuhealthcheck(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.HealthCheckStats)
  return target;
}

size_t HealthCheckStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.HealthCheckStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string criuVersion = 1[json_name = "criuVersion"];
  if (this->criuversion().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_criuversion());
  }

  // .cedanagpu.HealthCheckResponse GPUHealthCheck = 2[json_name = "GPUHealthCheck"];
  if (this->has_gpuhealthcheck()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gpuhealthcheck_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HealthCheckStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.HealthCheckStats)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthCheckStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HealthCheckStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.HealthCheckStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.HealthCheckStats)
    MergeFrom(*source);
  }
}

void HealthCheckStats::MergeFrom(const HealthCheckStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.HealthCheckStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.criuversion().size() > 0) {
    _internal_set_criuversion(from._internal_criuversion());
  }
  if (from.has_gpuhealthcheck()) {
    _internal_mutable_gpuhealthcheck()->::cedanagpu::HealthCheckResponse::MergeFrom(from._internal_gpuhealthcheck());
  }
}

void HealthCheckStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.HealthCheckStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthCheckStats::CopyFrom(const HealthCheckStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.HealthCheckStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheckStats::IsInitialized() const {
  return true;
}

void HealthCheckStats::InternalSwap(HealthCheckStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  criuversion_.Swap(&other->criuversion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(gpuhealthcheck_, other->gpuhealthcheck_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthCheckStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetConfigRequest::InitAsDefaultInstance() {
}
class GetConfigRequest::_Internal {
 public:
};

GetConfigRequest::GetConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.GetConfigRequest)
}
GetConfigRequest::GetConfigRequest(const GetConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.GetConfigRequest)
}

void GetConfigRequest::SharedCtor() {
}

GetConfigRequest::~GetConfigRequest() {
  // @@protoc_insertion_point(destructor:cedana.services.task.GetConfigRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetConfigRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetConfigRequest::ArenaDtor(void* object) {
  GetConfigRequest* _this = reinterpret_cast< GetConfigRequest* >(object);
  (void)_this;
}
void GetConfigRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetConfigRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetConfigRequest& GetConfigRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetConfigRequest_task_2eproto.base);
  return *internal_default_instance();
}


void GetConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.GetConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetConfigRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetConfigRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.GetConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.GetConfigRequest)
  return target;
}

size_t GetConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.GetConfigRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetConfigRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.GetConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConfigRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetConfigRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.GetConfigRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.GetConfigRequest)
    MergeFrom(*source);
  }
}

void GetConfigRequest::MergeFrom(const GetConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.GetConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetConfigRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.GetConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConfigRequest::CopyFrom(const GetConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.GetConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConfigRequest::IsInitialized() const {
  return true;
}

void GetConfigRequest::InternalSwap(GetConfigRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConfigRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetConfigResponse::InitAsDefaultInstance() {
}
class GetConfigResponse::_Internal {
 public:
};

GetConfigResponse::GetConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.GetConfigResponse)
}
GetConfigResponse::GetConfigResponse(const GetConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_json().empty()) {
    json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_json(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.GetConfigResponse)
}

void GetConfigResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetConfigResponse_task_2eproto.base);
  json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetConfigResponse::~GetConfigResponse() {
  // @@protoc_insertion_point(destructor:cedana.services.task.GetConfigResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetConfigResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  json_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetConfigResponse::ArenaDtor(void* object) {
  GetConfigResponse* _this = reinterpret_cast< GetConfigResponse* >(object);
  (void)_this;
}
void GetConfigResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetConfigResponse& GetConfigResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetConfigResponse_task_2eproto.base);
  return *internal_default_instance();
}


void GetConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.GetConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  json_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetConfigResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string JSON = 1[json_name = "JSON"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_json();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.GetConfigResponse.JSON"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetConfigResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.GetConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string JSON = 1[json_name = "JSON"];
  if (this->json().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_json().data(), static_cast<int>(this->_internal_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.GetConfigResponse.JSON");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_json(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.GetConfigResponse)
  return target;
}

size_t GetConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.GetConfigResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string JSON = 1[json_name = "JSON"];
  if (this->json().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_json());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetConfigResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.GetConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConfigResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetConfigResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.GetConfigResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.GetConfigResponse)
    MergeFrom(*source);
  }
}

void GetConfigResponse::MergeFrom(const GetConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.GetConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.json().size() > 0) {
    _internal_set_json(from._internal_json());
  }
}

void GetConfigResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.GetConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConfigResponse::CopyFrom(const GetConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.GetConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConfigResponse::IsInitialized() const {
  return true;
}

void GetConfigResponse::InternalSwap(GetConfigResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  json_.Swap(&other->json_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConfigResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueueJobCheckpointRequest::InitAsDefaultInstance() {
}
class QueueJobCheckpointRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueueJobCheckpointRequest>()._has_bits_);
  static void set_has_runtimeroot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_runtimesock(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

QueueJobCheckpointRequest::QueueJobCheckpointRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.QueueJobCheckpointRequest)
}
QueueJobCheckpointRequest::QueueJobCheckpointRequest(const QueueJobCheckpointRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  containername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_containername().empty()) {
    containername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_containername(),
      GetArena());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  podname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_podname().empty()) {
    podname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_podname(),
      GetArena());
  }
  imagename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imagename().empty()) {
    imagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_imagename(),
      GetArena());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  runtimeroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_runtimeroot()) {
    runtimeroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_runtimeroot(),
      GetArena());
  }
  runtimesock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_runtimesock()) {
    runtimesock_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_runtimesock(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.QueueJobCheckpointRequest)
}

void QueueJobCheckpointRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueueJobCheckpointRequest_task_2eproto.base);
  containername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  podname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imagename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runtimeroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runtimesock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

QueueJobCheckpointRequest::~QueueJobCheckpointRequest() {
  // @@protoc_insertion_point(destructor:cedana.services.task.QueueJobCheckpointRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueueJobCheckpointRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  containername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  podname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imagename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runtimeroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runtimesock_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QueueJobCheckpointRequest::ArenaDtor(void* object) {
  QueueJobCheckpointRequest* _this = reinterpret_cast< QueueJobCheckpointRequest* >(object);
  (void)_this;
}
void QueueJobCheckpointRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueueJobCheckpointRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueueJobCheckpointRequest& QueueJobCheckpointRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueueJobCheckpointRequest_task_2eproto.base);
  return *internal_default_instance();
}


void QueueJobCheckpointRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.QueueJobCheckpointRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  containername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  podname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  imagename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      runtimeroot_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      runtimesock_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueueJobCheckpointRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ContainerName = 1[json_name = "ContainerName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_containername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.QueueJobCheckpointRequest.ContainerName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Namespace = 2[json_name = "Namespace"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.QueueJobCheckpointRequest.Namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string PodName = 3[json_name = "PodName"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_podname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.QueueJobCheckpointRequest.PodName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ImageName = 4[json_name = "ImageName"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_imagename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.QueueJobCheckpointRequest.ImageName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Id = 5[json_name = "Id"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.QueueJobCheckpointRequest.Id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string RuntimeRoot = 6[json_name = "RuntimeRoot"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_runtimeroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.QueueJobCheckpointRequest.RuntimeRoot"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string RuntimeSock = 7[json_name = "RuntimeSock"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_runtimesock();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.QueueJobCheckpointRequest.RuntimeSock"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueueJobCheckpointRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.QueueJobCheckpointRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ContainerName = 1[json_name = "ContainerName"];
  if (this->containername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_containername().data(), static_cast<int>(this->_internal_containername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.QueueJobCheckpointRequest.ContainerName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_containername(), target);
  }

  // string Namespace = 2[json_name = "Namespace"];
  if (this->namespace_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.QueueJobCheckpointRequest.Namespace");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_namespace_(), target);
  }

  // string PodName = 3[json_name = "PodName"];
  if (this->podname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_podname().data(), static_cast<int>(this->_internal_podname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.QueueJobCheckpointRequest.PodName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_podname(), target);
  }

  // string ImageName = 4[json_name = "ImageName"];
  if (this->imagename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imagename().data(), static_cast<int>(this->_internal_imagename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.QueueJobCheckpointRequest.ImageName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_imagename(), target);
  }

  // string Id = 5[json_name = "Id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.QueueJobCheckpointRequest.Id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_id(), target);
  }

  // string RuntimeRoot = 6[json_name = "RuntimeRoot"];
  if (_internal_has_runtimeroot()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_runtimeroot().data(), static_cast<int>(this->_internal_runtimeroot().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.QueueJobCheckpointRequest.RuntimeRoot");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_runtimeroot(), target);
  }

  // string RuntimeSock = 7[json_name = "RuntimeSock"];
  if (_internal_has_runtimesock()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_runtimesock().data(), static_cast<int>(this->_internal_runtimesock().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.QueueJobCheckpointRequest.RuntimeSock");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_runtimesock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.QueueJobCheckpointRequest)
  return target;
}

size_t QueueJobCheckpointRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.QueueJobCheckpointRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ContainerName = 1[json_name = "ContainerName"];
  if (this->containername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_containername());
  }

  // string Namespace = 2[json_name = "Namespace"];
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // string PodName = 3[json_name = "PodName"];
  if (this->podname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_podname());
  }

  // string ImageName = 4[json_name = "ImageName"];
  if (this->imagename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imagename());
  }

  // string Id = 5[json_name = "Id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // string RuntimeRoot = 6[json_name = "RuntimeRoot"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_runtimeroot());
    }

    // string RuntimeSock = 7[json_name = "RuntimeSock"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_runtimesock());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueueJobCheckpointRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.QueueJobCheckpointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueueJobCheckpointRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueueJobCheckpointRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.QueueJobCheckpointRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.QueueJobCheckpointRequest)
    MergeFrom(*source);
  }
}

void QueueJobCheckpointRequest::MergeFrom(const QueueJobCheckpointRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.QueueJobCheckpointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.containername().size() > 0) {
    _internal_set_containername(from._internal_containername());
  }
  if (from.namespace_().size() > 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (from.podname().size() > 0) {
    _internal_set_podname(from._internal_podname());
  }
  if (from.imagename().size() > 0) {
    _internal_set_imagename(from._internal_imagename());
  }
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_runtimeroot(from._internal_runtimeroot());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_runtimesock(from._internal_runtimesock());
    }
  }
}

void QueueJobCheckpointRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.QueueJobCheckpointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueueJobCheckpointRequest::CopyFrom(const QueueJobCheckpointRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.QueueJobCheckpointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueueJobCheckpointRequest::IsInitialized() const {
  return true;
}

void QueueJobCheckpointRequest::InternalSwap(QueueJobCheckpointRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  containername_.Swap(&other->containername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  podname_.Swap(&other->podname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  imagename_.Swap(&other->imagename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  runtimeroot_.Swap(&other->runtimeroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  runtimesock_.Swap(&other->runtimesock_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueueJobCheckpointRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueueJobRestoreRequest::InitAsDefaultInstance() {
}
class QueueJobRestoreRequest::_Internal {
 public:
};

QueueJobRestoreRequest::QueueJobRestoreRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.QueueJobRestoreRequest)
}
QueueJobRestoreRequest::QueueJobRestoreRequest(const QueueJobRestoreRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  containername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_containername().empty()) {
    containername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_containername(),
      GetArena());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  podname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_podname().empty()) {
    podname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_podname(),
      GetArena());
  }
  sourcename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sourcename().empty()) {
    sourcename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sourcename(),
      GetArena());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.QueueJobRestoreRequest)
}

void QueueJobRestoreRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueueJobRestoreRequest_task_2eproto.base);
  containername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  podname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sourcename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

QueueJobRestoreRequest::~QueueJobRestoreRequest() {
  // @@protoc_insertion_point(destructor:cedana.services.task.QueueJobRestoreRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueueJobRestoreRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  containername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  podname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sourcename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QueueJobRestoreRequest::ArenaDtor(void* object) {
  QueueJobRestoreRequest* _this = reinterpret_cast< QueueJobRestoreRequest* >(object);
  (void)_this;
}
void QueueJobRestoreRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueueJobRestoreRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueueJobRestoreRequest& QueueJobRestoreRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueueJobRestoreRequest_task_2eproto.base);
  return *internal_default_instance();
}


void QueueJobRestoreRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.QueueJobRestoreRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  containername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  podname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sourcename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueueJobRestoreRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ContainerName = 1[json_name = "ContainerName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_containername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.QueueJobRestoreRequest.ContainerName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Namespace = 2[json_name = "Namespace"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.QueueJobRestoreRequest.Namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string PodName = 3[json_name = "PodName"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_podname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.QueueJobRestoreRequest.PodName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SourceName = 4[json_name = "SourceName"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sourcename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.QueueJobRestoreRequest.SourceName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Id = 5[json_name = "Id"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.QueueJobRestoreRequest.Id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueueJobRestoreRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.QueueJobRestoreRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ContainerName = 1[json_name = "ContainerName"];
  if (this->containername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_containername().data(), static_cast<int>(this->_internal_containername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.QueueJobRestoreRequest.ContainerName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_containername(), target);
  }

  // string Namespace = 2[json_name = "Namespace"];
  if (this->namespace_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.QueueJobRestoreRequest.Namespace");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_namespace_(), target);
  }

  // string PodName = 3[json_name = "PodName"];
  if (this->podname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_podname().data(), static_cast<int>(this->_internal_podname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.QueueJobRestoreRequest.PodName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_podname(), target);
  }

  // string SourceName = 4[json_name = "SourceName"];
  if (this->sourcename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sourcename().data(), static_cast<int>(this->_internal_sourcename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.QueueJobRestoreRequest.SourceName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sourcename(), target);
  }

  // string Id = 5[json_name = "Id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.QueueJobRestoreRequest.Id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.QueueJobRestoreRequest)
  return target;
}

size_t QueueJobRestoreRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.QueueJobRestoreRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ContainerName = 1[json_name = "ContainerName"];
  if (this->containername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_containername());
  }

  // string Namespace = 2[json_name = "Namespace"];
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // string PodName = 3[json_name = "PodName"];
  if (this->podname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_podname());
  }

  // string SourceName = 4[json_name = "SourceName"];
  if (this->sourcename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourcename());
  }

  // string Id = 5[json_name = "Id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueueJobRestoreRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.QueueJobRestoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueueJobRestoreRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueueJobRestoreRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.QueueJobRestoreRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.QueueJobRestoreRequest)
    MergeFrom(*source);
  }
}

void QueueJobRestoreRequest::MergeFrom(const QueueJobRestoreRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.QueueJobRestoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.containername().size() > 0) {
    _internal_set_containername(from._internal_containername());
  }
  if (from.namespace_().size() > 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (from.podname().size() > 0) {
    _internal_set_podname(from._internal_podname());
  }
  if (from.sourcename().size() > 0) {
    _internal_set_sourcename(from._internal_sourcename());
  }
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void QueueJobRestoreRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.QueueJobRestoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueueJobRestoreRequest::CopyFrom(const QueueJobRestoreRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.QueueJobRestoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueueJobRestoreRequest::IsInitialized() const {
  return true;
}

void QueueJobRestoreRequest::InternalSwap(QueueJobRestoreRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  containername_.Swap(&other->containername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  podname_.Swap(&other->podname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sourcename_.Swap(&other->sourcename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueueJobRestoreRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueueJobID::InitAsDefaultInstance() {
}
class QueueJobID::_Internal {
 public:
};

QueueJobID::QueueJobID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.QueueJobID)
}
QueueJobID::QueueJobID(const QueueJobID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  jobid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_jobid().empty()) {
    jobid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_jobid(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.QueueJobID)
}

void QueueJobID::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueueJobID_task_2eproto.base);
  jobid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

QueueJobID::~QueueJobID() {
  // @@protoc_insertion_point(destructor:cedana.services.task.QueueJobID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueueJobID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  jobid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QueueJobID::ArenaDtor(void* object) {
  QueueJobID* _this = reinterpret_cast< QueueJobID* >(object);
  (void)_this;
}
void QueueJobID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueueJobID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueueJobID& QueueJobID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueueJobID_task_2eproto.base);
  return *internal_default_instance();
}


void QueueJobID::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.QueueJobID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jobid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueueJobID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string JobID = 1[json_name = "JobID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_jobid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.QueueJobID.JobID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueueJobID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.QueueJobID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string JobID = 1[json_name = "JobID"];
  if (this->jobid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_jobid().data(), static_cast<int>(this->_internal_jobid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.QueueJobID.JobID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_jobid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.QueueJobID)
  return target;
}

size_t QueueJobID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.QueueJobID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string JobID = 1[json_name = "JobID"];
  if (this->jobid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_jobid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueueJobID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.QueueJobID)
  GOOGLE_DCHECK_NE(&from, this);
  const QueueJobID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueueJobID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.QueueJobID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.QueueJobID)
    MergeFrom(*source);
  }
}

void QueueJobID::MergeFrom(const QueueJobID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.QueueJobID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.jobid().size() > 0) {
    _internal_set_jobid(from._internal_jobid());
  }
}

void QueueJobID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.QueueJobID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueueJobID::CopyFrom(const QueueJobID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.QueueJobID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueueJobID::IsInitialized() const {
  return true;
}

void QueueJobID::InternalSwap(QueueJobID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  jobid_.Swap(&other->jobid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueueJobID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueueJobStatus::InitAsDefaultInstance() {
}
class QueueJobStatus::_Internal {
 public:
};

QueueJobStatus::QueueJobStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.QueueJobStatus)
}
QueueJobStatus::QueueJobStatus(const QueueJobStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.QueueJobStatus)
}

void QueueJobStatus::SharedCtor() {
  status_ = 0;
}

QueueJobStatus::~QueueJobStatus() {
  // @@protoc_insertion_point(destructor:cedana.services.task.QueueJobStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueueJobStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void QueueJobStatus::ArenaDtor(void* object) {
  QueueJobStatus* _this = reinterpret_cast< QueueJobStatus* >(object);
  (void)_this;
}
void QueueJobStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueueJobStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueueJobStatus& QueueJobStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueueJobStatus_task_2eproto.base);
  return *internal_default_instance();
}


void QueueJobStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.QueueJobStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueueJobStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cedana.services.task.QueueJobStatusEnum Status = 1[json_name = "Status"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::cedana::services::task::QueueJobStatusEnum>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueueJobStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.QueueJobStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cedana.services.task.QueueJobStatusEnum Status = 1[json_name = "Status"];
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.QueueJobStatus)
  return target;
}

size_t QueueJobStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.QueueJobStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cedana.services.task.QueueJobStatusEnum Status = 1[json_name = "Status"];
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueueJobStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.QueueJobStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const QueueJobStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueueJobStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.QueueJobStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.QueueJobStatus)
    MergeFrom(*source);
  }
}

void QueueJobStatus::MergeFrom(const QueueJobStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.QueueJobStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void QueueJobStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.QueueJobStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueueJobStatus::CopyFrom(const QueueJobStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.QueueJobStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueueJobStatus::IsInitialized() const {
  return true;
}

void QueueJobStatus::InternalSwap(QueueJobStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueueJobStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContainerInfoRequest::InitAsDefaultInstance() {
}
class ContainerInfoRequest::_Internal {
 public:
};

ContainerInfoRequest::ContainerInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.ContainerInfoRequest)
}
ContainerInfoRequest::ContainerInfoRequest(const ContainerInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.ContainerInfoRequest)
}

void ContainerInfoRequest::SharedCtor() {
}

ContainerInfoRequest::~ContainerInfoRequest() {
  // @@protoc_insertion_point(destructor:cedana.services.task.ContainerInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ContainerInfoRequest::ArenaDtor(void* object) {
  ContainerInfoRequest* _this = reinterpret_cast< ContainerInfoRequest* >(object);
  (void)_this;
}
void ContainerInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerInfoRequest& ContainerInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerInfoRequest_task_2eproto.base);
  return *internal_default_instance();
}


void ContainerInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.ContainerInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.ContainerInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.ContainerInfoRequest)
  return target;
}

size_t ContainerInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.ContainerInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.ContainerInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.ContainerInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.ContainerInfoRequest)
    MergeFrom(*source);
  }
}

void ContainerInfoRequest::MergeFrom(const ContainerInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.ContainerInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ContainerInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.ContainerInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerInfoRequest::CopyFrom(const ContainerInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.ContainerInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerInfoRequest::IsInitialized() const {
  return true;
}

void ContainerInfoRequest::InternalSwap(ContainerInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContainerInfo::InitAsDefaultInstance() {
}
class ContainerInfo::_Internal {
 public:
};

ContainerInfo::ContainerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.ContainerInfo)
}
ContainerInfo::ContainerInfo(const ContainerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      labels_(from.labels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  containername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_containername().empty()) {
    containername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_containername(),
      GetArena());
  }
  daemonid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_daemonid().empty()) {
    daemonid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_daemonid(),
      GetArena());
  }
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image().empty()) {
    image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_image(),
      GetArena());
  }
  ::memcpy(&cputime_, &from.cputime_,
    static_cast<size_t>(reinterpret_cast<char*>(&diskio_) -
    reinterpret_cast<char*>(&cputime_)) + sizeof(diskio_));
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.ContainerInfo)
}

void ContainerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContainerInfo_task_2eproto.base);
  containername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  daemonid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cputime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&diskio_) -
      reinterpret_cast<char*>(&cputime_)) + sizeof(diskio_));
}

ContainerInfo::~ContainerInfo() {
  // @@protoc_insertion_point(destructor:cedana.services.task.ContainerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  containername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  daemonid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContainerInfo::ArenaDtor(void* object) {
  ContainerInfo* _this = reinterpret_cast< ContainerInfo* >(object);
  (void)_this;
}
void ContainerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerInfo& ContainerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerInfo_task_2eproto.base);
  return *internal_default_instance();
}


void ContainerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.ContainerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  containername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  daemonid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&cputime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&diskio_) -
      reinterpret_cast<char*>(&cputime_)) + sizeof(diskio_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double CpuTime = 1[json_name = "CpuTime"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          cputime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double CpuLoadAvg = 2[json_name = "CpuLoadAvg"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          cpuloadavg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double MaxMemory = 3[json_name = "MaxMemory"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          maxmemory_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double CurrentMemory = 4[json_name = "CurrentMemory"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          currentmemory_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double NetworkIO = 5[json_name = "NetworkIO"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          networkio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double DiskIO = 6[json_name = "DiskIO"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          diskio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string ContainerName = 7[json_name = "ContainerName"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_containername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ContainerInfo.ContainerName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string DaemonId = 8[json_name = "DaemonId"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_daemonid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ContainerInfo.DaemonId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string Labels = 9[json_name = "Labels"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_labels();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ContainerInfo.Labels"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // string Image = 10[json_name = "Image"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedana.services.task.ContainerInfo.Image"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.ContainerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double CpuTime = 1[json_name = "CpuTime"];
  if (!(this->cputime() <= 0 && this->cputime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_cputime(), target);
  }

  // double CpuLoadAvg = 2[json_name = "CpuLoadAvg"];
  if (!(this->cpuloadavg() <= 0 && this->cpuloadavg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_cpuloadavg(), target);
  }

  // double MaxMemory = 3[json_name = "MaxMemory"];
  if (!(this->maxmemory() <= 0 && this->maxmemory() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_maxmemory(), target);
  }

  // double CurrentMemory = 4[json_name = "CurrentMemory"];
  if (!(this->currentmemory() <= 0 && this->currentmemory() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_currentmemory(), target);
  }

  // double NetworkIO = 5[json_name = "NetworkIO"];
  if (!(this->networkio() <= 0 && this->networkio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_networkio(), target);
  }

  // double DiskIO = 6[json_name = "DiskIO"];
  if (!(this->diskio() <= 0 && this->diskio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_diskio(), target);
  }

  // string ContainerName = 7[json_name = "ContainerName"];
  if (this->containername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_containername().data(), static_cast<int>(this->_internal_containername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ContainerInfo.ContainerName");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_containername(), target);
  }

  // string DaemonId = 8[json_name = "DaemonId"];
  if (this->daemonid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_daemonid().data(), static_cast<int>(this->_internal_daemonid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ContainerInfo.DaemonId");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_daemonid(), target);
  }

  // repeated string Labels = 9[json_name = "Labels"];
  for (int i = 0, n = this->_internal_labels_size(); i < n; i++) {
    const auto& s = this->_internal_labels(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ContainerInfo.Labels");
    target = stream->WriteString(9, s, target);
  }

  // string Image = 10[json_name = "Image"];
  if (this->image().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image().data(), static_cast<int>(this->_internal_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedana.services.task.ContainerInfo.Image");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_image(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.ContainerInfo)
  return target;
}

size_t ContainerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.ContainerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string Labels = 9[json_name = "Labels"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(labels_.size());
  for (int i = 0, n = labels_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      labels_.Get(i));
  }

  // string ContainerName = 7[json_name = "ContainerName"];
  if (this->containername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_containername());
  }

  // string DaemonId = 8[json_name = "DaemonId"];
  if (this->daemonid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_daemonid());
  }

  // string Image = 10[json_name = "Image"];
  if (this->image().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image());
  }

  // double CpuTime = 1[json_name = "CpuTime"];
  if (!(this->cputime() <= 0 && this->cputime() >= 0)) {
    total_size += 1 + 8;
  }

  // double CpuLoadAvg = 2[json_name = "CpuLoadAvg"];
  if (!(this->cpuloadavg() <= 0 && this->cpuloadavg() >= 0)) {
    total_size += 1 + 8;
  }

  // double MaxMemory = 3[json_name = "MaxMemory"];
  if (!(this->maxmemory() <= 0 && this->maxmemory() >= 0)) {
    total_size += 1 + 8;
  }

  // double CurrentMemory = 4[json_name = "CurrentMemory"];
  if (!(this->currentmemory() <= 0 && this->currentmemory() >= 0)) {
    total_size += 1 + 8;
  }

  // double NetworkIO = 5[json_name = "NetworkIO"];
  if (!(this->networkio() <= 0 && this->networkio() >= 0)) {
    total_size += 1 + 8;
  }

  // double DiskIO = 6[json_name = "DiskIO"];
  if (!(this->diskio() <= 0 && this->diskio() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.ContainerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.ContainerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.ContainerInfo)
    MergeFrom(*source);
  }
}

void ContainerInfo::MergeFrom(const ContainerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.ContainerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.containername().size() > 0) {
    _internal_set_containername(from._internal_containername());
  }
  if (from.daemonid().size() > 0) {
    _internal_set_daemonid(from._internal_daemonid());
  }
  if (from.image().size() > 0) {
    _internal_set_image(from._internal_image());
  }
  if (!(from.cputime() <= 0 && from.cputime() >= 0)) {
    _internal_set_cputime(from._internal_cputime());
  }
  if (!(from.cpuloadavg() <= 0 && from.cpuloadavg() >= 0)) {
    _internal_set_cpuloadavg(from._internal_cpuloadavg());
  }
  if (!(from.maxmemory() <= 0 && from.maxmemory() >= 0)) {
    _internal_set_maxmemory(from._internal_maxmemory());
  }
  if (!(from.currentmemory() <= 0 && from.currentmemory() >= 0)) {
    _internal_set_currentmemory(from._internal_currentmemory());
  }
  if (!(from.networkio() <= 0 && from.networkio() >= 0)) {
    _internal_set_networkio(from._internal_networkio());
  }
  if (!(from.diskio() <= 0 && from.diskio() >= 0)) {
    _internal_set_diskio(from._internal_diskio());
  }
}

void ContainerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.ContainerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerInfo::CopyFrom(const ContainerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.ContainerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerInfo::IsInitialized() const {
  return true;
}

void ContainerInfo::InternalSwap(ContainerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  containername_.Swap(&other->containername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  daemonid_.Swap(&other->daemonid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image_.Swap(&other->image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContainerInfo, diskio_)
      + sizeof(ContainerInfo::diskio_)
      - PROTOBUF_FIELD_OFFSET(ContainerInfo, cputime_)>(
          reinterpret_cast<char*>(&cputime_),
          reinterpret_cast<char*>(&other->cputime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContainersInfo::InitAsDefaultInstance() {
}
class ContainersInfo::_Internal {
 public:
};

ContainersInfo::ContainersInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  containers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cedana.services.task.ContainersInfo)
}
ContainersInfo::ContainersInfo(const ContainersInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      containers_(from.containers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cedana.services.task.ContainersInfo)
}

void ContainersInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContainersInfo_task_2eproto.base);
}

ContainersInfo::~ContainersInfo() {
  // @@protoc_insertion_point(destructor:cedana.services.task.ContainersInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainersInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ContainersInfo::ArenaDtor(void* object) {
  ContainersInfo* _this = reinterpret_cast< ContainersInfo* >(object);
  (void)_this;
}
void ContainersInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainersInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainersInfo& ContainersInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainersInfo_task_2eproto.base);
  return *internal_default_instance();
}


void ContainersInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cedana.services.task.ContainersInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  containers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainersInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .cedana.services.task.ContainerInfo containers = 1[json_name = "containers"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_containers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainersInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedana.services.task.ContainersInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cedana.services.task.ContainerInfo containers = 1[json_name = "containers"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_containers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_containers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedana.services.task.ContainersInfo)
  return target;
}

size_t ContainersInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedana.services.task.ContainersInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cedana.services.task.ContainerInfo containers = 1[json_name = "containers"];
  total_size += 1UL * this->_internal_containers_size();
  for (const auto& msg : this->containers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainersInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cedana.services.task.ContainersInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainersInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainersInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cedana.services.task.ContainersInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cedana.services.task.ContainersInfo)
    MergeFrom(*source);
  }
}

void ContainersInfo::MergeFrom(const ContainersInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedana.services.task.ContainersInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  containers_.MergeFrom(from.containers_);
}

void ContainersInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cedana.services.task.ContainersInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainersInfo::CopyFrom(const ContainersInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedana.services.task.ContainersInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainersInfo::IsInitialized() const {
  return true;
}

void ContainersInfo::InternalSwap(ContainersInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  containers_.InternalSwap(&other->containers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainersInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace task
}  // namespace services
}  // namespace cedana
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cedana::services::task::DumpStats* Arena::CreateMaybeMessage< ::cedana::services::task::DumpStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::DumpStats >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::CheckpointFileStats* Arena::CreateMaybeMessage< ::cedana::services::task::CheckpointFileStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::CheckpointFileStats >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::RestoreStats* Arena::CreateMaybeMessage< ::cedana::services::task::RestoreStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::RestoreStats >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::CRIOImagePushArgs* Arena::CreateMaybeMessage< ::cedana::services::task::CRIOImagePushArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::CRIOImagePushArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::CRIOImagePushResp* Arena::CreateMaybeMessage< ::cedana::services::task::CRIOImagePushResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::CRIOImagePushResp >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::CRIORootfsDumpArgs* Arena::CreateMaybeMessage< ::cedana::services::task::CRIORootfsDumpArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::CRIORootfsDumpArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::CRIORootfsDumpResp* Arena::CreateMaybeMessage< ::cedana::services::task::CRIORootfsDumpResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::CRIORootfsDumpResp >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::StartArgs* Arena::CreateMaybeMessage< ::cedana::services::task::StartArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::StartArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::StartResp* Arena::CreateMaybeMessage< ::cedana::services::task::StartResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::StartResp >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::DumpArgs* Arena::CreateMaybeMessage< ::cedana::services::task::DumpArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::DumpArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::DumpResp* Arena::CreateMaybeMessage< ::cedana::services::task::DumpResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::DumpResp >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::RestoreArgs* Arena::CreateMaybeMessage< ::cedana::services::task::RestoreArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::RestoreArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::RestoreResp* Arena::CreateMaybeMessage< ::cedana::services::task::RestoreResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::RestoreResp >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::QueryArgs* Arena::CreateMaybeMessage< ::cedana::services::task::QueryArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::QueryArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::QueryResp* Arena::CreateMaybeMessage< ::cedana::services::task::QueryResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::QueryResp >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::ContainerdDumpArgs* Arena::CreateMaybeMessage< ::cedana::services::task::ContainerdDumpArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::ContainerdDumpArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::ContainerdDumpResp* Arena::CreateMaybeMessage< ::cedana::services::task::ContainerdDumpResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::ContainerdDumpResp >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::ContainerdRestoreArgs* Arena::CreateMaybeMessage< ::cedana::services::task::ContainerdRestoreArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::ContainerdRestoreArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::ContainerdRestoreResp* Arena::CreateMaybeMessage< ::cedana::services::task::ContainerdRestoreResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::ContainerdRestoreResp >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::ContainerdQueryArgs* Arena::CreateMaybeMessage< ::cedana::services::task::ContainerdQueryArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::ContainerdQueryArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::ContainerdQueryResp* Arena::CreateMaybeMessage< ::cedana::services::task::ContainerdQueryResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::ContainerdQueryResp >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::ContainerdContainer* Arena::CreateMaybeMessage< ::cedana::services::task::ContainerdContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::ContainerdContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::ContainerdRootfsDumpArgs* Arena::CreateMaybeMessage< ::cedana::services::task::ContainerdRootfsDumpArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::ContainerdRootfsDumpArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::ContainerdRootfsDumpResp* Arena::CreateMaybeMessage< ::cedana::services::task::ContainerdRootfsDumpResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::ContainerdRootfsDumpResp >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::ContainerdRootfsRestoreArgs* Arena::CreateMaybeMessage< ::cedana::services::task::ContainerdRootfsRestoreArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::ContainerdRootfsRestoreArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::ContainerdRootfsRestoreResp* Arena::CreateMaybeMessage< ::cedana::services::task::ContainerdRootfsRestoreResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::ContainerdRootfsRestoreResp >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::RuncDumpArgs* Arena::CreateMaybeMessage< ::cedana::services::task::RuncDumpArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::RuncDumpArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::RuncDumpResp* Arena::CreateMaybeMessage< ::cedana::services::task::RuncDumpResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::RuncDumpResp >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::CriuOpts* Arena::CreateMaybeMessage< ::cedana::services::task::CriuOpts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::CriuOpts >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::RuncRestoreArgs* Arena::CreateMaybeMessage< ::cedana::services::task::RuncRestoreArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::RuncRestoreArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::RuncRestoreResp* Arena::CreateMaybeMessage< ::cedana::services::task::RuncRestoreResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::RuncRestoreResp >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::RuncOpts* Arena::CreateMaybeMessage< ::cedana::services::task::RuncOpts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::RuncOpts >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::RuncQueryArgs* Arena::CreateMaybeMessage< ::cedana::services::task::RuncQueryArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::RuncQueryArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::RuncQueryResp* Arena::CreateMaybeMessage< ::cedana::services::task::RuncQueryResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::RuncQueryResp >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::RuncContainer* Arena::CreateMaybeMessage< ::cedana::services::task::RuncContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::RuncContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::RuncGetPausePidArgs* Arena::CreateMaybeMessage< ::cedana::services::task::RuncGetPausePidArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::RuncGetPausePidArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::RuncGetPausePidResp* Arena::CreateMaybeMessage< ::cedana::services::task::RuncGetPausePidResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::RuncGetPausePidResp >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::LogStreamingArgs* Arena::CreateMaybeMessage< ::cedana::services::task::LogStreamingArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::LogStreamingArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::LogStreamingResp* Arena::CreateMaybeMessage< ::cedana::services::task::LogStreamingResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::LogStreamingResp >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::ProcessState* Arena::CreateMaybeMessage< ::cedana::services::task::ProcessState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::ProcessState >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::RemoteState* Arena::CreateMaybeMessage< ::cedana::services::task::RemoteState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::RemoteState >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::ProcessInfo* Arena::CreateMaybeMessage< ::cedana::services::task::ProcessInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::ProcessInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::HostInfo* Arena::CreateMaybeMessage< ::cedana::services::task::HostInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::HostInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::CPUInfo* Arena::CreateMaybeMessage< ::cedana::services::task::CPUInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::CPUInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::MemoryInfo* Arena::CreateMaybeMessage< ::cedana::services::task::MemoryInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::MemoryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::OpenFilesStat* Arena::CreateMaybeMessage< ::cedana::services::task::OpenFilesStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::OpenFilesStat >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::ConnectionStat* Arena::CreateMaybeMessage< ::cedana::services::task::ConnectionStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::ConnectionStat >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::Addr* Arena::CreateMaybeMessage< ::cedana::services::task::Addr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::Addr >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::ProcessStateStreamingArgs* Arena::CreateMaybeMessage< ::cedana::services::task::ProcessStateStreamingArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::ProcessStateStreamingArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::CheckpointReason* Arena::CreateMaybeMessage< ::cedana::services::task::CheckpointReason >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::CheckpointReason >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::StartAttachArgs* Arena::CreateMaybeMessage< ::cedana::services::task::StartAttachArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::StartAttachArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::StartAttachResp* Arena::CreateMaybeMessage< ::cedana::services::task::StartAttachResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::StartAttachResp >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::RestoreAttachArgs* Arena::CreateMaybeMessage< ::cedana::services::task::RestoreAttachArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::RestoreAttachArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::RestoreAttachResp* Arena::CreateMaybeMessage< ::cedana::services::task::RestoreAttachResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::RestoreAttachResp >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::DetailedHealthCheckRequest* Arena::CreateMaybeMessage< ::cedana::services::task::DetailedHealthCheckRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::DetailedHealthCheckRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::DetailedHealthCheckResponse* Arena::CreateMaybeMessage< ::cedana::services::task::DetailedHealthCheckResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::DetailedHealthCheckResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::HealthCheckStats* Arena::CreateMaybeMessage< ::cedana::services::task::HealthCheckStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::HealthCheckStats >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::GetConfigRequest* Arena::CreateMaybeMessage< ::cedana::services::task::GetConfigRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::GetConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::GetConfigResponse* Arena::CreateMaybeMessage< ::cedana::services::task::GetConfigResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::GetConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::QueueJobCheckpointRequest* Arena::CreateMaybeMessage< ::cedana::services::task::QueueJobCheckpointRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::QueueJobCheckpointRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::QueueJobRestoreRequest* Arena::CreateMaybeMessage< ::cedana::services::task::QueueJobRestoreRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::QueueJobRestoreRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::QueueJobID* Arena::CreateMaybeMessage< ::cedana::services::task::QueueJobID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::QueueJobID >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::QueueJobStatus* Arena::CreateMaybeMessage< ::cedana::services::task::QueueJobStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::QueueJobStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::ContainerInfoRequest* Arena::CreateMaybeMessage< ::cedana::services::task::ContainerInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::ContainerInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::ContainerInfo* Arena::CreateMaybeMessage< ::cedana::services::task::ContainerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::ContainerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cedana::services::task::ContainersInfo* Arena::CreateMaybeMessage< ::cedana::services::task::ContainersInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedana::services::task::ContainersInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
