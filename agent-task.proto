syntax = "proto3";

import "gpu.proto";
package cedana.services.agent_task;

// Query functions here work just like your familiar query functions in HTTP GET requests,
// where if you don't specify anything in the query, it will return all the valid results,
// but if you do it will filter out based on the query parameters.

service TaskService {
  // Health
  rpc DetailedHealthCheck(DetailedHealthCheckRequest) returns (DetailedHealthCheckResponse) {}

  // Kata
  rpc KataDump(DumpArgs) returns (DumpResp);
  rpc KataRestore(RestoreArgs) returns (RestoreResp);
  
  // Config
  rpc GetConfig(GetConfigRequest) returns (GetConfigResponse) {}
}

/////////////////////
///////Health////////
/////////////////////

message DetailedHealthCheckRequest {
    int32 UID = 1;
    int32 GID = 2;
    repeated int32 Groups = 3;
}

message DetailedHealthCheckResponse {
    HealthCheckStats HealthCheckStats = 1;
    repeated string unhealthyReasons = 2;
}

message HealthCheckStats {
   string criuVersion = 1;
   cedanagpu.HealthCheckResponse GPUHealthCheck = 2;
}

/////////////////////
///////Config////////
/////////////////////

message GetConfigRequest {
}

message GetConfigResponse {
  string JSON = 1;
}

///////////////////////
/////// PROCESS ///////
///////////////////////

message ProcessState {
  int32 PID = 1;
  string Task = 2;
  string ContainerID = 4;
  string StartedAt = 5;
  ProcessInfo ProcessInfo = 6;
  string CheckpointPath = 7;
  CheckpointState CheckpointState = 8;
  JobState JobState = 9;
  repeated RemoteState RemoteState = 10;
  bool GPUCheckpointed = 11;
  string JID = 12;
  HostInfo HostInfo = 13;
  CPUInfo CPUInfo = 14;
  MemoryInfo MemoryInfo = 15;
  repeated int32 UIDs = 16;
  repeated int32 GIDs = 17;
  repeated int32 Groups = 18;
}

message ProcessInfo {
  int32 PID = 1;
  bool AttachedToHardwareAccel = 2;
  repeated OpenFilesStat OpenFds = 3;
  string WorkingDir = 4;
  repeated ConnectionStat OpenConnections = 5;
  float MemoryPercent = 6;
  bool IsRunning = 7;
  string Status = 8;
}

message OpenFilesStat {
  string Path = 1;
  uint64 Fd = 2;
  string Mode = 3;
  StreamType Stream = 5;
  enum StreamType {
    STDIN = 0;
    STDOUT = 1;
    STDERR = 2;
    NONE = 3;
  }
}

message ConnectionStat {
  uint32 Fd = 1;
  uint32 Family = 2;
  uint32 Type = 3;
  Addr Laddr = 4;
  Addr Raddr = 5;
  string Status = 6;
  repeated int32 UIDs = 7;
  int32 PID = 8;
}

message Addr {
  string IP = 1;
  uint32 Port = 2;
}

enum CheckpointState {
  CHECKPOINTED = 0;
  CHECKPOINT_FAILED = 1;
  RESTORED = 2;
  RESTORE_FAILED = 3;
}

enum JobState {
  JOB_STARTUP_FAILED = 0;
  JOB_KILLED = 1;
  JOB_IDLE = 2;
  JOB_RUNNING = 3;
  JOB_PENDING = 4;
  JOB_DONE = 5;
}

message RemoteState {
  string CheckpointID = 1;
  string UploadID = 2;
  int64 Timestamp = 3;
}

message HostInfo {
  string HostID = 1;
  string Hostname = 4;
  string OS = 5;
  string Platform = 6;
  string KernelVersion = 7;
  string KernelArch = 8;
  string VirtualizationSystem = 9;
  string VirtualizationRole = 10;
}

message CPUInfo {
  int32 Count = 1;
  int32 CPU = 2;
  string VendorID = 3;
  string Family = 4;
  string PhysicalID = 5;
}

message MemoryInfo {
  uint64 Total = 1;
  uint64 Available = 2;
  uint64 Used = 3;
}

/////////////////
////// C/R //////
/////////////////

message DumpStats {
    DumpType DumpType = 1;
    int64 PrepareDuration = 2;
    int64 CRIUDuration = 3;
    int64 GPUDuration = 4;
    int64 UploadDuration = 5;
    ContainerRuntime ContainerRuntime = 6;
    bool Kubernetes = 7;
    CheckpointFileStats CheckpointFileStats = 8;
}

message RestoreStats {
    DumpType DumpType = 1;
    ContainerRuntime ContainerRuntime = 2;
    int64 PrepareDuration = 3;
    int64 CRIUDuration = 4;
    int64 GPUDuration = 5;
    int64 DownloadDuration = 6;
    CheckpointFileStats CheckpointFileStats = 7;
    cedanagpu.GPURestoreStats GPURestoreStats = 8;
}

message CheckpointFileStats {
    int64 Size = 1;
    int64 Duration = 2;
}

enum ContainerRuntime {
     CRIO = 0;
     CONTAINERD = 1;
}

enum CRType {
  LOCAL = 0;
  REMOTE = 1;
}

enum DumpType {
     PROCESS = 0;
     RUNC = 1;
     KATA = 2;
     ROOTFS = 3;
}

///////////////////////
////// KATA ARGS //////
///////////////////////

message DumpArgs {
  int32 PID = 1;
  string Dir = 2;
  CRType Type = 3;
  string JID = 4;
  bool GPU = 5;
  bool TcpEstablished = 6;
  bool Stream = 7;
}

message RestoreArgs {
  CRType Type = 1;
  string CheckpointID = 2;
  string CheckpointPath = 3;
  string JID = 4;
  int32 UID = 5;
  int32 GID = 6;
  repeated int32 Groups = 7;
  bool TcpEstablished = 8;
  bool Stream = 9;
}

message DumpResp {
  string Message = 1;
  string CheckpointID = 2;
  string UploadID = 3;
  ProcessState State = 4;
  DumpStats DumpStats = 5;
}

message RestoreResp {
  string Message = 1;
  int32 NewPID = 2;
  ProcessState State = 3;
  RestoreStats RestoreStats = 6;
}
